// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: friend.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//好友操作类型
type FriendOperatorType int32

const (
	//请求好友
	FriendOperatorType_AskFriends FriendOperatorType = 0
	//添加好友
	FriendOperatorType_AddFriend FriendOperatorType = 3
	//删除好友
	FriendOperatorType_Delete FriendOperatorType = 4
	//搜索好友
	FriendOperatorType_SearchFriend FriendOperatorType = 5
	//拜访好友
	FriendOperatorType_VisitFriend FriendOperatorType = 6
	//点赞好友
	FriendOperatorType_Like FriendOperatorType = 7
	//点赞robot
	FriendOperatorType_RobotLike FriendOperatorType = 8
	//Test
	FriendOperatorType_Test FriendOperatorType = 9
	//请求给自己点过赞的玩家数据
	FriendOperatorType_AskUserLiked FriendOperatorType = 10
	//删除给自己点过赞的玩家
	FriendOperatorType_DelUserLiked FriendOperatorType = 11
)

// Enum value maps for FriendOperatorType.
var (
	FriendOperatorType_name = map[int32]string{
		0:  "AskFriends",
		3:  "AddFriend",
		4:  "Delete",
		5:  "SearchFriend",
		6:  "VisitFriend",
		7:  "Like",
		8:  "RobotLike",
		9:  "Test",
		10: "AskUserLiked",
		11: "DelUserLiked",
	}
	FriendOperatorType_value = map[string]int32{
		"AskFriends":   0,
		"AddFriend":    3,
		"Delete":       4,
		"SearchFriend": 5,
		"VisitFriend":  6,
		"Like":         7,
		"RobotLike":    8,
		"Test":         9,
		"AskUserLiked": 10,
		"DelUserLiked": 11,
	}
)

func (x FriendOperatorType) Enum() *FriendOperatorType {
	p := new(FriendOperatorType)
	*p = x
	return p
}

func (x FriendOperatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendOperatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_friend_proto_enumTypes[0].Descriptor()
}

func (FriendOperatorType) Type() protoreflect.EnumType {
	return &file_friend_proto_enumTypes[0]
}

func (x FriendOperatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendOperatorType.Descriptor instead.
func (FriendOperatorType) EnumDescriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{0}
}

//好友调试操作类型
type FriendDebugType int32

const (
	FriendDebugType_AddFriends    FriendDebugType = 0
	FriendDebugType_SearchFriends FriendDebugType = 1
)

// Enum value maps for FriendDebugType.
var (
	FriendDebugType_name = map[int32]string{
		0: "AddFriends",
		1: "SearchFriends",
	}
	FriendDebugType_value = map[string]int32{
		"AddFriends":    0,
		"SearchFriends": 1,
	}
)

func (x FriendDebugType) Enum() *FriendDebugType {
	p := new(FriendDebugType)
	*p = x
	return p
}

func (x FriendDebugType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendDebugType) Descriptor() protoreflect.EnumDescriptor {
	return file_friend_proto_enumTypes[1].Descriptor()
}

func (FriendDebugType) Type() protoreflect.EnumType {
	return &file_friend_proto_enumTypes[1]
}

func (x FriendDebugType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendDebugType.Descriptor instead.
func (FriendDebugType) EnumDescriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{1}
}

//好友申请操作类型
type FriendApplyOperatorType int32

const (
	//请求好友申请列表
	FriendApplyOperatorType_AskApplyList FriendApplyOperatorType = 0
	//请求系统推荐好友
	FriendApplyOperatorType_RecommendList FriendApplyOperatorType = 1
	//同意申请
	FriendApplyOperatorType_Apply FriendApplyOperatorType = 2
	//拒绝申请
	FriendApplyOperatorType_Refuse FriendApplyOperatorType = 3
)

// Enum value maps for FriendApplyOperatorType.
var (
	FriendApplyOperatorType_name = map[int32]string{
		0: "AskApplyList",
		1: "RecommendList",
		2: "Apply",
		3: "Refuse",
	}
	FriendApplyOperatorType_value = map[string]int32{
		"AskApplyList":  0,
		"RecommendList": 1,
		"Apply":         2,
		"Refuse":        3,
	}
)

func (x FriendApplyOperatorType) Enum() *FriendApplyOperatorType {
	p := new(FriendApplyOperatorType)
	*p = x
	return p
}

func (x FriendApplyOperatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendApplyOperatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_friend_proto_enumTypes[2].Descriptor()
}

func (FriendApplyOperatorType) Type() protoreflect.EnumType {
	return &file_friend_proto_enumTypes[2]
}

func (x FriendApplyOperatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendApplyOperatorType.Descriptor instead.
func (FriendApplyOperatorType) EnumDescriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{2}
}

//好友数据
type FriendDatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//好友列表
	FriendDatas []*FriendData `protobuf:"bytes,1,rep,name=friendDatas,proto3" json:"friendDatas,omitempty"`
}

func (x *FriendDatas) Reset() {
	*x = FriendDatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendDatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendDatas) ProtoMessage() {}

func (x *FriendDatas) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendDatas.ProtoReflect.Descriptor instead.
func (*FriendDatas) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{0}
}

func (x *FriendDatas) GetFriendDatas() []*FriendData {
	if x != nil {
		return x.FriendDatas
	}
	return nil
}

//好友操作
type CSFriendOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//操作类型
	Type FriendOperatorType `protobuf:"varint,1,opt,name=type,proto3,enum=FriendOperatorType" json:"type,omitempty"`
	//好友的ID
	UserID int64 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *CSFriendOperator) Reset() {
	*x = CSFriendOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSFriendOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSFriendOperator) ProtoMessage() {}

func (x *CSFriendOperator) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSFriendOperator.ProtoReflect.Descriptor instead.
func (*CSFriendOperator) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{1}
}

func (x *CSFriendOperator) GetType() FriendOperatorType {
	if x != nil {
		return x.Type
	}
	return FriendOperatorType_AskFriends
}

func (x *CSFriendOperator) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

//好友操作服务器回包
type SCFriendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//被点赞的数量
	LikeCount int32 `protobuf:"varint,1,opt,name=likeCount,proto3" json:"likeCount,omitempty"`
	//请求的好友数据
	FriendDatas *FriendDatas `protobuf:"bytes,2,opt,name=friendDatas,proto3" json:"friendDatas,omitempty"`
	//增加，搜索好友的数据
	FriendData *FriendData `protobuf:"bytes,3,opt,name=friendData,proto3" json:"friendData,omitempty"`
	//点赞过的玩家
	LikeData *LikeData `protobuf:"bytes,4,opt,name=likeData,proto3" json:"likeData,omitempty"`
	//好友被点赞的数量
	FriendLikeCount int32 `protobuf:"varint,5,opt,name=friendLikeCount,proto3" json:"friendLikeCount,omitempty"`
	//拜访的好友建筑数据
	MapData *VisitData `protobuf:"bytes,6,opt,name=mapData,proto3" json:"mapData,omitempty"`
	//点赞过自己的玩家数据
	LikedSelfData []*UserLikedData `protobuf:"bytes,7,rep,name=likedSelfData,proto3" json:"likedSelfData,omitempty"`
	//好友申请相关数据
	FriendApplyDatas *SCFriendApplyData `protobuf:"bytes,8,opt,name=friendApplyDatas,proto3" json:"friendApplyDatas,omitempty"`
}

func (x *SCFriendData) Reset() {
	*x = SCFriendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFriendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFriendData) ProtoMessage() {}

func (x *SCFriendData) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFriendData.ProtoReflect.Descriptor instead.
func (*SCFriendData) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{2}
}

func (x *SCFriendData) GetLikeCount() int32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *SCFriendData) GetFriendDatas() *FriendDatas {
	if x != nil {
		return x.FriendDatas
	}
	return nil
}

func (x *SCFriendData) GetFriendData() *FriendData {
	if x != nil {
		return x.FriendData
	}
	return nil
}

func (x *SCFriendData) GetLikeData() *LikeData {
	if x != nil {
		return x.LikeData
	}
	return nil
}

func (x *SCFriendData) GetFriendLikeCount() int32 {
	if x != nil {
		return x.FriendLikeCount
	}
	return 0
}

func (x *SCFriendData) GetMapData() *VisitData {
	if x != nil {
		return x.MapData
	}
	return nil
}

func (x *SCFriendData) GetLikedSelfData() []*UserLikedData {
	if x != nil {
		return x.LikedSelfData
	}
	return nil
}

func (x *SCFriendData) GetFriendApplyDatas() *SCFriendApplyData {
	if x != nil {
		return x.FriendApplyDatas
	}
	return nil
}

type VisitData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//建筑
	BuildingData *MapBuildingData `protobuf:"bytes,1,opt,name=buildingData,proto3" json:"buildingData,omitempty"`
	//经验
	ExpData *ExpData `protobuf:"bytes,2,opt,name=expData,proto3" json:"expData,omitempty"`
	//建筑的解锁数据
	MapGridSprites *MapGridSprites `protobuf:"bytes,3,opt,name=mapGridSprites,proto3" json:"mapGridSprites,omitempty"`
	//好友的数据
	FriendData *FriendData `protobuf:"bytes,4,opt,name=friendData,proto3" json:"friendData,omitempty"`
}

func (x *VisitData) Reset() {
	*x = VisitData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisitData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisitData) ProtoMessage() {}

func (x *VisitData) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisitData.ProtoReflect.Descriptor instead.
func (*VisitData) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{3}
}

func (x *VisitData) GetBuildingData() *MapBuildingData {
	if x != nil {
		return x.BuildingData
	}
	return nil
}

func (x *VisitData) GetExpData() *ExpData {
	if x != nil {
		return x.ExpData
	}
	return nil
}

func (x *VisitData) GetMapGridSprites() *MapGridSprites {
	if x != nil {
		return x.MapGridSprites
	}
	return nil
}

func (x *VisitData) GetFriendData() *FriendData {
	if x != nil {
		return x.FriendData
	}
	return nil
}

type LikeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//点赞过的玩家
	LikeUsers []int64 `protobuf:"varint,1,rep,packed,name=likeUsers,proto3" json:"likeUsers,omitempty"`
}

func (x *LikeData) Reset() {
	*x = LikeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeData) ProtoMessage() {}

func (x *LikeData) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeData.ProtoReflect.Descriptor instead.
func (*LikeData) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{4}
}

func (x *LikeData) GetLikeUsers() []int64 {
	if x != nil {
		return x.LikeUsers
	}
	return nil
}

//点赞过自己的玩家
type UserLikedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   int64          `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	UserName string         `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	HeadIcon string         `protobuf:"bytes,3,opt,name=headIcon,proto3" json:"headIcon,omitempty"`
	Type     E_CHANNEL_TYPE `protobuf:"varint,4,opt,name=type,proto3,enum=E_CHANNEL_TYPE" json:"type,omitempty"`
}

func (x *UserLikedData) Reset() {
	*x = UserLikedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLikedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLikedData) ProtoMessage() {}

func (x *UserLikedData) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLikedData.ProtoReflect.Descriptor instead.
func (*UserLikedData) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{5}
}

func (x *UserLikedData) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserLikedData) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserLikedData) GetHeadIcon() string {
	if x != nil {
		return x.HeadIcon
	}
	return ""
}

func (x *UserLikedData) GetType() E_CHANNEL_TYPE {
	if x != nil {
		return x.Type
	}
	return E_CHANNEL_TYPE_GUEST_CHANNEL
}

//好友申请操作
type CSFriendApplyOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   FriendApplyOperatorType `protobuf:"varint,1,opt,name=type,proto3,enum=FriendApplyOperatorType" json:"type,omitempty"`
	UserID int64                   `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *CSFriendApplyOperator) Reset() {
	*x = CSFriendApplyOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSFriendApplyOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSFriendApplyOperator) ProtoMessage() {}

func (x *CSFriendApplyOperator) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSFriendApplyOperator.ProtoReflect.Descriptor instead.
func (*CSFriendApplyOperator) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{6}
}

func (x *CSFriendApplyOperator) GetType() FriendApplyOperatorType {
	if x != nil {
		return x.Type
	}
	return FriendApplyOperatorType_AskApplyList
}

func (x *CSFriendApplyOperator) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

//好友推荐
type FriendRecommend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecommendTime int64         `protobuf:"varint,1,opt,name=recommendTime,proto3" json:"recommendTime,omitempty"`
	FriendDatas   []*FriendData `protobuf:"bytes,2,rep,name=friendDatas,proto3" json:"friendDatas,omitempty"`
}

func (x *FriendRecommend) Reset() {
	*x = FriendRecommend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendRecommend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendRecommend) ProtoMessage() {}

func (x *FriendRecommend) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendRecommend.ProtoReflect.Descriptor instead.
func (*FriendRecommend) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{7}
}

func (x *FriendRecommend) GetRecommendTime() int64 {
	if x != nil {
		return x.RecommendTime
	}
	return 0
}

func (x *FriendRecommend) GetFriendDatas() []*FriendData {
	if x != nil {
		return x.FriendDatas
	}
	return nil
}

//好友申请操作服务器回包
type SCFriendApplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//请求的好友申请数据
	FriendApplyDatas *FriendDatas `protobuf:"bytes,1,opt,name=friendApplyDatas,proto3" json:"friendApplyDatas,omitempty"`
	//系统推荐的好友数据
	RecommendDatas *FriendRecommend `protobuf:"bytes,2,opt,name=recommendDatas,proto3" json:"recommendDatas,omitempty"`
}

func (x *SCFriendApplyData) Reset() {
	*x = SCFriendApplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFriendApplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFriendApplyData) ProtoMessage() {}

func (x *SCFriendApplyData) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFriendApplyData.ProtoReflect.Descriptor instead.
func (*SCFriendApplyData) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{8}
}

func (x *SCFriendApplyData) GetFriendApplyDatas() *FriendDatas {
	if x != nil {
		return x.FriendApplyDatas
	}
	return nil
}

func (x *SCFriendApplyData) GetRecommendDatas() *FriendRecommend {
	if x != nil {
		return x.RecommendDatas
	}
	return nil
}

type CSFriendDebug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//操作类型
	OperatorType FriendDebugType `protobuf:"varint,1,opt,name=operatorType,proto3,enum=FriendDebugType" json:"operatorType,omitempty"`
	//请求好友的页码
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	//请求的数量
	PageCount int32 `protobuf:"varint,3,opt,name=pageCount,proto3" json:"pageCount,omitempty"`
	//用户ID
	UserID int64 `protobuf:"varint,4,opt,name=userID,proto3" json:"userID,omitempty"`
	//最小等级
	MinLevel int32 `protobuf:"varint,5,opt,name=minLevel,proto3" json:"minLevel,omitempty"`
	//最大等级
	MaxLevel int32 `protobuf:"varint,6,opt,name=maxLevel,proto3" json:"maxLevel,omitempty"`
	//玩家类型(1 活跃 2 不活跃)
	Status int32 `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	//要添加好友的玩家ID列表
	AddUserID []int64 `protobuf:"varint,8,rep,packed,name=addUserID,proto3" json:"addUserID,omitempty"`
}

func (x *CSFriendDebug) Reset() {
	*x = CSFriendDebug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSFriendDebug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSFriendDebug) ProtoMessage() {}

func (x *CSFriendDebug) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSFriendDebug.ProtoReflect.Descriptor instead.
func (*CSFriendDebug) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{9}
}

func (x *CSFriendDebug) GetOperatorType() FriendDebugType {
	if x != nil {
		return x.OperatorType
	}
	return FriendDebugType_AddFriends
}

func (x *CSFriendDebug) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CSFriendDebug) GetPageCount() int32 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

func (x *CSFriendDebug) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CSFriendDebug) GetMinLevel() int32 {
	if x != nil {
		return x.MinLevel
	}
	return 0
}

func (x *CSFriendDebug) GetMaxLevel() int32 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

func (x *CSFriendDebug) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CSFriendDebug) GetAddUserID() []int64 {
	if x != nil {
		return x.AddUserID
	}
	return nil
}

type SCFriendDebug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//符合条件的玩家好友ID
	UserIDs     []int64      `protobuf:"varint,1,rep,packed,name=UserIDs,proto3" json:"UserIDs,omitempty"`
	FriendDatas *FriendDatas `protobuf:"bytes,2,opt,name=friendDatas,proto3" json:"friendDatas,omitempty"`
}

func (x *SCFriendDebug) Reset() {
	*x = SCFriendDebug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFriendDebug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFriendDebug) ProtoMessage() {}

func (x *SCFriendDebug) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFriendDebug.ProtoReflect.Descriptor instead.
func (*SCFriendDebug) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{10}
}

func (x *SCFriendDebug) GetUserIDs() []int64 {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *SCFriendDebug) GetFriendDatas() *FriendDatas {
	if x != nil {
		return x.FriendDatas
	}
	return nil
}

type LikedFriendsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//点赞过自己的玩家数据
	LikedData []*UserLikedData `protobuf:"bytes,7,rep,name=likedData,proto3" json:"likedData,omitempty"`
}

func (x *LikedFriendsData) Reset() {
	*x = LikedFriendsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikedFriendsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikedFriendsData) ProtoMessage() {}

func (x *LikedFriendsData) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikedFriendsData.ProtoReflect.Descriptor instead.
func (*LikedFriendsData) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{11}
}

func (x *LikedFriendsData) GetLikedData() []*UserLikedData {
	if x != nil {
		return x.LikedData
	}
	return nil
}

var File_friend_proto protoreflect.FileDescriptor

var file_friend_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x0b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x22, 0x53, 0x0a, 0x10, 0x43, 0x53, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xf6, 0x02, 0x0a, 0x0c, 0x53, 0x43, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x25, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6c, 0x69, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x07, 0x6d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0d, 0x6c, 0x69, 0x6b, 0x65,
	0x64, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e,
	0x0a, 0x10, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x43, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0xcb,
	0x01, 0x0a, 0x09, 0x56, 0x69, 0x73, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0c,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x22, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x78, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x65,
	0x78, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x47, 0x72, 0x69,
	0x64, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x69, 0x64, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52,
	0x0e, 0x6d, 0x61, 0x70, 0x47, 0x72, 0x69, 0x64, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x28, 0x0a, 0x08,
	0x4c, 0x69, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5d, 0x0a,
	0x15, 0x43, 0x53, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x66, 0x0a, 0x0f,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x53, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x10, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x52, 0x10, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0xfd,
	0x01, 0x0a, 0x0d, 0x43, 0x53, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x12, 0x34, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x09, 0x61, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x59,
	0x0a, 0x0d, 0x53, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x52, 0x0b, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x4c, 0x69, 0x6b,
	0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a,
	0x09, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2a, 0xa9, 0x01, 0x0a, 0x12,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x73, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x04, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x05, 0x12,
	0x0f, 0x0a, 0x0b, 0x56, 0x69, 0x73, 0x69, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x73,
	0x74, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x73, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x6b, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x6b, 0x65, 0x64, 0x10, 0x0b, 0x2a, 0x34, 0x0a, 0x0f, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x44, 0x65, 0x62, 0x75, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x64,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x01, 0x2a, 0x55, 0x0a,
	0x17, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x73, 0x6b, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x66, 0x75,
	0x73, 0x65, 0x10, 0x03, 0x42, 0x17, 0x48, 0x01, 0x5a, 0x06, 0x2e, 0x2f, 0x3b, 0x61, 0x70, 0x69,
	0xaa, 0x02, 0x0a, 0x4d, 0x4d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_friend_proto_rawDescOnce sync.Once
	file_friend_proto_rawDescData = file_friend_proto_rawDesc
)

func file_friend_proto_rawDescGZIP() []byte {
	file_friend_proto_rawDescOnce.Do(func() {
		file_friend_proto_rawDescData = protoimpl.X.CompressGZIP(file_friend_proto_rawDescData)
	})
	return file_friend_proto_rawDescData
}

var file_friend_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_friend_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_friend_proto_goTypes = []interface{}{
	(FriendOperatorType)(0),       // 0: FriendOperatorType
	(FriendDebugType)(0),          // 1: FriendDebugType
	(FriendApplyOperatorType)(0),  // 2: FriendApplyOperatorType
	(*FriendDatas)(nil),           // 3: FriendDatas
	(*CSFriendOperator)(nil),      // 4: CSFriendOperator
	(*SCFriendData)(nil),          // 5: SCFriendData
	(*VisitData)(nil),             // 6: VisitData
	(*LikeData)(nil),              // 7: LikeData
	(*UserLikedData)(nil),         // 8: UserLikedData
	(*CSFriendApplyOperator)(nil), // 9: CSFriendApplyOperator
	(*FriendRecommend)(nil),       // 10: FriendRecommend
	(*SCFriendApplyData)(nil),     // 11: SCFriendApplyData
	(*CSFriendDebug)(nil),         // 12: CSFriendDebug
	(*SCFriendDebug)(nil),         // 13: SCFriendDebug
	(*LikedFriendsData)(nil),      // 14: LikedFriendsData
	(*FriendData)(nil),            // 15: FriendData
	(*MapBuildingData)(nil),       // 16: MapBuildingData
	(*ExpData)(nil),               // 17: ExpData
	(*MapGridSprites)(nil),        // 18: MapGridSprites
	(E_CHANNEL_TYPE)(0),           // 19: E_CHANNEL_TYPE
}
var file_friend_proto_depIdxs = []int32{
	15, // 0: FriendDatas.friendDatas:type_name -> FriendData
	0,  // 1: CSFriendOperator.type:type_name -> FriendOperatorType
	3,  // 2: SCFriendData.friendDatas:type_name -> FriendDatas
	15, // 3: SCFriendData.friendData:type_name -> FriendData
	7,  // 4: SCFriendData.likeData:type_name -> LikeData
	6,  // 5: SCFriendData.mapData:type_name -> VisitData
	8,  // 6: SCFriendData.likedSelfData:type_name -> UserLikedData
	11, // 7: SCFriendData.friendApplyDatas:type_name -> SCFriendApplyData
	16, // 8: VisitData.buildingData:type_name -> MapBuildingData
	17, // 9: VisitData.expData:type_name -> ExpData
	18, // 10: VisitData.mapGridSprites:type_name -> MapGridSprites
	15, // 11: VisitData.friendData:type_name -> FriendData
	19, // 12: UserLikedData.type:type_name -> E_CHANNEL_TYPE
	2,  // 13: CSFriendApplyOperator.type:type_name -> FriendApplyOperatorType
	15, // 14: FriendRecommend.friendDatas:type_name -> FriendData
	3,  // 15: SCFriendApplyData.friendApplyDatas:type_name -> FriendDatas
	10, // 16: SCFriendApplyData.recommendDatas:type_name -> FriendRecommend
	1,  // 17: CSFriendDebug.operatorType:type_name -> FriendDebugType
	3,  // 18: SCFriendDebug.friendDatas:type_name -> FriendDatas
	8,  // 19: LikedFriendsData.likedData:type_name -> UserLikedData
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_friend_proto_init() }
func file_friend_proto_init() {
	if File_friend_proto != nil {
		return
	}
	file_common_proto_init()
	file_userDataNative_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_friend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendDatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSFriendOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFriendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisitData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLikedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSFriendApplyOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendRecommend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFriendApplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSFriendDebug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFriendDebug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikedFriendsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_friend_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_friend_proto_goTypes,
		DependencyIndexes: file_friend_proto_depIdxs,
		EnumInfos:         file_friend_proto_enumTypes,
		MessageInfos:      file_friend_proto_msgTypes,
	}.Build()
	File_friend_proto = out.File
	file_friend_proto_rawDesc = nil
	file_friend_proto_goTypes = nil
	file_friend_proto_depIdxs = nil
}
