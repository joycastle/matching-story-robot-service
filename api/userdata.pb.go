// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: userdata.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//签到信息
type SigninData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//累计签到天数
	AddupSignDays int32 `protobuf:"varint,1,opt,name=addupSignDays,proto3" json:"addupSignDays,omitempty"`
	//上次签到的日期
	LastSignTime int64 `protobuf:"varint,2,opt,name=lastSignTime,proto3" json:"lastSignTime,omitempty"`
	//签到开始的日期
	SignStartTime int64 `protobuf:"varint,3,opt,name=signStartTime,proto3" json:"signStartTime,omitempty"`
	//累计签到的周期
	SignAddperiod int32 `protobuf:"varint,4,opt,name=signAddperiod,proto3" json:"signAddperiod,omitempty"`
	//30天签到天数
	AddupSignDays30 int32 `protobuf:"varint,5,opt,name=addupSignDays30,proto3" json:"addupSignDays30,omitempty"`
	//30天签到累计签到的周期
	SignAddperiod30 int32 `protobuf:"varint,6,opt,name=signAddperiod30,proto3" json:"signAddperiod30,omitempty"`
}

func (x *SigninData) Reset() {
	*x = SigninData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigninData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigninData) ProtoMessage() {}

func (x *SigninData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigninData.ProtoReflect.Descriptor instead.
func (*SigninData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{0}
}

func (x *SigninData) GetAddupSignDays() int32 {
	if x != nil {
		return x.AddupSignDays
	}
	return 0
}

func (x *SigninData) GetLastSignTime() int64 {
	if x != nil {
		return x.LastSignTime
	}
	return 0
}

func (x *SigninData) GetSignStartTime() int64 {
	if x != nil {
		return x.SignStartTime
	}
	return 0
}

func (x *SigninData) GetSignAddperiod() int32 {
	if x != nil {
		return x.SignAddperiod
	}
	return 0
}

func (x *SigninData) GetAddupSignDays30() int32 {
	if x != nil {
		return x.AddupSignDays30
	}
	return 0
}

func (x *SigninData) GetSignAddperiod30() int32 {
	if x != nil {
		return x.SignAddperiod30
	}
	return 0
}

//限时商店数据
type MergeShopData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitShops         []*LimitShop    `protobuf:"bytes,1,rep,name=limitShops,proto3" json:"limitShops,omitempty"`
	LastRefreshTime    int64           `protobuf:"varint,2,opt,name=LastRefreshTime,proto3" json:"LastRefreshTime,omitempty"`
	PieceShowTimes     []*MaterialJson `protobuf:"bytes,3,rep,name=pieceShowTimes,proto3" json:"pieceShowTimes,omitempty"`
	ClickTimes         int32           `protobuf:"varint,4,opt,name=clickTimes,proto3" json:"clickTimes,omitempty"`
	IsForceRefreshShop bool            `protobuf:"varint,5,opt,name=isForceRefreshShop,proto3" json:"isForceRefreshShop,omitempty"` //是否强制刷新商店逻辑-跨版本兼容商店逻辑
}

func (x *MergeShopData) Reset() {
	*x = MergeShopData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeShopData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeShopData) ProtoMessage() {}

func (x *MergeShopData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeShopData.ProtoReflect.Descriptor instead.
func (*MergeShopData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{1}
}

func (x *MergeShopData) GetLimitShops() []*LimitShop {
	if x != nil {
		return x.LimitShops
	}
	return nil
}

func (x *MergeShopData) GetLastRefreshTime() int64 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

func (x *MergeShopData) GetPieceShowTimes() []*MaterialJson {
	if x != nil {
		return x.PieceShowTimes
	}
	return nil
}

func (x *MergeShopData) GetClickTimes() int32 {
	if x != nil {
		return x.ClickTimes
	}
	return 0
}

func (x *MergeShopData) GetIsForceRefreshShop() bool {
	if x != nil {
		return x.IsForceRefreshShop
	}
	return false
}

//限时商店
type LimitShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type              int32              `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	MaterialData      *LimitShopItemData `protobuf:"bytes,3,opt,name=MaterialData,proto3" json:"MaterialData,omitempty"`
	BuyNum            int32              `protobuf:"varint,4,opt,name=buyNum,proto3" json:"buyNum,omitempty"`
	RefreshNum        int32              `protobuf:"varint,5,opt,name=refreshNum,proto3" json:"refreshNum,omitempty"`
	IsAheadBuyRefresh bool               `protobuf:"varint,6,opt,name=isAheadBuyRefresh,proto3" json:"isAheadBuyRefresh,omitempty"`
}

func (x *LimitShop) Reset() {
	*x = LimitShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitShop) ProtoMessage() {}

func (x *LimitShop) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitShop.ProtoReflect.Descriptor instead.
func (*LimitShop) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{2}
}

func (x *LimitShop) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LimitShop) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *LimitShop) GetMaterialData() *LimitShopItemData {
	if x != nil {
		return x.MaterialData
	}
	return nil
}

func (x *LimitShop) GetBuyNum() int32 {
	if x != nil {
		return x.BuyNum
	}
	return 0
}

func (x *LimitShop) GetRefreshNum() int32 {
	if x != nil {
		return x.RefreshNum
	}
	return 0
}

func (x *LimitShop) GetIsAheadBuyRefresh() bool {
	if x != nil {
		return x.IsAheadBuyRefresh
	}
	return false
}

type LimitShopItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemIDs    []int32 `protobuf:"varint,1,rep,packed,name=itemIDs,proto3" json:"itemIDs,omitempty"`
	ItemNumers []int32 `protobuf:"varint,2,rep,packed,name=itemNumers,proto3" json:"itemNumers,omitempty"`
	ItemGrades []int32 `protobuf:"varint,3,rep,packed,name=itemGrades,proto3" json:"itemGrades,omitempty"`
}

func (x *LimitShopItemData) Reset() {
	*x = LimitShopItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitShopItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitShopItemData) ProtoMessage() {}

func (x *LimitShopItemData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitShopItemData.ProtoReflect.Descriptor instead.
func (*LimitShopItemData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{3}
}

func (x *LimitShopItemData) GetItemIDs() []int32 {
	if x != nil {
		return x.ItemIDs
	}
	return nil
}

func (x *LimitShopItemData) GetItemNumers() []int32 {
	if x != nil {
		return x.ItemNumers
	}
	return nil
}

func (x *LimitShopItemData) GetItemGrades() []int32 {
	if x != nil {
		return x.ItemGrades
	}
	return nil
}

//活动信息
type ActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activitys              []*Activity                   `protobuf:"bytes,1,rep,name=activitys,proto3" json:"activitys,omitempty"`
	EndActivitys           []*Activity                   `protobuf:"bytes,2,rep,name=endActivitys,proto3" json:"endActivitys,omitempty"`
	CurrentActID           int32                         `protobuf:"varint,3,opt,name=currentActID,proto3" json:"currentActID,omitempty"`                     //当前活动的id
	LastActEnableTime      int64                         `protobuf:"varint,4,opt,name=lastActEnableTime,proto3" json:"lastActEnableTime,omitempty"`           //上次活动开启的时间
	CurActEndTime          int64                         `protobuf:"varint,5,opt,name=curActEndTime,proto3" json:"curActEndTime,omitempty"`                   //这次活动的结束时间
	CurrentActRoundData    []*CurrentActRoundData        `protobuf:"bytes,6,rep,name=currentActRoundData,proto3" json:"currentActRoundData,omitempty"`        //活动轮次记录数据
	CurrentActContinueTime int32                         `protobuf:"varint,7,opt,name=currentActContinueTime,proto3" json:"currentActContinueTime,omitempty"` //当前活动的持续时间
	ActNotficationData     *ActivityLocalNotficationData `protobuf:"bytes,8,opt,name=actNotficationData,proto3" json:"actNotficationData,omitempty"`          //活动推送
	AllActivityDotData     []*ActivityDotData            `protobuf:"bytes,9,rep,name=allActivityDotData,proto3" json:"allActivityDotData,omitempty"`          //所有活动的打点数据
}

func (x *ActivityData) Reset() {
	*x = ActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityData) ProtoMessage() {}

func (x *ActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityData.ProtoReflect.Descriptor instead.
func (*ActivityData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{4}
}

func (x *ActivityData) GetActivitys() []*Activity {
	if x != nil {
		return x.Activitys
	}
	return nil
}

func (x *ActivityData) GetEndActivitys() []*Activity {
	if x != nil {
		return x.EndActivitys
	}
	return nil
}

func (x *ActivityData) GetCurrentActID() int32 {
	if x != nil {
		return x.CurrentActID
	}
	return 0
}

func (x *ActivityData) GetLastActEnableTime() int64 {
	if x != nil {
		return x.LastActEnableTime
	}
	return 0
}

func (x *ActivityData) GetCurActEndTime() int64 {
	if x != nil {
		return x.CurActEndTime
	}
	return 0
}

func (x *ActivityData) GetCurrentActRoundData() []*CurrentActRoundData {
	if x != nil {
		return x.CurrentActRoundData
	}
	return nil
}

func (x *ActivityData) GetCurrentActContinueTime() int32 {
	if x != nil {
		return x.CurrentActContinueTime
	}
	return 0
}

func (x *ActivityData) GetActNotficationData() *ActivityLocalNotficationData {
	if x != nil {
		return x.ActNotficationData
	}
	return nil
}

func (x *ActivityData) GetAllActivityDotData() []*ActivityDotData {
	if x != nil {
		return x.AllActivityDotData
	}
	return nil
}

//活动打点数据
type ActivityDotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityName    string `protobuf:"bytes,1,opt,name=activityName,proto3" json:"activityName,omitempty"`       //活动名称
	ActivityEpisode string `protobuf:"bytes,2,opt,name=activityEpisode,proto3" json:"activityEpisode,omitempty"` //活动标记
}

func (x *ActivityDotData) Reset() {
	*x = ActivityDotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDotData) ProtoMessage() {}

func (x *ActivityDotData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDotData.ProtoReflect.Descriptor instead.
func (*ActivityDotData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{5}
}

func (x *ActivityDotData) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *ActivityDotData) GetActivityEpisode() string {
	if x != nil {
		return x.ActivityEpisode
	}
	return ""
}

//活动推送ID数据
type ActivityLocalNotficationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartActNotficationIds []int32 `protobuf:"varint,1,rep,packed,name=startActNotficationIds,proto3" json:"startActNotficationIds,omitempty"`
	EndActNotficationIds   []int32 `protobuf:"varint,2,rep,packed,name=endActNotficationIds,proto3" json:"endActNotficationIds,omitempty"`
}

func (x *ActivityLocalNotficationData) Reset() {
	*x = ActivityLocalNotficationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityLocalNotficationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityLocalNotficationData) ProtoMessage() {}

func (x *ActivityLocalNotficationData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityLocalNotficationData.ProtoReflect.Descriptor instead.
func (*ActivityLocalNotficationData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{6}
}

func (x *ActivityLocalNotficationData) GetStartActNotficationIds() []int32 {
	if x != nil {
		return x.StartActNotficationIds
	}
	return nil
}

func (x *ActivityLocalNotficationData) GetEndActNotficationIds() []int32 {
	if x != nil {
		return x.EndActNotficationIds
	}
	return nil
}

//活动轮次记录
type CurrentActRoundData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`             //活动id
	ActRound int32 `protobuf:"varint,2,opt,name=actRound,proto3" json:"actRound,omitempty"` //活动轮次
}

func (x *CurrentActRoundData) Reset() {
	*x = CurrentActRoundData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentActRoundData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentActRoundData) ProtoMessage() {}

func (x *CurrentActRoundData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentActRoundData.ProtoReflect.Descriptor instead.
func (*CurrentActRoundData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{7}
}

func (x *CurrentActRoundData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CurrentActRoundData) GetActRound() int32 {
	if x != nil {
		return x.ActRound
	}
	return 0
}

//活动
type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//任务id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//类型
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	//状态
	State int32 `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	//进度
	Processes int32 `protobuf:"varint,4,opt,name=processes,proto3" json:"processes,omitempty"`
	//开始时间
	StartTime int64 `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime,omitempty"`
	//上次显示时间
	ShowTime int64 `protobuf:"varint,6,opt,name=showTime,proto3" json:"showTime,omitempty"`
	//阶段奖励领取次数
	Getrewardnum int32 `protobuf:"varint,7,opt,name=getrewardnum,proto3" json:"getrewardnum,omitempty"`
	//结束时间
	EndTime int32 `protobuf:"varint,8,opt,name=endTime,proto3" json:"endTime,omitempty"`
	//礼包购买ids
	BuyGiftIds []int32 `protobuf:"varint,9,rep,packed,name=buyGiftIds,proto3" json:"buyGiftIds,omitempty"`
	//储蓄罐首次可以购买是否显示过
	CanBuyShow int32 `protobuf:"varint,10,opt,name=canBuyShow,proto3" json:"canBuyShow,omitempty"`
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{8}
}

func (x *Activity) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Activity) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Activity) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Activity) GetProcesses() int32 {
	if x != nil {
		return x.Processes
	}
	return 0
}

func (x *Activity) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Activity) GetShowTime() int64 {
	if x != nil {
		return x.ShowTime
	}
	return 0
}

func (x *Activity) GetGetrewardnum() int32 {
	if x != nil {
		return x.Getrewardnum
	}
	return 0
}

func (x *Activity) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Activity) GetBuyGiftIds() []int32 {
	if x != nil {
		return x.BuyGiftIds
	}
	return nil
}

func (x *Activity) GetCanBuyShow() int32 {
	if x != nil {
		return x.CanBuyShow
	}
	return 0
}

type MaxLevelActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//该阶段连续通关的次数
	CurStageConinPassLevelNum int32 `protobuf:"varint,1,opt,name=curStageConinPassLevelNum,proto3" json:"curStageConinPassLevelNum,omitempty"`
	//目前阶段
	CurrStage int32 `protobuf:"varint,2,opt,name=currStage,proto3" json:"currStage,omitempty"`
	//是否进入过该活动
	IsEnterThisActivity bool `protobuf:"varint,3,opt,name=isEnterThisActivity,proto3" json:"isEnterThisActivity,omitempty"`
	//当前的体力数
	NowHeartNum int32 `protobuf:"varint,4,opt,name=nowHeartNum,proto3" json:"nowHeartNum,omitempty"`
	//体力开始恢复时间
	HeartStartRecoverTime int64 `protobuf:"varint,5,opt,name=heartStartRecoverTime,proto3" json:"heartStartRecoverTime,omitempty"`
	//当前关卡数
	NowMaxLevelNum int32 `protobuf:"varint,6,opt,name=nowMaxLevelNum,proto3" json:"nowMaxLevelNum,omitempty"`
	//当前阶段的第一关卡ID
	NowStageFirstLevelID int32 `protobuf:"varint,7,opt,name=nowStageFirstLevelID,proto3" json:"nowStageFirstLevelID,omitempty"`
	//第二阶段的关卡ID组
	TwoStageLevelIDGroup []int32 `protobuf:"varint,8,rep,packed,name=twoStageLevelIDGroup,proto3" json:"twoStageLevelIDGroup,omitempty"`
	//当前活动通关次数
	NowActivityPassLevelNum int32 `protobuf:"varint,9,opt,name=nowActivityPassLevelNum,proto3" json:"nowActivityPassLevelNum,omitempty"`
	//第三阶段的关卡ID组
	ThreeStageLevelIDGroup []int32 `protobuf:"varint,10,rep,packed,name=threeStageLevelIDGroup,proto3" json:"threeStageLevelIDGroup,omitempty"`
	//本次满级玩法累计通过阶段数
	MaxLevelAccumulativePassStageNum int32 `protobuf:"varint,11,opt,name=maxLevelAccumulativePassStageNum,proto3" json:"maxLevelAccumulativePassStageNum,omitempty"`
	//多少次进入满级玩法
	HowTimesEnterMaxLevelScene int32 `protobuf:"varint,12,opt,name=howTimesEnterMaxLevelScene,proto3" json:"howTimesEnterMaxLevelScene,omitempty"`
	//当前版本的最大关卡数
	NowVersionMaxLevelNum int32 `protobuf:"varint,13,opt,name=nowVersionMaxLevelNum,proto3" json:"nowVersionMaxLevelNum,omitempty"`
}

func (x *MaxLevelActivityData) Reset() {
	*x = MaxLevelActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxLevelActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxLevelActivityData) ProtoMessage() {}

func (x *MaxLevelActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxLevelActivityData.ProtoReflect.Descriptor instead.
func (*MaxLevelActivityData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{9}
}

func (x *MaxLevelActivityData) GetCurStageConinPassLevelNum() int32 {
	if x != nil {
		return x.CurStageConinPassLevelNum
	}
	return 0
}

func (x *MaxLevelActivityData) GetCurrStage() int32 {
	if x != nil {
		return x.CurrStage
	}
	return 0
}

func (x *MaxLevelActivityData) GetIsEnterThisActivity() bool {
	if x != nil {
		return x.IsEnterThisActivity
	}
	return false
}

func (x *MaxLevelActivityData) GetNowHeartNum() int32 {
	if x != nil {
		return x.NowHeartNum
	}
	return 0
}

func (x *MaxLevelActivityData) GetHeartStartRecoverTime() int64 {
	if x != nil {
		return x.HeartStartRecoverTime
	}
	return 0
}

func (x *MaxLevelActivityData) GetNowMaxLevelNum() int32 {
	if x != nil {
		return x.NowMaxLevelNum
	}
	return 0
}

func (x *MaxLevelActivityData) GetNowStageFirstLevelID() int32 {
	if x != nil {
		return x.NowStageFirstLevelID
	}
	return 0
}

func (x *MaxLevelActivityData) GetTwoStageLevelIDGroup() []int32 {
	if x != nil {
		return x.TwoStageLevelIDGroup
	}
	return nil
}

func (x *MaxLevelActivityData) GetNowActivityPassLevelNum() int32 {
	if x != nil {
		return x.NowActivityPassLevelNum
	}
	return 0
}

func (x *MaxLevelActivityData) GetThreeStageLevelIDGroup() []int32 {
	if x != nil {
		return x.ThreeStageLevelIDGroup
	}
	return nil
}

func (x *MaxLevelActivityData) GetMaxLevelAccumulativePassStageNum() int32 {
	if x != nil {
		return x.MaxLevelAccumulativePassStageNum
	}
	return 0
}

func (x *MaxLevelActivityData) GetHowTimesEnterMaxLevelScene() int32 {
	if x != nil {
		return x.HowTimesEnterMaxLevelScene
	}
	return 0
}

func (x *MaxLevelActivityData) GetNowVersionMaxLevelNum() int32 {
	if x != nil {
		return x.NowVersionMaxLevelNum
	}
	return 0
}

//材料产出活动
type MaterialOutPutActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//活动开启时间
	ActivityLastOpenTime int64 `protobuf:"varint,1,opt,name=activityLastOpenTime,proto3" json:"activityLastOpenTime,omitempty"`
	//上次活动结束时间
	LastActivityEndTime int64 `protobuf:"varint,2,opt,name=lastActivityEndTime,proto3" json:"lastActivityEndTime,omitempty"`
	//是否CD
	IsCD bool `protobuf:"varint,3,opt,name=isCD,proto3" json:"isCD,omitempty"`
	//活动的抽取权重
	RandomWeight []*MaterialActivityRandomWeight `protobuf:"bytes,4,rep,name=RandomWeight,proto3" json:"RandomWeight,omitempty"`
	//当前的活动ID
	NowActivityID int32 `protobuf:"varint,5,opt,name=nowActivityID,proto3" json:"nowActivityID,omitempty"`
	//上次登录版本
	NowVersion string `protobuf:"bytes,6,opt,name=nowVersion,proto3" json:"nowVersion,omitempty"`
}

func (x *MaterialOutPutActivityData) Reset() {
	*x = MaterialOutPutActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialOutPutActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialOutPutActivityData) ProtoMessage() {}

func (x *MaterialOutPutActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialOutPutActivityData.ProtoReflect.Descriptor instead.
func (*MaterialOutPutActivityData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{10}
}

func (x *MaterialOutPutActivityData) GetActivityLastOpenTime() int64 {
	if x != nil {
		return x.ActivityLastOpenTime
	}
	return 0
}

func (x *MaterialOutPutActivityData) GetLastActivityEndTime() int64 {
	if x != nil {
		return x.LastActivityEndTime
	}
	return 0
}

func (x *MaterialOutPutActivityData) GetIsCD() bool {
	if x != nil {
		return x.IsCD
	}
	return false
}

func (x *MaterialOutPutActivityData) GetRandomWeight() []*MaterialActivityRandomWeight {
	if x != nil {
		return x.RandomWeight
	}
	return nil
}

func (x *MaterialOutPutActivityData) GetNowActivityID() int32 {
	if x != nil {
		return x.NowActivityID
	}
	return 0
}

func (x *MaterialOutPutActivityData) GetNowVersion() string {
	if x != nil {
		return x.NowVersion
	}
	return ""
}

//存钱罐的数据
type PiggyBankData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//活动持续时间
	ActContinueTime int32 `protobuf:"varint,1,opt,name=actContinueTime,proto3" json:"actContinueTime,omitempty"`
	//上次活动的开启时间
	LastActEnableTime int64 `protobuf:"varint,2,opt,name=lastActEnableTime,proto3" json:"lastActEnableTime,omitempty"`
	//活动CD时间
	ActCDTime int32 `protobuf:"varint,3,opt,name=actCDTime,proto3" json:"actCDTime,omitempty"`
	//当前活动目前阶段数量
	ActStageTarget []int32 `protobuf:"varint,4,rep,packed,name=actStageTarget,proto3" json:"actStageTarget,omitempty"`
	//当前活动收集的钻石数量
	CurActCollectNum int32 `protobuf:"varint,5,opt,name=curActCollectNum,proto3" json:"curActCollectNum,omitempty"`
	//额外奖励
	ExtraReward []*MaterialJson `protobuf:"bytes,6,rep,name=extraReward,proto3" json:"extraReward,omitempty"`
	//商品id
	PayShopId int32 `protobuf:"varint,7,opt,name=payShopId,proto3" json:"payShopId,omitempty"`
	//不同难度关卡获得的奖励数量
	DiffGradeLevelGetRewardNum []int32 `protobuf:"varint,8,rep,packed,name=diffGradeLevelGetRewardNum,proto3" json:"diffGradeLevelGetRewardNum,omitempty"`
	//上次活动的结束时间
	LastActEndTime int64 `protobuf:"varint,9,opt,name=lastActEndTime,proto3" json:"lastActEndTime,omitempty"`
	//当前活动的ID
	CurActID int32 `protobuf:"varint,10,opt,name=curActID,proto3" json:"curActID,omitempty"`
	//是否第一次触发可购买
	IsFirstTriggerCanBuy bool `protobuf:"varint,11,opt,name=isFirstTriggerCanBuy,proto3" json:"isFirstTriggerCanBuy,omitempty"`
	//是否该罐子第一次触发收集满
	IsFirstTriggerCurJarFull bool `protobuf:"varint,12,opt,name=isFirstTriggerCurJarFull,proto3" json:"isFirstTriggerCurJarFull,omitempty"`
	//存钱罐开启的轮次
	PiggyBankEnableRound int32 `protobuf:"varint,13,opt,name=piggyBankEnableRound,proto3" json:"piggyBankEnableRound,omitempty"`
}

func (x *PiggyBankData) Reset() {
	*x = PiggyBankData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PiggyBankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiggyBankData) ProtoMessage() {}

func (x *PiggyBankData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiggyBankData.ProtoReflect.Descriptor instead.
func (*PiggyBankData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{11}
}

func (x *PiggyBankData) GetActContinueTime() int32 {
	if x != nil {
		return x.ActContinueTime
	}
	return 0
}

func (x *PiggyBankData) GetLastActEnableTime() int64 {
	if x != nil {
		return x.LastActEnableTime
	}
	return 0
}

func (x *PiggyBankData) GetActCDTime() int32 {
	if x != nil {
		return x.ActCDTime
	}
	return 0
}

func (x *PiggyBankData) GetActStageTarget() []int32 {
	if x != nil {
		return x.ActStageTarget
	}
	return nil
}

func (x *PiggyBankData) GetCurActCollectNum() int32 {
	if x != nil {
		return x.CurActCollectNum
	}
	return 0
}

func (x *PiggyBankData) GetExtraReward() []*MaterialJson {
	if x != nil {
		return x.ExtraReward
	}
	return nil
}

func (x *PiggyBankData) GetPayShopId() int32 {
	if x != nil {
		return x.PayShopId
	}
	return 0
}

func (x *PiggyBankData) GetDiffGradeLevelGetRewardNum() []int32 {
	if x != nil {
		return x.DiffGradeLevelGetRewardNum
	}
	return nil
}

func (x *PiggyBankData) GetLastActEndTime() int64 {
	if x != nil {
		return x.LastActEndTime
	}
	return 0
}

func (x *PiggyBankData) GetCurActID() int32 {
	if x != nil {
		return x.CurActID
	}
	return 0
}

func (x *PiggyBankData) GetIsFirstTriggerCanBuy() bool {
	if x != nil {
		return x.IsFirstTriggerCanBuy
	}
	return false
}

func (x *PiggyBankData) GetIsFirstTriggerCurJarFull() bool {
	if x != nil {
		return x.IsFirstTriggerCurJarFull
	}
	return false
}

func (x *PiggyBankData) GetPiggyBankEnableRound() int32 {
	if x != nil {
		return x.PiggyBankEnableRound
	}
	return 0
}

type NoviceGuideData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//完成过的新手引导条件集合
	AlreadyFinishGuideList []int32 `protobuf:"varint,1,rep,packed,name=alreadyFinishGuideList,proto3" json:"alreadyFinishGuideList,omitempty"`
	NowFixedGuideID        int32   `protobuf:"varint,2,opt,name=nowFixedGuideID,proto3" json:"nowFixedGuideID,omitempty"`
	TriggerLandLack        int32   `protobuf:"varint,3,opt,name=triggerLandLack,proto3" json:"triggerLandLack,omitempty"` //触发地格不足的次数
	TriggerBubbleGridLack  int32   `protobuf:"varint,4,opt,name=triggerBubbleGridLack,proto3" json:"triggerBubbleGridLack,omitempty"`
	//已经显示过Free标签的序号
	AlreadyFreeIndex []int32 `protobuf:"varint,5,rep,packed,name=alreadyFreeIndex,proto3" json:"alreadyFreeIndex,omitempty"`
	//场景中累计获得的代币数量
	AddUpSceneGetTokenNum int32 `protobuf:"varint,6,opt,name=addUpSceneGetTokenNum,proto3" json:"addUpSceneGetTokenNum,omitempty"`
	//场景中收集一级代币的次数
	SceneUseOneGradeTokenNum int32 `protobuf:"varint,7,opt,name=sceneUseOneGradeTokenNum,proto3" json:"sceneUseOneGradeTokenNum,omitempty"`
}

func (x *NoviceGuideData) Reset() {
	*x = NoviceGuideData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoviceGuideData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoviceGuideData) ProtoMessage() {}

func (x *NoviceGuideData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoviceGuideData.ProtoReflect.Descriptor instead.
func (*NoviceGuideData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{12}
}

func (x *NoviceGuideData) GetAlreadyFinishGuideList() []int32 {
	if x != nil {
		return x.AlreadyFinishGuideList
	}
	return nil
}

func (x *NoviceGuideData) GetNowFixedGuideID() int32 {
	if x != nil {
		return x.NowFixedGuideID
	}
	return 0
}

func (x *NoviceGuideData) GetTriggerLandLack() int32 {
	if x != nil {
		return x.TriggerLandLack
	}
	return 0
}

func (x *NoviceGuideData) GetTriggerBubbleGridLack() int32 {
	if x != nil {
		return x.TriggerBubbleGridLack
	}
	return 0
}

func (x *NoviceGuideData) GetAlreadyFreeIndex() []int32 {
	if x != nil {
		return x.AlreadyFreeIndex
	}
	return nil
}

func (x *NoviceGuideData) GetAddUpSceneGetTokenNum() int32 {
	if x != nil {
		return x.AddUpSceneGetTokenNum
	}
	return 0
}

func (x *NoviceGuideData) GetSceneUseOneGradeTokenNum() int32 {
	if x != nil {
		return x.SceneUseOneGradeTokenNum
	}
	return 0
}

type MaterialActivityRandomWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Weight int32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *MaterialActivityRandomWeight) Reset() {
	*x = MaterialActivityRandomWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialActivityRandomWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialActivityRandomWeight) ProtoMessage() {}

func (x *MaterialActivityRandomWeight) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialActivityRandomWeight.ProtoReflect.Descriptor instead.
func (*MaterialActivityRandomWeight) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{13}
}

func (x *MaterialActivityRandomWeight) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MaterialActivityRandomWeight) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

//周期商品信息
type PayShopData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayShops                   []*PayShop `protobuf:"bytes,1,rep,name=payShops,proto3" json:"payShops,omitempty"`
	NowBreakIceId              int32      `protobuf:"varint,2,opt,name=nowBreakIceId,proto3" json:"nowBreakIceId,omitempty"`                           //当前破冰礼包的ID
	BreakIceEnableTime         int64      `protobuf:"varint,3,opt,name=BreakIceEnableTime,proto3" json:"BreakIceEnableTime,omitempty"`                 //破冰礼包开启时间
	TriggerCoinInsufficientNum int32      `protobuf:"varint,4,opt,name=triggerCoinInsufficientNum,proto3" json:"triggerCoinInsufficientNum,omitempty"` //触发金币不足次数
	TriggerLeveleDefeatedNum   int32      `protobuf:"varint,5,opt,name=triggerLeveleDefeatedNum,proto3" json:"triggerLeveleDefeatedNum,omitempty"`     //触发关卡失败次数
	IsPopupBreakIceWindow      bool       `protobuf:"varint,6,opt,name=isPopupBreakIceWindow,proto3" json:"isPopupBreakIceWindow,omitempty"`           //是否弹出破冰的界面
}

func (x *PayShopData) Reset() {
	*x = PayShopData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayShopData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayShopData) ProtoMessage() {}

func (x *PayShopData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayShopData.ProtoReflect.Descriptor instead.
func (*PayShopData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{14}
}

func (x *PayShopData) GetPayShops() []*PayShop {
	if x != nil {
		return x.PayShops
	}
	return nil
}

func (x *PayShopData) GetNowBreakIceId() int32 {
	if x != nil {
		return x.NowBreakIceId
	}
	return 0
}

func (x *PayShopData) GetBreakIceEnableTime() int64 {
	if x != nil {
		return x.BreakIceEnableTime
	}
	return 0
}

func (x *PayShopData) GetTriggerCoinInsufficientNum() int32 {
	if x != nil {
		return x.TriggerCoinInsufficientNum
	}
	return 0
}

func (x *PayShopData) GetTriggerLeveleDefeatedNum() int32 {
	if x != nil {
		return x.TriggerLeveleDefeatedNum
	}
	return 0
}

func (x *PayShopData) GetIsPopupBreakIceWindow() bool {
	if x != nil {
		return x.IsPopupBreakIceWindow
	}
	return false
}

//周期商品
type PayShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//商品id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//开始时间
	BeginTime int64 `protobuf:"varint,2,opt,name=beginTime,proto3" json:"beginTime,omitempty"`
	//结束时间
	EndTime int64 `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	//购买次数
	BuyCount int32 `protobuf:"varint,4,opt,name=buyCount,proto3" json:"buyCount,omitempty"`
}

func (x *PayShop) Reset() {
	*x = PayShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayShop) ProtoMessage() {}

func (x *PayShop) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayShop.ProtoReflect.Descriptor instead.
func (*PayShop) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{15}
}

func (x *PayShop) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PayShop) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *PayShop) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PayShop) GetBuyCount() int32 {
	if x != nil {
		return x.BuyCount
	}
	return 0
}

//商品新品状态记录
type ProduceStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ProduceStateData) Reset() {
	*x = ProduceStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceStateData) ProtoMessage() {}

func (x *ProduceStateData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceStateData.ProtoReflect.Descriptor instead.
func (*ProduceStateData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{16}
}

func (x *ProduceStateData) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ExchangeActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//任务id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//货币数量
	Money int32 `protobuf:"varint,2,opt,name=money,proto3" json:"money,omitempty"`
	//开始时间
	StartTime int32 `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	//结束时间
	EndTime int32 `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	//阶段奖励领取
	GetrewardList []int32 `protobuf:"varint,5,rep,packed,name=getrewardList,proto3" json:"getrewardList,omitempty"`
	//购买次数
	BuyNumList []*MaterialJson `protobuf:"bytes,6,rep,name=buyNumList,proto3" json:"buyNumList,omitempty"`
	//状态
	State int32 `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`
	//进度
	Process int32 `protobuf:"varint,8,opt,name=process,proto3" json:"process,omitempty"`
}

func (x *ExchangeActivity) Reset() {
	*x = ExchangeActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeActivity) ProtoMessage() {}

func (x *ExchangeActivity) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeActivity.ProtoReflect.Descriptor instead.
func (*ExchangeActivity) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{17}
}

func (x *ExchangeActivity) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExchangeActivity) GetMoney() int32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *ExchangeActivity) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ExchangeActivity) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ExchangeActivity) GetGetrewardList() []int32 {
	if x != nil {
		return x.GetrewardList
	}
	return nil
}

func (x *ExchangeActivity) GetBuyNumList() []*MaterialJson {
	if x != nil {
		return x.BuyNumList
	}
	return nil
}

func (x *ExchangeActivity) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ExchangeActivity) GetProcess() int32 {
	if x != nil {
		return x.Process
	}
	return 0
}

//用户头像信息
type UserHeadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllUnLockHeadData []*HeadData `protobuf:"bytes,1,rep,name=allUnLockHeadData,proto3" json:"allUnLockHeadData,omitempty"`
}

func (x *UserHeadData) Reset() {
	*x = UserHeadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserHeadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserHeadData) ProtoMessage() {}

func (x *UserHeadData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserHeadData.ProtoReflect.Descriptor instead.
func (*UserHeadData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{18}
}

func (x *UserHeadData) GetAllUnLockHeadData() []*HeadData {
	if x != nil {
		return x.AllUnLockHeadData
	}
	return nil
}

type HeadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                     //头像类型 ：包括普通头像 + 头像框
	Id             string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                          //头像id : 也是路径
	IsShowRedPoint bool   `protobuf:"varint,3,opt,name=isShowRedPoint,proto3" json:"isShowRedPoint,omitempty"` //是否显示红点
}

func (x *HeadData) Reset() {
	*x = HeadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadData) ProtoMessage() {}

func (x *HeadData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadData.ProtoReflect.Descriptor instead.
func (*HeadData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{19}
}

func (x *HeadData) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *HeadData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HeadData) GetIsShowRedPoint() bool {
	if x != nil {
		return x.IsShowRedPoint
	}
	return false
}

type ExchangeActivityTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyLevel  int32   `protobuf:"varint,1,opt,name=currency_level,json=currencyLevel,proto3" json:"currency_level,omitempty"`
	CurrencyNum    []int32 `protobuf:"varint,2,rep,packed,name=currency_num,json=currencyNum,proto3" json:"currency_num,omitempty"`
	RefundRate     []int32 `protobuf:"varint,3,rep,packed,name=refund_rate,json=refundRate,proto3" json:"refund_rate,omitempty"`
	RefundNum      []int32 `protobuf:"varint,4,rep,packed,name=refund_num,json=refundNum,proto3" json:"refund_num,omitempty"`
	RewardProgress []int32 `protobuf:"varint,5,rep,packed,name=reward_progress,json=rewardProgress,proto3" json:"reward_progress,omitempty"`
	Reward         []int32 `protobuf:"varint,6,rep,packed,name=reward,proto3" json:"reward,omitempty"`
	ShopContent    []int32 `protobuf:"varint,7,rep,packed,name=shop_content,json=shopContent,proto3" json:"shop_content,omitempty"`
	ShopPrice      []int32 `protobuf:"varint,8,rep,packed,name=shop_price,json=shopPrice,proto3" json:"shop_price,omitempty"`
	ShopAddprice   []int32 `protobuf:"varint,9,rep,packed,name=shop_addprice,json=shopAddprice,proto3" json:"shop_addprice,omitempty"`
	ShopPricemax   []int32 `protobuf:"varint,10,rep,packed,name=shop_pricemax,json=shopPricemax,proto3" json:"shop_pricemax,omitempty"`
	Lasttime       int32   `protobuf:"varint,11,opt,name=lasttime,proto3" json:"lasttime,omitempty"`
	ReopentimeMin  int32   `protobuf:"varint,12,opt,name=reopentime_min,json=reopentimeMin,proto3" json:"reopentime_min,omitempty"`
	Id             int32   `protobuf:"varint,13,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ExchangeActivityTable) Reset() {
	*x = ExchangeActivityTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeActivityTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeActivityTable) ProtoMessage() {}

func (x *ExchangeActivityTable) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeActivityTable.ProtoReflect.Descriptor instead.
func (*ExchangeActivityTable) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{20}
}

func (x *ExchangeActivityTable) GetCurrencyLevel() int32 {
	if x != nil {
		return x.CurrencyLevel
	}
	return 0
}

func (x *ExchangeActivityTable) GetCurrencyNum() []int32 {
	if x != nil {
		return x.CurrencyNum
	}
	return nil
}

func (x *ExchangeActivityTable) GetRefundRate() []int32 {
	if x != nil {
		return x.RefundRate
	}
	return nil
}

func (x *ExchangeActivityTable) GetRefundNum() []int32 {
	if x != nil {
		return x.RefundNum
	}
	return nil
}

func (x *ExchangeActivityTable) GetRewardProgress() []int32 {
	if x != nil {
		return x.RewardProgress
	}
	return nil
}

func (x *ExchangeActivityTable) GetReward() []int32 {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *ExchangeActivityTable) GetShopContent() []int32 {
	if x != nil {
		return x.ShopContent
	}
	return nil
}

func (x *ExchangeActivityTable) GetShopPrice() []int32 {
	if x != nil {
		return x.ShopPrice
	}
	return nil
}

func (x *ExchangeActivityTable) GetShopAddprice() []int32 {
	if x != nil {
		return x.ShopAddprice
	}
	return nil
}

func (x *ExchangeActivityTable) GetShopPricemax() []int32 {
	if x != nil {
		return x.ShopPricemax
	}
	return nil
}

func (x *ExchangeActivityTable) GetLasttime() int32 {
	if x != nil {
		return x.Lasttime
	}
	return 0
}

func (x *ExchangeActivityTable) GetReopentimeMin() int32 {
	if x != nil {
		return x.ReopentimeMin
	}
	return 0
}

func (x *ExchangeActivityTable) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

//素材兑换活动
type ExchangeActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrActivity *ExchangeActivity      `protobuf:"bytes,1,opt,name=currActivity,proto3" json:"currActivity,omitempty"`
	EndActivitys []*ExchangeActivity    `protobuf:"bytes,2,rep,name=endActivitys,proto3" json:"endActivitys,omitempty"`
	CurrTable    *ExchangeActivityTable `protobuf:"bytes,3,opt,name=currTable,proto3" json:"currTable,omitempty"`
	CurToKenNum  int32                  `protobuf:"varint,4,opt,name=curToKenNum,proto3" json:"curToKenNum,omitempty"`
}

func (x *ExchangeActivityData) Reset() {
	*x = ExchangeActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeActivityData) ProtoMessage() {}

func (x *ExchangeActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeActivityData.ProtoReflect.Descriptor instead.
func (*ExchangeActivityData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{21}
}

func (x *ExchangeActivityData) GetCurrActivity() *ExchangeActivity {
	if x != nil {
		return x.CurrActivity
	}
	return nil
}

func (x *ExchangeActivityData) GetEndActivitys() []*ExchangeActivity {
	if x != nil {
		return x.EndActivitys
	}
	return nil
}

func (x *ExchangeActivityData) GetCurrTable() *ExchangeActivityTable {
	if x != nil {
		return x.CurrTable
	}
	return nil
}

func (x *ExchangeActivityData) GetCurToKenNum() int32 {
	if x != nil {
		return x.CurToKenNum
	}
	return 0
}

//某个版本的评价数据
type Reat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//版本号
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	//评价(1,好评 2差评,3关闭)
	Reat int32 `protobuf:"varint,2,opt,name=reat,proto3" json:"reat,omitempty"`
}

func (x *Reat) Reset() {
	*x = Reat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reat) ProtoMessage() {}

func (x *Reat) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reat.ProtoReflect.Descriptor instead.
func (*Reat) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{22}
}

func (x *Reat) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Reat) GetReat() int32 {
	if x != nil {
		return x.Reat
	}
	return 0
}

//所有的评价数据
type ReatData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReatData             []*Reat `protobuf:"bytes,1,rep,name=reatData,proto3" json:"reatData,omitempty"`
	ContinuelevelSuccess int32   `protobuf:"varint,2,opt,name=continuelevelSuccess,proto3" json:"continuelevelSuccess,omitempty"`
	Version              int32   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	CurVersionIsHit      bool    `protobuf:"varint,4,opt,name=curVersionIsHit,proto3" json:"curVersionIsHit,omitempty"`
	LastReatTime         int64   `protobuf:"varint,5,opt,name=lastReatTime,proto3" json:"lastReatTime,omitempty"`
	IsHit                bool    `protobuf:"varint,6,opt,name=isHit,proto3" json:"isHit,omitempty"`
}

func (x *ReatData) Reset() {
	*x = ReatData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReatData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReatData) ProtoMessage() {}

func (x *ReatData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReatData.ProtoReflect.Descriptor instead.
func (*ReatData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{23}
}

func (x *ReatData) GetReatData() []*Reat {
	if x != nil {
		return x.ReatData
	}
	return nil
}

func (x *ReatData) GetContinuelevelSuccess() int32 {
	if x != nil {
		return x.ContinuelevelSuccess
	}
	return 0
}

func (x *ReatData) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ReatData) GetCurVersionIsHit() bool {
	if x != nil {
		return x.CurVersionIsHit
	}
	return false
}

func (x *ReatData) GetLastReatTime() int64 {
	if x != nil {
		return x.LastReatTime
	}
	return 0
}

func (x *ReatData) GetIsHit() bool {
	if x != nil {
		return x.IsHit
	}
	return false
}

//回归奖励
type ReturnRewardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DistanceLastLoginSecound int64 `protobuf:"varint,1,opt,name=distanceLastLoginSecound,proto3" json:"distanceLastLoginSecound,omitempty"`
	LastGetReturnRewardTime  int64 `protobuf:"varint,2,opt,name=lastGetReturnRewardTime,proto3" json:"lastGetReturnRewardTime,omitempty"`
}

func (x *ReturnRewardData) Reset() {
	*x = ReturnRewardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnRewardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnRewardData) ProtoMessage() {}

func (x *ReturnRewardData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnRewardData.ProtoReflect.Descriptor instead.
func (*ReturnRewardData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{24}
}

func (x *ReturnRewardData) GetDistanceLastLoginSecound() int64 {
	if x != nil {
		return x.DistanceLastLoginSecound
	}
	return 0
}

func (x *ReturnRewardData) GetLastGetReturnRewardTime() int64 {
	if x != nil {
		return x.LastGetReturnRewardTime
	}
	return 0
}

type LocalChatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	From     int64  `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	Time     int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Type     string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Name     string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	HeadIcon string `protobuf:"bytes,6,opt,name=headIcon,proto3" json:"headIcon,omitempty"`
	Content  string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	Tag      int32  `protobuf:"varint,8,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *LocalChatInfo) Reset() {
	*x = LocalChatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalChatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalChatInfo) ProtoMessage() {}

func (x *LocalChatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalChatInfo.ProtoReflect.Descriptor instead.
func (*LocalChatInfo) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{25}
}

func (x *LocalChatInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LocalChatInfo) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *LocalChatInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *LocalChatInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LocalChatInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocalChatInfo) GetHeadIcon() string {
	if x != nil {
		return x.HeadIcon
	}
	return ""
}

func (x *LocalChatInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *LocalChatInfo) GetTag() int32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

//调查问卷
type QuestionnaireData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//上次调查的ID
	LastQuestionnaireID int32 `protobuf:"varint,1,opt,name=lastQuestionnaireID,proto3" json:"lastQuestionnaireID,omitempty"`
	//当前这期调查弹出的次数
	CurPopUpWindowNum int32 `protobuf:"varint,2,opt,name=curPopUpWindowNum,proto3" json:"curPopUpWindowNum,omitempty"`
	//当前调查问卷的ID
	CurQuestionnaireID int32 `protobuf:"varint,3,opt,name=curQuestionnaireID,proto3" json:"curQuestionnaireID,omitempty"`
}

func (x *QuestionnaireData) Reset() {
	*x = QuestionnaireData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireData) ProtoMessage() {}

func (x *QuestionnaireData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireData.ProtoReflect.Descriptor instead.
func (*QuestionnaireData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{26}
}

func (x *QuestionnaireData) GetLastQuestionnaireID() int32 {
	if x != nil {
		return x.LastQuestionnaireID
	}
	return 0
}

func (x *QuestionnaireData) GetCurPopUpWindowNum() int32 {
	if x != nil {
		return x.CurPopUpWindowNum
	}
	return 0
}

func (x *QuestionnaireData) GetCurQuestionnaireID() int32 {
	if x != nil {
		return x.CurQuestionnaireID
	}
	return 0
}

//工会记录数据
type ClubData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreunlockShow    int32            `protobuf:"varint,1,opt,name=preunlockShow,proto3" json:"preunlockShow,omitempty"`
	UnlockTipShow    int32            `protobuf:"varint,2,opt,name=unlockTipShow,proto3" json:"unlockTipShow,omitempty"`
	GuildId          int64            `protobuf:"varint,3,opt,name=guildId,proto3" json:"guildId,omitempty"`
	HelpUtc          int64            `protobuf:"varint,4,opt,name=helpUtc,proto3" json:"helpUtc,omitempty"`
	NewPlayer        int32            `protobuf:"varint,5,opt,name=newPlayer,proto3" json:"newPlayer,omitempty"`
	LastMsgId        int64            `protobuf:"varint,6,opt,name=lastMsgId,proto3" json:"lastMsgId,omitempty"`
	Badge            string           `protobuf:"bytes,7,opt,name=badge,proto3" json:"badge,omitempty"`
	Name             string           `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	ReqHeartTimes    int32            `protobuf:"varint,9,opt,name=reqHeartTimes,proto3" json:"reqHeartTimes,omitempty"`
	UseHeartUserIds  []int64          `protobuf:"varint,10,rep,packed,name=useHeartUserIds,proto3" json:"useHeartUserIds,omitempty"`
	Hearts           []*GuildRespHelp `protobuf:"bytes,11,rep,name=hearts,proto3" json:"hearts,omitempty"`
	GlobalGuildRank  []*GuildBaseInfo `protobuf:"bytes,12,rep,name=globalGuildRank,proto3" json:"globalGuildRank,omitempty"`
	CountryGuildRank []*GuildBaseInfo `protobuf:"bytes,13,rep,name=countryGuildRank,proto3" json:"countryGuildRank,omitempty"`
	GlobalUserRank   []*UserBaseInfo  `protobuf:"bytes,14,rep,name=globalUserRank,proto3" json:"globalUserRank,omitempty"`
	CountryUserRank  []*UserBaseInfo  `protobuf:"bytes,15,rep,name=countryUserRank,proto3" json:"countryUserRank,omitempty"`
	RecommendGuilds  []*GuildBaseInfo `protobuf:"bytes,16,rep,name=recommendGuilds,proto3" json:"recommendGuilds,omitempty"`
	MyGuildInfo      *GuildInfo       `protobuf:"bytes,17,opt,name=myGuildInfo,proto3" json:"myGuildInfo,omitempty"`
	ChatToken        string           `protobuf:"bytes,18,opt,name=chatToken,proto3" json:"chatToken,omitempty"`
	ChatInfos        []*LocalChatInfo `protobuf:"bytes,19,rep,name=chatInfos,proto3" json:"chatInfos,omitempty"`
	TokenSetTime     int32            `protobuf:"varint,20,opt,name=tokenSetTime,proto3" json:"tokenSetTime,omitempty"`
	UserHelpsIds     []int64          `protobuf:"varint,21,rep,packed,name=userHelpsIds,proto3" json:"userHelpsIds,omitempty"`
}

func (x *ClubData) Reset() {
	*x = ClubData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubData) ProtoMessage() {}

func (x *ClubData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubData.ProtoReflect.Descriptor instead.
func (*ClubData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{27}
}

func (x *ClubData) GetPreunlockShow() int32 {
	if x != nil {
		return x.PreunlockShow
	}
	return 0
}

func (x *ClubData) GetUnlockTipShow() int32 {
	if x != nil {
		return x.UnlockTipShow
	}
	return 0
}

func (x *ClubData) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ClubData) GetHelpUtc() int64 {
	if x != nil {
		return x.HelpUtc
	}
	return 0
}

func (x *ClubData) GetNewPlayer() int32 {
	if x != nil {
		return x.NewPlayer
	}
	return 0
}

func (x *ClubData) GetLastMsgId() int64 {
	if x != nil {
		return x.LastMsgId
	}
	return 0
}

func (x *ClubData) GetBadge() string {
	if x != nil {
		return x.Badge
	}
	return ""
}

func (x *ClubData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClubData) GetReqHeartTimes() int32 {
	if x != nil {
		return x.ReqHeartTimes
	}
	return 0
}

func (x *ClubData) GetUseHeartUserIds() []int64 {
	if x != nil {
		return x.UseHeartUserIds
	}
	return nil
}

func (x *ClubData) GetHearts() []*GuildRespHelp {
	if x != nil {
		return x.Hearts
	}
	return nil
}

func (x *ClubData) GetGlobalGuildRank() []*GuildBaseInfo {
	if x != nil {
		return x.GlobalGuildRank
	}
	return nil
}

func (x *ClubData) GetCountryGuildRank() []*GuildBaseInfo {
	if x != nil {
		return x.CountryGuildRank
	}
	return nil
}

func (x *ClubData) GetGlobalUserRank() []*UserBaseInfo {
	if x != nil {
		return x.GlobalUserRank
	}
	return nil
}

func (x *ClubData) GetCountryUserRank() []*UserBaseInfo {
	if x != nil {
		return x.CountryUserRank
	}
	return nil
}

func (x *ClubData) GetRecommendGuilds() []*GuildBaseInfo {
	if x != nil {
		return x.RecommendGuilds
	}
	return nil
}

func (x *ClubData) GetMyGuildInfo() *GuildInfo {
	if x != nil {
		return x.MyGuildInfo
	}
	return nil
}

func (x *ClubData) GetChatToken() string {
	if x != nil {
		return x.ChatToken
	}
	return ""
}

func (x *ClubData) GetChatInfos() []*LocalChatInfo {
	if x != nil {
		return x.ChatInfos
	}
	return nil
}

func (x *ClubData) GetTokenSetTime() int32 {
	if x != nil {
		return x.TokenSetTime
	}
	return 0
}

func (x *ClubData) GetUserHelpsIds() []int64 {
	if x != nil {
		return x.UserHelpsIds
	}
	return nil
}

type NewMaxLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                           // 活动ID
	GroupId         int64               `protobuf:"varint,2,opt,name=groupId,proto3" json:"groupId,omitempty"`                 // 玩家所属组ID
	UniqueId        int64               `protobuf:"varint,3,opt,name=uniqueId,proto3" json:"uniqueId,omitempty"`               // 活动唯一ID 活动开启时生成
	CreateGroupTime int64               `protobuf:"varint,4,opt,name=createGroupTime,proto3" json:"createGroupTime,omitempty"` // 创建组时间
	Rank            int32               `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`                       // 排行榜名次
	Level           int32               `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`                     //当前关卡数
	EndTime         int64               `protobuf:"varint,7,opt,name=endTime,proto3" json:"endTime,omitempty"`                 //结束时间
	Score           int32               `protobuf:"varint,8,opt,name=score,proto3" json:"score,omitempty"`                     //积分
	GetReward       int32               `protobuf:"varint,9,opt,name=getReward,proto3" json:"getReward,omitempty"`             //是否领取了奖励
	ShowPreUI       int32               `protobuf:"varint,10,opt,name=showPreUI,proto3" json:"showPreUI,omitempty"`            //是否显示过预告UI
	RankUsers       []*RankUserBaseInfo `protobuf:"bytes,11,rep,name=rankUsers,proto3" json:"rankUsers,omitempty"`             //排行榜数据
	Refreshtime     int32               `protobuf:"varint,12,opt,name=refreshtime,proto3" json:"refreshtime,omitempty"`        //排行榜刷新时间间隔
	EndRankUsers    []*RankUserBaseInfo `protobuf:"bytes,13,rep,name=endRankUsers,proto3" json:"endRankUsers,omitempty"`       //最终排行榜数据
	Cheat           int32               `protobuf:"varint,14,opt,name=cheat,proto3" json:"cheat,omitempty"`                    //这期活动是否作弊玩家
}

func (x *NewMaxLevelData) Reset() {
	*x = NewMaxLevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMaxLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMaxLevelData) ProtoMessage() {}

func (x *NewMaxLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMaxLevelData.ProtoReflect.Descriptor instead.
func (*NewMaxLevelData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{28}
}

func (x *NewMaxLevelData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewMaxLevelData) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *NewMaxLevelData) GetUniqueId() int64 {
	if x != nil {
		return x.UniqueId
	}
	return 0
}

func (x *NewMaxLevelData) GetCreateGroupTime() int64 {
	if x != nil {
		return x.CreateGroupTime
	}
	return 0
}

func (x *NewMaxLevelData) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *NewMaxLevelData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *NewMaxLevelData) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *NewMaxLevelData) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *NewMaxLevelData) GetGetReward() int32 {
	if x != nil {
		return x.GetReward
	}
	return 0
}

func (x *NewMaxLevelData) GetShowPreUI() int32 {
	if x != nil {
		return x.ShowPreUI
	}
	return 0
}

func (x *NewMaxLevelData) GetRankUsers() []*RankUserBaseInfo {
	if x != nil {
		return x.RankUsers
	}
	return nil
}

func (x *NewMaxLevelData) GetRefreshtime() int32 {
	if x != nil {
		return x.Refreshtime
	}
	return 0
}

func (x *NewMaxLevelData) GetEndRankUsers() []*RankUserBaseInfo {
	if x != nil {
		return x.EndRankUsers
	}
	return nil
}

func (x *NewMaxLevelData) GetCheat() int32 {
	if x != nil {
		return x.Cheat
	}
	return 0
}

type ClassicActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level          int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`                   //当前关卡数
	ShowPreUI      int32 `protobuf:"varint,2,opt,name=showPreUI,proto3" json:"showPreUI,omitempty"`           //是否显示过预告UI
	IsUnlock       bool  `protobuf:"varint,3,opt,name=isUnlock,proto3" json:"isUnlock,omitempty"`             //是否开启
	TotalLevels    int32 `protobuf:"varint,4,opt,name=totalLevels,proto3" json:"totalLevels,omitempty"`       //累计关卡数
	CurrMaxlevelId int32 `protobuf:"varint,5,opt,name=currMaxlevelId,proto3" json:"currMaxlevelId,omitempty"` //对应的满级玩法的活动Id
}

func (x *ClassicActivityData) Reset() {
	*x = ClassicActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassicActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassicActivityData) ProtoMessage() {}

func (x *ClassicActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassicActivityData.ProtoReflect.Descriptor instead.
func (*ClassicActivityData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{29}
}

func (x *ClassicActivityData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ClassicActivityData) GetShowPreUI() int32 {
	if x != nil {
		return x.ShowPreUI
	}
	return 0
}

func (x *ClassicActivityData) GetIsUnlock() bool {
	if x != nil {
		return x.IsUnlock
	}
	return false
}

func (x *ClassicActivityData) GetTotalLevels() int32 {
	if x != nil {
		return x.TotalLevels
	}
	return 0
}

func (x *ClassicActivityData) GetCurrMaxlevelId() int32 {
	if x != nil {
		return x.CurrMaxlevelId
	}
	return 0
}

type GiftBoxRewardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxRewardList []*MaterialJson `protobuf:"bytes,1,rep,name=boxRewardList,proto3" json:"boxRewardList,omitempty"`
	Type          int32           `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	ImgPath       string          `protobuf:"bytes,3,opt,name=imgPath,proto3" json:"imgPath,omitempty"`
}

func (x *GiftBoxRewardData) Reset() {
	*x = GiftBoxRewardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftBoxRewardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftBoxRewardData) ProtoMessage() {}

func (x *GiftBoxRewardData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftBoxRewardData.ProtoReflect.Descriptor instead.
func (*GiftBoxRewardData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{30}
}

func (x *GiftBoxRewardData) GetBoxRewardList() []*MaterialJson {
	if x != nil {
		return x.BoxRewardList
	}
	return nil
}

func (x *GiftBoxRewardData) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GiftBoxRewardData) GetImgPath() string {
	if x != nil {
		return x.ImgPath
	}
	return ""
}

//公有的礼包宝箱数据
type BaseGiftBoxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllRewardList []*GiftBoxRewardData `protobuf:"bytes,1,rep,name=allRewardList,proto3" json:"allRewardList,omitempty"`
	ShopId        int32                `protobuf:"varint,2,opt,name=shopId,proto3" json:"shopId,omitempty"`
	OnlyId        int32                `protobuf:"varint,3,opt,name=onlyId,proto3" json:"onlyId,omitempty"`
	ConfigId      int32                `protobuf:"varint,4,opt,name=configId,proto3" json:"configId,omitempty"`
}

func (x *BaseGiftBoxData) Reset() {
	*x = BaseGiftBoxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseGiftBoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseGiftBoxData) ProtoMessage() {}

func (x *BaseGiftBoxData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseGiftBoxData.ProtoReflect.Descriptor instead.
func (*BaseGiftBoxData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{31}
}

func (x *BaseGiftBoxData) GetAllRewardList() []*GiftBoxRewardData {
	if x != nil {
		return x.AllRewardList
	}
	return nil
}

func (x *BaseGiftBoxData) GetShopId() int32 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *BaseGiftBoxData) GetOnlyId() int32 {
	if x != nil {
		return x.OnlyId
	}
	return 0
}

func (x *BaseGiftBoxData) GetConfigId() int32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

//限时礼包数据
type TimeLimitGiftBoxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftBoxData    *BaseGiftBoxData `protobuf:"bytes,1,opt,name=giftBoxData,proto3" json:"giftBoxData,omitempty"`
	GiftEndTime    int64            `protobuf:"varint,2,opt,name=giftEndTime,proto3" json:"giftEndTime,omitempty"`       //礼包到期时间
	GiftEnableTime int64            `protobuf:"varint,3,opt,name=giftEnableTime,proto3" json:"giftEnableTime,omitempty"` //礼包开始时间
	IsBuy          bool             `protobuf:"varint,4,opt,name=isBuy,proto3" json:"isBuy,omitempty"`                   //是否购买礼包
}

func (x *TimeLimitGiftBoxData) Reset() {
	*x = TimeLimitGiftBoxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeLimitGiftBoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeLimitGiftBoxData) ProtoMessage() {}

func (x *TimeLimitGiftBoxData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeLimitGiftBoxData.ProtoReflect.Descriptor instead.
func (*TimeLimitGiftBoxData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{32}
}

func (x *TimeLimitGiftBoxData) GetGiftBoxData() *BaseGiftBoxData {
	if x != nil {
		return x.GiftBoxData
	}
	return nil
}

func (x *TimeLimitGiftBoxData) GetGiftEndTime() int64 {
	if x != nil {
		return x.GiftEndTime
	}
	return 0
}

func (x *TimeLimitGiftBoxData) GetGiftEnableTime() int64 {
	if x != nil {
		return x.GiftEnableTime
	}
	return 0
}

func (x *TimeLimitGiftBoxData) GetIsBuy() bool {
	if x != nil {
		return x.IsBuy
	}
	return false
}

//故事礼包数据
type StoryGiftBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeLimitData *TimeLimitGiftBoxData `protobuf:"bytes,1,opt,name=timeLimitData,proto3" json:"timeLimitData,omitempty"`
	NowIndex      int32                 `protobuf:"varint,2,opt,name=nowIndex,proto3" json:"nowIndex,omitempty"` //当前档位
}

func (x *StoryGiftBox) Reset() {
	*x = StoryGiftBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoryGiftBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoryGiftBox) ProtoMessage() {}

func (x *StoryGiftBox) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoryGiftBox.ProtoReflect.Descriptor instead.
func (*StoryGiftBox) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{33}
}

func (x *StoryGiftBox) GetTimeLimitData() *TimeLimitGiftBoxData {
	if x != nil {
		return x.TimeLimitData
	}
	return nil
}

func (x *StoryGiftBox) GetNowIndex() int32 {
	if x != nil {
		return x.NowIndex
	}
	return 0
}

//失败礼包数据
type FailingGiftBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftBoxData *StoryGiftBox `protobuf:"bytes,1,opt,name=giftBoxData,proto3" json:"giftBoxData,omitempty"`
	LevelCD     int32         `protobuf:"varint,2,opt,name=levelCD,proto3" json:"levelCD,omitempty"` //关卡cd
}

func (x *FailingGiftBox) Reset() {
	*x = FailingGiftBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailingGiftBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailingGiftBox) ProtoMessage() {}

func (x *FailingGiftBox) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailingGiftBox.ProtoReflect.Descriptor instead.
func (*FailingGiftBox) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{34}
}

func (x *FailingGiftBox) GetGiftBoxData() *StoryGiftBox {
	if x != nil {
		return x.GiftBoxData
	}
	return nil
}

func (x *FailingGiftBox) GetLevelCD() int32 {
	if x != nil {
		return x.LevelCD
	}
	return 0
}

//故事礼包
type StoryGiftBoxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastEndGiftBoxAct     []*StoryGiftBox `protobuf:"bytes,1,rep,name=lastEndGiftBoxAct,proto3" json:"lastEndGiftBoxAct,omitempty"`
	StoryGiftBoxData      *StoryGiftBox   `protobuf:"bytes,2,opt,name=storyGiftBoxData,proto3" json:"storyGiftBoxData,omitempty"`
	StoryGiftBoxEnableNum int32           `protobuf:"varint,3,opt,name=storyGiftBoxEnableNum,proto3" json:"storyGiftBoxEnableNum,omitempty"`
}

func (x *StoryGiftBoxData) Reset() {
	*x = StoryGiftBoxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoryGiftBoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoryGiftBoxData) ProtoMessage() {}

func (x *StoryGiftBoxData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoryGiftBoxData.ProtoReflect.Descriptor instead.
func (*StoryGiftBoxData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{35}
}

func (x *StoryGiftBoxData) GetLastEndGiftBoxAct() []*StoryGiftBox {
	if x != nil {
		return x.LastEndGiftBoxAct
	}
	return nil
}

func (x *StoryGiftBoxData) GetStoryGiftBoxData() *StoryGiftBox {
	if x != nil {
		return x.StoryGiftBoxData
	}
	return nil
}

func (x *StoryGiftBoxData) GetStoryGiftBoxEnableNum() int32 {
	if x != nil {
		return x.StoryGiftBoxEnableNum
	}
	return 0
}

//失败礼包
type FailingGiftBoxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailingGiftBox     *FailingGiftBox   `protobuf:"bytes,1,opt,name=failingGiftBox,proto3" json:"failingGiftBox,omitempty"`
	LastEndGiftBoxAct  []*FailingGiftBox `protobuf:"bytes,2,rep,name=lastEndGiftBoxAct,proto3" json:"lastEndGiftBoxAct,omitempty"`
	NowStageFailingNum int32             `protobuf:"varint,3,opt,name=nowStageFailingNum,proto3" json:"nowStageFailingNum,omitempty"`
}

func (x *FailingGiftBoxData) Reset() {
	*x = FailingGiftBoxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailingGiftBoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailingGiftBoxData) ProtoMessage() {}

func (x *FailingGiftBoxData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailingGiftBoxData.ProtoReflect.Descriptor instead.
func (*FailingGiftBoxData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{36}
}

func (x *FailingGiftBoxData) GetFailingGiftBox() *FailingGiftBox {
	if x != nil {
		return x.FailingGiftBox
	}
	return nil
}

func (x *FailingGiftBoxData) GetLastEndGiftBoxAct() []*FailingGiftBox {
	if x != nil {
		return x.LastEndGiftBoxAct
	}
	return nil
}

func (x *FailingGiftBoxData) GetNowStageFailingNum() int32 {
	if x != nil {
		return x.NowStageFailingNum
	}
	return 0
}

//连续宝箱活动数据
type ContinueBoxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NowActAllBoxData        []*ContinueBoxConfigData `protobuf:"bytes,1,rep,name=nowActAllBoxData,proto3" json:"nowActAllBoxData,omitempty"`
	LastActEnableTime       int64                    `protobuf:"varint,2,opt,name=lastActEnableTime,proto3" json:"lastActEnableTime,omitempty"`
	NowActEndTime           int64                    `protobuf:"varint,3,opt,name=nowActEndTime,proto3" json:"nowActEndTime,omitempty"`
	NowContinueActType      int32                    `protobuf:"varint,4,opt,name=nowContinueActType,proto3" json:"nowContinueActType,omitempty"`
	NowStageActIndex        int32                    `protobuf:"varint,5,opt,name=nowStageActIndex,proto3" json:"nowStageActIndex,omitempty"`
	NowActID                int32                    `protobuf:"varint,6,opt,name=nowActID,proto3" json:"nowActID,omitempty"`
	LastForcePopupTime      int64                    `protobuf:"varint,7,opt,name=lastForcePopupTime,proto3" json:"lastForcePopupTime,omitempty"`
	NowStageActBuyPayBoxNum int32                    `protobuf:"varint,8,opt,name=nowStageActBuyPayBoxNum,proto3" json:"nowStageActBuyPayBoxNum,omitempty"`
	NowStageBuyNum          int32                    `protobuf:"varint,9,opt,name=nowStageBuyNum,proto3" json:"nowStageBuyNum,omitempty"`
}

func (x *ContinueBoxData) Reset() {
	*x = ContinueBoxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinueBoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueBoxData) ProtoMessage() {}

func (x *ContinueBoxData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueBoxData.ProtoReflect.Descriptor instead.
func (*ContinueBoxData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{37}
}

func (x *ContinueBoxData) GetNowActAllBoxData() []*ContinueBoxConfigData {
	if x != nil {
		return x.NowActAllBoxData
	}
	return nil
}

func (x *ContinueBoxData) GetLastActEnableTime() int64 {
	if x != nil {
		return x.LastActEnableTime
	}
	return 0
}

func (x *ContinueBoxData) GetNowActEndTime() int64 {
	if x != nil {
		return x.NowActEndTime
	}
	return 0
}

func (x *ContinueBoxData) GetNowContinueActType() int32 {
	if x != nil {
		return x.NowContinueActType
	}
	return 0
}

func (x *ContinueBoxData) GetNowStageActIndex() int32 {
	if x != nil {
		return x.NowStageActIndex
	}
	return 0
}

func (x *ContinueBoxData) GetNowActID() int32 {
	if x != nil {
		return x.NowActID
	}
	return 0
}

func (x *ContinueBoxData) GetLastForcePopupTime() int64 {
	if x != nil {
		return x.LastForcePopupTime
	}
	return 0
}

func (x *ContinueBoxData) GetNowStageActBuyPayBoxNum() int32 {
	if x != nil {
		return x.NowStageActBuyPayBoxNum
	}
	return 0
}

func (x *ContinueBoxData) GetNowStageBuyNum() int32 {
	if x != nil {
		return x.NowStageBuyNum
	}
	return 0
}

type MayaActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NowActEndTime     int64           `protobuf:"varint,1,opt,name=nowActEndTime,proto3" json:"nowActEndTime,omitempty"`
	LastActEnableTime int64           `protobuf:"varint,2,opt,name=lastActEnableTime,proto3" json:"lastActEnableTime,omitempty"`
	MayaTokenNum      int32           `protobuf:"varint,3,opt,name=mayaTokenNum,proto3" json:"mayaTokenNum,omitempty"`         //这期活动的活动收集进度
	IsBuyExtraReward  bool            `protobuf:"varint,4,opt,name=isBuyExtraReward,proto3" json:"isBuyExtraReward,omitempty"` //是否购买了额外奖励
	Config            *MayaConfigData `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`                      //maya活动的配置数据
	IsClearReward     bool            `protobuf:"varint,6,opt,name=isClearReward,proto3" json:"isClearReward,omitempty"`       //是否清算奖励
	IsPopupShowTips   bool            `protobuf:"varint,7,opt,name=isPopupShowTips,proto3" json:"isPopupShowTips,omitempty"`   //是否弹出过提示
}

func (x *MayaActivityData) Reset() {
	*x = MayaActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MayaActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MayaActivityData) ProtoMessage() {}

func (x *MayaActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MayaActivityData.ProtoReflect.Descriptor instead.
func (*MayaActivityData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{38}
}

func (x *MayaActivityData) GetNowActEndTime() int64 {
	if x != nil {
		return x.NowActEndTime
	}
	return 0
}

func (x *MayaActivityData) GetLastActEnableTime() int64 {
	if x != nil {
		return x.LastActEnableTime
	}
	return 0
}

func (x *MayaActivityData) GetMayaTokenNum() int32 {
	if x != nil {
		return x.MayaTokenNum
	}
	return 0
}

func (x *MayaActivityData) GetIsBuyExtraReward() bool {
	if x != nil {
		return x.IsBuyExtraReward
	}
	return false
}

func (x *MayaActivityData) GetConfig() *MayaConfigData {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MayaActivityData) GetIsClearReward() bool {
	if x != nil {
		return x.IsClearReward
	}
	return false
}

func (x *MayaActivityData) GetIsPopupShowTips() bool {
	if x != nil {
		return x.IsPopupShowTips
	}
	return false
}

type MayaConfigData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllRewardList            []*MayaRewardData `protobuf:"bytes,1,rep,name=allRewardList,proto3" json:"allRewardList,omitempty"`                               //这期活动的所有奖励
	ExtraPrice               int32             `protobuf:"varint,2,opt,name=extraPrice,proto3" json:"extraPrice,omitempty"`                                    //额外奖励的价格
	MaxProgressNum           int32             `protobuf:"varint,3,opt,name=maxProgressNum,proto3" json:"maxProgressNum,omitempty"`                            //最大进度的数量
	LevelRange               []int32           `protobuf:"varint,4,rep,packed,name=levelRange,proto3" json:"levelRange,omitempty"`                             //关卡范围
	ConfigID                 int32             `protobuf:"varint,5,opt,name=configID,proto3" json:"configID,omitempty"`                                        //活动的配置id
	MayaTokenLevelOutPutNum  []int32           `protobuf:"varint,6,rep,packed,name=mayaTokenLevelOutPutNum,proto3" json:"mayaTokenLevelOutPutNum,omitempty"`   //maya币产出数量
	ExtraTokenLevelOutPutNum []int32           `protobuf:"varint,7,rep,packed,name=extraTokenLevelOutPutNum,proto3" json:"extraTokenLevelOutPutNum,omitempty"` //额外币产出数量
	BuildingType             int32             `protobuf:"varint,8,opt,name=buildingType,proto3" json:"buildingType,omitempty"`                                //这期元素链building的类型
}

func (x *MayaConfigData) Reset() {
	*x = MayaConfigData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MayaConfigData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MayaConfigData) ProtoMessage() {}

func (x *MayaConfigData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MayaConfigData.ProtoReflect.Descriptor instead.
func (*MayaConfigData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{39}
}

func (x *MayaConfigData) GetAllRewardList() []*MayaRewardData {
	if x != nil {
		return x.AllRewardList
	}
	return nil
}

func (x *MayaConfigData) GetExtraPrice() int32 {
	if x != nil {
		return x.ExtraPrice
	}
	return 0
}

func (x *MayaConfigData) GetMaxProgressNum() int32 {
	if x != nil {
		return x.MaxProgressNum
	}
	return 0
}

func (x *MayaConfigData) GetLevelRange() []int32 {
	if x != nil {
		return x.LevelRange
	}
	return nil
}

func (x *MayaConfigData) GetConfigID() int32 {
	if x != nil {
		return x.ConfigID
	}
	return 0
}

func (x *MayaConfigData) GetMayaTokenLevelOutPutNum() []int32 {
	if x != nil {
		return x.MayaTokenLevelOutPutNum
	}
	return nil
}

func (x *MayaConfigData) GetExtraTokenLevelOutPutNum() []int32 {
	if x != nil {
		return x.ExtraTokenLevelOutPutNum
	}
	return nil
}

func (x *MayaConfigData) GetBuildingType() int32 {
	if x != nil {
		return x.BuildingType
	}
	return 0
}

type MayaRewardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    int32         `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`       //类型的含义是 免费的 还是额外的
	NeedNum int32         `protobuf:"varint,2,opt,name=needNum,proto3" json:"needNum,omitempty"` //领取这个奖励所需要的数量
	Mats    *MaterialJson `protobuf:"bytes,3,opt,name=mats,proto3" json:"mats,omitempty"`        //这个奖励的具体id和数量
	IsGet   bool          `protobuf:"varint,4,opt,name=isGet,proto3" json:"isGet,omitempty"`     //是否领取
}

func (x *MayaRewardData) Reset() {
	*x = MayaRewardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MayaRewardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MayaRewardData) ProtoMessage() {}

func (x *MayaRewardData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MayaRewardData.ProtoReflect.Descriptor instead.
func (*MayaRewardData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{40}
}

func (x *MayaRewardData) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MayaRewardData) GetNeedNum() int32 {
	if x != nil {
		return x.NeedNum
	}
	return 0
}

func (x *MayaRewardData) GetMats() *MaterialJson {
	if x != nil {
		return x.Mats
	}
	return nil
}

func (x *MayaRewardData) GetIsGet() bool {
	if x != nil {
		return x.IsGet
	}
	return false
}

//连续宝箱配置表数据
type ContinueBoxConfigData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxBaseData *BaseGiftBoxData `protobuf:"bytes,1,opt,name=boxBaseData,proto3" json:"boxBaseData,omitempty"`
	IsFor       int32            `protobuf:"varint,2,opt,name=isFor,proto3" json:"isFor,omitempty"`
}

func (x *ContinueBoxConfigData) Reset() {
	*x = ContinueBoxConfigData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinueBoxConfigData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueBoxConfigData) ProtoMessage() {}

func (x *ContinueBoxConfigData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueBoxConfigData.ProtoReflect.Descriptor instead.
func (*ContinueBoxConfigData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{41}
}

func (x *ContinueBoxConfigData) GetBoxBaseData() *BaseGiftBoxData {
	if x != nil {
		return x.BoxBaseData
	}
	return nil
}

func (x *ContinueBoxConfigData) GetIsFor() int32 {
	if x != nil {
		return x.IsFor
	}
	return 0
}

//连胜活动数据
type ContinuePassLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NowStagePassNum        int32 `protobuf:"varint,1,opt,name=NowStagePassNum,proto3" json:"NowStagePassNum,omitempty"`
	NowActEndTime          int64 `protobuf:"varint,2,opt,name=nowActEndTime,proto3" json:"nowActEndTime,omitempty"`
	LastActEnableTime      int64 `protobuf:"varint,3,opt,name=lastActEnableTime,proto3" json:"lastActEnableTime,omitempty"`
	NowStageLastingPassNum int32 `protobuf:"varint,4,opt,name=nowStageLastingPassNum,proto3" json:"nowStageLastingPassNum,omitempty"` //持久得阶段数据
	ReqABTest              int32 `protobuf:"varint,5,opt,name=reqABTest,proto3" json:"reqABTest,omitempty"`
	ReqABTest39            int32 `protobuf:"varint,6,opt,name=reqABTest39,proto3" json:"reqABTest39,omitempty"`
}

func (x *ContinuePassLevelData) Reset() {
	*x = ContinuePassLevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuePassLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuePassLevelData) ProtoMessage() {}

func (x *ContinuePassLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuePassLevelData.ProtoReflect.Descriptor instead.
func (*ContinuePassLevelData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{42}
}

func (x *ContinuePassLevelData) GetNowStagePassNum() int32 {
	if x != nil {
		return x.NowStagePassNum
	}
	return 0
}

func (x *ContinuePassLevelData) GetNowActEndTime() int64 {
	if x != nil {
		return x.NowActEndTime
	}
	return 0
}

func (x *ContinuePassLevelData) GetLastActEnableTime() int64 {
	if x != nil {
		return x.LastActEnableTime
	}
	return 0
}

func (x *ContinuePassLevelData) GetNowStageLastingPassNum() int32 {
	if x != nil {
		return x.NowStageLastingPassNum
	}
	return 0
}

func (x *ContinuePassLevelData) GetReqABTest() int32 {
	if x != nil {
		return x.ReqABTest
	}
	return 0
}

func (x *ContinuePassLevelData) GetReqABTest39() int32 {
	if x != nil {
		return x.ReqABTest39
	}
	return 0
}

//补发数据
type ReissueData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityID int64 `protobuf:"varint,1,opt,name=activityID,proto3" json:"activityID,omitempty"`
	Score      int32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	GuildScore int32 `protobuf:"varint,3,opt,name=guildScore,proto3" json:"guildScore,omitempty"`
}

func (x *ReissueData) Reset() {
	*x = ReissueData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReissueData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReissueData) ProtoMessage() {}

func (x *ReissueData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReissueData.ProtoReflect.Descriptor instead.
func (*ReissueData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{43}
}

func (x *ReissueData) GetActivityID() int64 {
	if x != nil {
		return x.ActivityID
	}
	return 0
}

func (x *ReissueData) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ReissueData) GetGuildScore() int32 {
	if x != nil {
		return x.GuildScore
	}
	return 0
}

//阶段奖励补发数据
type StepReissueData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityID         int64   `protobuf:"varint,1,opt,name=activityID,proto3" json:"activityID,omitempty"`
	Score1             int32   `protobuf:"varint,2,opt,name=score1,proto3" json:"score1,omitempty"`
	Score2             int32   `protobuf:"varint,3,opt,name=score2,proto3" json:"score2,omitempty"`
	Score3             int32   `protobuf:"varint,4,opt,name=score3,proto3" json:"score3,omitempty"`
	GuildScore         int32   `protobuf:"varint,5,opt,name=guildScore,proto3" json:"guildScore,omitempty"`
	StepGetIndexs      []int32 `protobuf:"varint,6,rep,packed,name=stepGetIndexs,proto3" json:"stepGetIndexs,omitempty"`
	FirstSyncScoreStep int32   `protobuf:"varint,7,opt,name=firstSyncScoreStep,proto3" json:"firstSyncScoreStep,omitempty"`
}

func (x *StepReissueData) Reset() {
	*x = StepReissueData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepReissueData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepReissueData) ProtoMessage() {}

func (x *StepReissueData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepReissueData.ProtoReflect.Descriptor instead.
func (*StepReissueData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{44}
}

func (x *StepReissueData) GetActivityID() int64 {
	if x != nil {
		return x.ActivityID
	}
	return 0
}

func (x *StepReissueData) GetScore1() int32 {
	if x != nil {
		return x.Score1
	}
	return 0
}

func (x *StepReissueData) GetScore2() int32 {
	if x != nil {
		return x.Score2
	}
	return 0
}

func (x *StepReissueData) GetScore3() int32 {
	if x != nil {
		return x.Score3
	}
	return 0
}

func (x *StepReissueData) GetGuildScore() int32 {
	if x != nil {
		return x.GuildScore
	}
	return 0
}

func (x *StepReissueData) GetStepGetIndexs() []int32 {
	if x != nil {
		return x.StepGetIndexs
	}
	return nil
}

func (x *StepReissueData) GetFirstSyncScoreStep() int32 {
	if x != nil {
		return x.FirstSyncScoreStep
	}
	return 0
}

//公会活动
type ClubActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId               int64                            `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"` //活动id
	Levels                   []*GuildActLevel                 `protobuf:"bytes,2,rep,name=levels,proto3" json:"levels,omitempty"`
	Rank                     int32                            `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	Target                   int32                            `protobuf:"varint,4,opt,name=target,proto3" json:"target,omitempty"`         //公会目标积分
	GuildScore               int32                            `protobuf:"varint,5,opt,name=guildScore,proto3" json:"guildScore,omitempty"` //公会当前积分
	IsShowInfoUI             int32                            `protobuf:"varint,6,opt,name=isShowInfoUI,proto3" json:"isShowInfoUI,omitempty"`
	StatusCode               GuildActivityStatusCode          `protobuf:"varint,7,opt,name=statusCode,proto3,enum=GuildActivityStatusCode" json:"statusCode,omitempty"`
	CanGetRwd                int32                            `protobuf:"varint,8,opt,name=canGetRwd,proto3" json:"canGetRwd,omitempty"`
	AlreadyGetRwd            int32                            `protobuf:"varint,9,opt,name=alreadyGetRwd,proto3" json:"alreadyGetRwd,omitempty"`
	AlreadyGetAddRwd         int32                            `protobuf:"varint,10,opt,name=alreadyGetAddRwd,proto3" json:"alreadyGetAddRwd,omitempty"`
	Score                    int32                            `protobuf:"varint,11,opt,name=score,proto3" json:"score,omitempty"`                                        //玩家当前积分
	GuildName                string                           `protobuf:"bytes,12,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`                //该活动所属的公会名字
	GuildBadge               string                           `protobuf:"bytes,13,opt,name=guild_badge,json=guildBadge,proto3" json:"guild_badge,omitempty"`             //该活动所属的公会徽章
	Threaten                 int32                            `protobuf:"varint,14,opt,name=threaten,proto3" json:"threaten,omitempty"`                                  //推出公会是否威胁提示
	GuildId                  int64                            `protobuf:"varint,15,opt,name=guildId,proto3" json:"guildId,omitempty"`                                    //该活动所属的公会ID
	GuildMemberCount         int32                            `protobuf:"varint,16,opt,name=guildMemberCount,proto3" json:"guildMemberCount,omitempty"`                  //该活动所属的公会成员个数
	EndTimeEndUtc            int64                            `protobuf:"varint,17,opt,name=endTimeEndUtc,proto3" json:"endTimeEndUtc,omitempty"`                        //活动结束时间
	ShowTimeEndUtc           int64                            `protobuf:"varint,18,opt,name=showTimeEndUtc,proto3" json:"showTimeEndUtc,omitempty"`                      //公示期结束时间
	NotShowIcon              int32                            `protobuf:"varint,19,opt,name=notShowIcon,proto3" json:"notShowIcon,omitempty"`                            //公示期到达的等级的玩家不显示icon
	RankUsers                []*GuildActivityRankUserBaseInfo `protobuf:"bytes,20,rep,name=rankUsers,proto3" json:"rankUsers,omitempty"`                                 //排行榜玩家数据
	AlreadyActivityIDs       []int64                          `protobuf:"varint,21,rep,packed,name=alreadyActivityIDs,proto3" json:"alreadyActivityIDs,omitempty"`       //已经领过奖励的活动ID列表
	AlreadyActivityAddIDs    []int64                          `protobuf:"varint,22,rep,packed,name=alreadyActivityAddIDs,proto3" json:"alreadyActivityAddIDs,omitempty"` //已经领过额外奖励的活动ID列表
	ReissueActivityDatas     []*ReissueData                   `protobuf:"bytes,23,rep,name=reissueActivityDatas,proto3" json:"reissueActivityDatas,omitempty"`           //需要补发奖励的活动ID列表
	Target1                  int32                            `protobuf:"varint,24,opt,name=target1,proto3" json:"target1,omitempty"`                                    //公会目标积分第一阶段
	Target2                  int32                            `protobuf:"varint,25,opt,name=target2,proto3" json:"target2,omitempty"`                                    //公会目标积分第二阶段
	FirstSyncScoreStep       int32                            `protobuf:"varint,26,opt,name=firstSyncScoreStep,proto3" json:"firstSyncScoreStep,omitempty"`              //首次同步积分所在哪个阶段
	StepRewardGetList        []int32                          `protobuf:"varint,27,rep,packed,name=stepRewardGetList,proto3" json:"stepRewardGetList,omitempty"`         //阶段奖励领取情况
	AddRewardGet             int32                            `protobuf:"varint,28,opt,name=addRewardGet,proto3" json:"addRewardGet,omitempty"`                          //额外奖励领取情况
	IsDropOut                int32                            `protobuf:"varint,29,opt,name=isDropOut,proto3" json:"isDropOut,omitempty"`                                //不显示主界面按钮
	StepReissueActivityDatas []*StepReissueData               `protobuf:"bytes,30,rep,name=stepReissueActivityDatas,proto3" json:"stepReissueActivityDatas,omitempty"`   //阶段奖励补发奖励的活动数据
	IsShowContinue           int32                            `protobuf:"varint,31,opt,name=isShowContinue,proto3" json:"isShowContinue,omitempty"`                      //显示继续按钮
	NotNeedSyncRankData      int32                            `protobuf:"varint,32,opt,name=notNeedSyncRankData,proto3" json:"notNeedSyncRankData,omitempty"`            //是否需要同步服务器排行数据
	ReallyGuildScore         int32                            `protobuf:"varint,33,opt,name=reallyGuildScore,proto3" json:"reallyGuildScore,omitempty"`                  //真实的公会积分
}

func (x *ClubActivityData) Reset() {
	*x = ClubActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubActivityData) ProtoMessage() {}

func (x *ClubActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubActivityData.ProtoReflect.Descriptor instead.
func (*ClubActivityData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{45}
}

func (x *ClubActivityData) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *ClubActivityData) GetLevels() []*GuildActLevel {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *ClubActivityData) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ClubActivityData) GetTarget() int32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *ClubActivityData) GetGuildScore() int32 {
	if x != nil {
		return x.GuildScore
	}
	return 0
}

func (x *ClubActivityData) GetIsShowInfoUI() int32 {
	if x != nil {
		return x.IsShowInfoUI
	}
	return 0
}

func (x *ClubActivityData) GetStatusCode() GuildActivityStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return GuildActivityStatusCode_GUILD_ACTIVITY_STATUS_CODE_NONE
}

func (x *ClubActivityData) GetCanGetRwd() int32 {
	if x != nil {
		return x.CanGetRwd
	}
	return 0
}

func (x *ClubActivityData) GetAlreadyGetRwd() int32 {
	if x != nil {
		return x.AlreadyGetRwd
	}
	return 0
}

func (x *ClubActivityData) GetAlreadyGetAddRwd() int32 {
	if x != nil {
		return x.AlreadyGetAddRwd
	}
	return 0
}

func (x *ClubActivityData) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ClubActivityData) GetGuildName() string {
	if x != nil {
		return x.GuildName
	}
	return ""
}

func (x *ClubActivityData) GetGuildBadge() string {
	if x != nil {
		return x.GuildBadge
	}
	return ""
}

func (x *ClubActivityData) GetThreaten() int32 {
	if x != nil {
		return x.Threaten
	}
	return 0
}

func (x *ClubActivityData) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ClubActivityData) GetGuildMemberCount() int32 {
	if x != nil {
		return x.GuildMemberCount
	}
	return 0
}

func (x *ClubActivityData) GetEndTimeEndUtc() int64 {
	if x != nil {
		return x.EndTimeEndUtc
	}
	return 0
}

func (x *ClubActivityData) GetShowTimeEndUtc() int64 {
	if x != nil {
		return x.ShowTimeEndUtc
	}
	return 0
}

func (x *ClubActivityData) GetNotShowIcon() int32 {
	if x != nil {
		return x.NotShowIcon
	}
	return 0
}

func (x *ClubActivityData) GetRankUsers() []*GuildActivityRankUserBaseInfo {
	if x != nil {
		return x.RankUsers
	}
	return nil
}

func (x *ClubActivityData) GetAlreadyActivityIDs() []int64 {
	if x != nil {
		return x.AlreadyActivityIDs
	}
	return nil
}

func (x *ClubActivityData) GetAlreadyActivityAddIDs() []int64 {
	if x != nil {
		return x.AlreadyActivityAddIDs
	}
	return nil
}

func (x *ClubActivityData) GetReissueActivityDatas() []*ReissueData {
	if x != nil {
		return x.ReissueActivityDatas
	}
	return nil
}

func (x *ClubActivityData) GetTarget1() int32 {
	if x != nil {
		return x.Target1
	}
	return 0
}

func (x *ClubActivityData) GetTarget2() int32 {
	if x != nil {
		return x.Target2
	}
	return 0
}

func (x *ClubActivityData) GetFirstSyncScoreStep() int32 {
	if x != nil {
		return x.FirstSyncScoreStep
	}
	return 0
}

func (x *ClubActivityData) GetStepRewardGetList() []int32 {
	if x != nil {
		return x.StepRewardGetList
	}
	return nil
}

func (x *ClubActivityData) GetAddRewardGet() int32 {
	if x != nil {
		return x.AddRewardGet
	}
	return 0
}

func (x *ClubActivityData) GetIsDropOut() int32 {
	if x != nil {
		return x.IsDropOut
	}
	return 0
}

func (x *ClubActivityData) GetStepReissueActivityDatas() []*StepReissueData {
	if x != nil {
		return x.StepReissueActivityDatas
	}
	return nil
}

func (x *ClubActivityData) GetIsShowContinue() int32 {
	if x != nil {
		return x.IsShowContinue
	}
	return 0
}

func (x *ClubActivityData) GetNotNeedSyncRankData() int32 {
	if x != nil {
		return x.NotNeedSyncRankData
	}
	return 0
}

func (x *ClubActivityData) GetReallyGuildScore() int32 {
	if x != nil {
		return x.ReallyGuildScore
	}
	return 0
}

//数据合并数据
type MergeMoudleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasMailReward          int32 `protobuf:"varint,1,opt,name=hasMailReward,proto3" json:"hasMailReward,omitempty"`                    //是否有奖励邮件
	OldPlayerSendReward    int32 `protobuf:"varint,2,opt,name=oldPlayerSendReward,proto3" json:"oldPlayerSendReward,omitempty"`        //老玩家是否添加了奖励邮件
	MergebuildingData      int32 `protobuf:"varint,3,opt,name=mergebuildingData,proto3" json:"mergebuildingData,omitempty"`            //老玩家是否合并了建筑数据
	IsGiveAlice            int32 `protobuf:"varint,4,opt,name=isGiveAlice,proto3" json:"isGiveAlice,omitempty"`                        //是否送了爱丽丝
	IsMergeDiamond         int32 `protobuf:"varint,5,opt,name=isMergeDiamond,proto3" json:"isMergeDiamond,omitempty"`                  //B合并过钻石
	IsMergeSystemMoudle    int32 `protobuf:"varint,6,opt,name=isMergeSystemMoudle,proto3" json:"isMergeSystemMoudle,omitempty"`        //是否合并了系统功能
	TaskDataBugIsOk        int32 `protobuf:"varint,7,opt,name=taskDataBugIsOk,proto3" json:"taskDataBugIsOk,omitempty"`                //是否处理了任务问题
	IsNpcErrorOk           int32 `protobuf:"varint,8,opt,name=isNpcErrorOk,proto3" json:"isNpcErrorOk,omitempty"`                      //是否处理了NPC容错问题
	IsNpcErrorIllOk        int32 `protobuf:"varint,9,opt,name=isNpcErrorIllOk,proto3" json:"isNpcErrorIllOk,omitempty"`                //是否处理了NPC容错图鉴
	OldPlayerSendRewardNew int32 `protobuf:"varint,10,opt,name=oldPlayerSendRewardNew,proto3" json:"oldPlayerSendRewardNew,omitempty"` //老玩家是否添加了奖励邮件newbonus
	IsMergeNewBonus        int32 `protobuf:"varint,11,opt,name=isMergeNewBonus,proto3" json:"isMergeNewBonus,omitempty"`               //是否进行了newbonus合并
}

func (x *MergeMoudleData) Reset() {
	*x = MergeMoudleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeMoudleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeMoudleData) ProtoMessage() {}

func (x *MergeMoudleData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeMoudleData.ProtoReflect.Descriptor instead.
func (*MergeMoudleData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{46}
}

func (x *MergeMoudleData) GetHasMailReward() int32 {
	if x != nil {
		return x.HasMailReward
	}
	return 0
}

func (x *MergeMoudleData) GetOldPlayerSendReward() int32 {
	if x != nil {
		return x.OldPlayerSendReward
	}
	return 0
}

func (x *MergeMoudleData) GetMergebuildingData() int32 {
	if x != nil {
		return x.MergebuildingData
	}
	return 0
}

func (x *MergeMoudleData) GetIsGiveAlice() int32 {
	if x != nil {
		return x.IsGiveAlice
	}
	return 0
}

func (x *MergeMoudleData) GetIsMergeDiamond() int32 {
	if x != nil {
		return x.IsMergeDiamond
	}
	return 0
}

func (x *MergeMoudleData) GetIsMergeSystemMoudle() int32 {
	if x != nil {
		return x.IsMergeSystemMoudle
	}
	return 0
}

func (x *MergeMoudleData) GetTaskDataBugIsOk() int32 {
	if x != nil {
		return x.TaskDataBugIsOk
	}
	return 0
}

func (x *MergeMoudleData) GetIsNpcErrorOk() int32 {
	if x != nil {
		return x.IsNpcErrorOk
	}
	return 0
}

func (x *MergeMoudleData) GetIsNpcErrorIllOk() int32 {
	if x != nil {
		return x.IsNpcErrorIllOk
	}
	return 0
}

func (x *MergeMoudleData) GetOldPlayerSendRewardNew() int32 {
	if x != nil {
		return x.OldPlayerSendRewardNew
	}
	return 0
}

func (x *MergeMoudleData) GetIsMergeNewBonus() int32 {
	if x != nil {
		return x.IsMergeNewBonus
	}
	return 0
}

//排名活动数据
type RankActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityConfID    int32                   `protobuf:"varint,1,opt,name=activityConfID,proto3" json:"activityConfID,omitempty"`        // 活动配置ID
	UniqueId          string                  `protobuf:"bytes,2,opt,name=uniqueId,proto3" json:"uniqueId,omitempty"`                     // 活动唯一ID 活动开启时生成
	StartTime         int64                   `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`                  // 活动开启时间
	JoinEndTime       int64                   `protobuf:"varint,4,opt,name=joinEndTime,proto3" json:"joinEndTime,omitempty"`              //加入结束时间
	EndTime           int64                   `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`                      // 活动结束时间
	Notsyncmedal      int32                   `protobuf:"varint,6,opt,name=notsyncmedal,proto3" json:"notsyncmedal,omitempty"`            //待同步的奖牌数
	RankUsers         []*RankActivityUserInfo `protobuf:"bytes,7,rep,name=rankUsers,proto3" json:"rankUsers,omitempty"`                   //最终排行榜数据
	Status            int32                   `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`                        //最终排行榜数据
	ShowRed           int32                   `protobuf:"varint,9,opt,name=showRed,proto3" json:"showRed,omitempty"`                      //显示红点
	HasJoinRwd        int32                   `protobuf:"varint,10,opt,name=hasJoinRwd,proto3" json:"hasJoinRwd,omitempty"`               //是否有加入奖励
	IsShowOpenUI      int32                   `protobuf:"varint,11,opt,name=isShowOpenUI,proto3" json:"isShowOpenUI,omitempty"`           //是否显示活动开启UI
	Medal             int32                   `protobuf:"varint,12,opt,name=medal,proto3" json:"medal,omitempty"`                         //积分
	Rank              int32                   `protobuf:"varint,13,opt,name=rank,proto3" json:"rank,omitempty"`                           //排名
	GroupID           int64                   `protobuf:"varint,14,opt,name=groupID,proto3" json:"groupID,omitempty"`                     //分组id
	JoinBreak         int32                   `protobuf:"varint,15,opt,name=joinBreak,proto3" json:"joinBreak,omitempty"`                 //加入成功打断
	AlreadyGetJoinRwd int32                   `protobuf:"varint,16,opt,name=alreadyGetJoinRwd,proto3" json:"alreadyGetJoinRwd,omitempty"` //已经领取加入奖励
	LastAddMedalLevel int32                   `protobuf:"varint,17,opt,name=lastAddMedalLevel,proto3" json:"lastAddMedalLevel,omitempty"` //加本地缓存的积分判断关卡数
	ActivityGroupId   string                  `protobuf:"bytes,18,opt,name=activityGroupId,proto3" json:"activityGroupId,omitempty"`
}

func (x *RankActivityData) Reset() {
	*x = RankActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankActivityData) ProtoMessage() {}

func (x *RankActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankActivityData.ProtoReflect.Descriptor instead.
func (*RankActivityData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{47}
}

func (x *RankActivityData) GetActivityConfID() int32 {
	if x != nil {
		return x.ActivityConfID
	}
	return 0
}

func (x *RankActivityData) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *RankActivityData) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RankActivityData) GetJoinEndTime() int64 {
	if x != nil {
		return x.JoinEndTime
	}
	return 0
}

func (x *RankActivityData) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RankActivityData) GetNotsyncmedal() int32 {
	if x != nil {
		return x.Notsyncmedal
	}
	return 0
}

func (x *RankActivityData) GetRankUsers() []*RankActivityUserInfo {
	if x != nil {
		return x.RankUsers
	}
	return nil
}

func (x *RankActivityData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RankActivityData) GetShowRed() int32 {
	if x != nil {
		return x.ShowRed
	}
	return 0
}

func (x *RankActivityData) GetHasJoinRwd() int32 {
	if x != nil {
		return x.HasJoinRwd
	}
	return 0
}

func (x *RankActivityData) GetIsShowOpenUI() int32 {
	if x != nil {
		return x.IsShowOpenUI
	}
	return 0
}

func (x *RankActivityData) GetMedal() int32 {
	if x != nil {
		return x.Medal
	}
	return 0
}

func (x *RankActivityData) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankActivityData) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *RankActivityData) GetJoinBreak() int32 {
	if x != nil {
		return x.JoinBreak
	}
	return 0
}

func (x *RankActivityData) GetAlreadyGetJoinRwd() int32 {
	if x != nil {
		return x.AlreadyGetJoinRwd
	}
	return 0
}

func (x *RankActivityData) GetLastAddMedalLevel() int32 {
	if x != nil {
		return x.LastAddMedalLevel
	}
	return 0
}

func (x *RankActivityData) GetActivityGroupId() string {
	if x != nil {
		return x.ActivityGroupId
	}
	return ""
}

//FanPageLike数据
type FanPageLikeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowTimes      int32   `protobuf:"varint,1,opt,name=showTimes,proto3" json:"showTimes,omitempty"`                  //弹出的次数
	ShowTimeUtc    int32   `protobuf:"varint,2,opt,name=showTimeUtc,proto3" json:"showTimeUtc,omitempty"`              //该次出现的时间戳
	IsGetRwd       int32   `protobuf:"varint,3,opt,name=isGetRwd,proto3" json:"isGetRwd,omitempty"`                    //是否已领奖
	Status         int32   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                        //状态
	ShowWindowList []int32 `protobuf:"varint,5,rep,packed,name=showWindowList,proto3" json:"showWindowList,omitempty"` //保存显示UI对应的次数
	FirstBandFB    int32   `protobuf:"varint,6,opt,name=firstBandFB,proto3" json:"firstBandFB,omitempty"`              //首次绑定FB
}

func (x *FanPageLikeData) Reset() {
	*x = FanPageLikeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanPageLikeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanPageLikeData) ProtoMessage() {}

func (x *FanPageLikeData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanPageLikeData.ProtoReflect.Descriptor instead.
func (*FanPageLikeData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{48}
}

func (x *FanPageLikeData) GetShowTimes() int32 {
	if x != nil {
		return x.ShowTimes
	}
	return 0
}

func (x *FanPageLikeData) GetShowTimeUtc() int32 {
	if x != nil {
		return x.ShowTimeUtc
	}
	return 0
}

func (x *FanPageLikeData) GetIsGetRwd() int32 {
	if x != nil {
		return x.IsGetRwd
	}
	return 0
}

func (x *FanPageLikeData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FanPageLikeData) GetShowWindowList() []int32 {
	if x != nil {
		return x.ShowWindowList
	}
	return nil
}

func (x *FanPageLikeData) GetFirstBandFB() int32 {
	if x != nil {
		return x.FirstBandFB
	}
	return 0
}

//TeaParty活动数据
type TeaPartyActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId         int32   `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"`                  //活动Id, 配置表的Id
	IsShowOpenUI       int32   `protobuf:"varint,2,opt,name=isShowOpenUI,proto3" json:"isShowOpenUI,omitempty"`              //是否弹出过开启的UI
	Status             int32   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                          //活动的状态
	GetStepRwdIndex    int32   `protobuf:"varint,4,opt,name=getStepRwdIndex,proto3" json:"getStepRwdIndex,omitempty"`        //阶段奖励领取的Index(0, 1, 2)
	Score              int32   `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`                            //当前的积分
	OpenUIScore        int32   `protobuf:"varint,6,opt,name=openUIScore,proto3" json:"openUIScore,omitempty"`                //上一次打开UI时的积分
	StepTargets        []int32 `protobuf:"varint,7,rep,packed,name=stepTargets,proto3" json:"stepTargets,omitempty"`         //阶段的目标值
	IsOpenBreak        int32   `protobuf:"varint,8,opt,name=IsOpenBreak,proto3" json:"IsOpenBreak,omitempty"`                //是否触发过活动开启的打断
	ActEndTime         int64   `protobuf:"varint,9,opt,name=actEndTime,proto3" json:"actEndTime,omitempty"`                  //活动结束时间戳
	ActStartTime       int64   `protobuf:"varint,10,opt,name=actStartTime,proto3" json:"actStartTime,omitempty"`             //活动开始时间戳
	IsActEndFlyToBrand int64   `protobuf:"varint,11,opt,name=isActEndFlyToBrand,proto3" json:"isActEndFlyToBrand,omitempty"` //活动结束是否播放了吊牌动画
	Coefficients       []int32 `protobuf:"varint,12,rep,packed,name=coefficients,proto3" json:"coefficients,omitempty"`      //虚拟进度变化百分比
}

func (x *TeaPartyActivityData) Reset() {
	*x = TeaPartyActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeaPartyActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeaPartyActivityData) ProtoMessage() {}

func (x *TeaPartyActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeaPartyActivityData.ProtoReflect.Descriptor instead.
func (*TeaPartyActivityData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{49}
}

func (x *TeaPartyActivityData) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *TeaPartyActivityData) GetIsShowOpenUI() int32 {
	if x != nil {
		return x.IsShowOpenUI
	}
	return 0
}

func (x *TeaPartyActivityData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TeaPartyActivityData) GetGetStepRwdIndex() int32 {
	if x != nil {
		return x.GetStepRwdIndex
	}
	return 0
}

func (x *TeaPartyActivityData) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TeaPartyActivityData) GetOpenUIScore() int32 {
	if x != nil {
		return x.OpenUIScore
	}
	return 0
}

func (x *TeaPartyActivityData) GetStepTargets() []int32 {
	if x != nil {
		return x.StepTargets
	}
	return nil
}

func (x *TeaPartyActivityData) GetIsOpenBreak() int32 {
	if x != nil {
		return x.IsOpenBreak
	}
	return 0
}

func (x *TeaPartyActivityData) GetActEndTime() int64 {
	if x != nil {
		return x.ActEndTime
	}
	return 0
}

func (x *TeaPartyActivityData) GetActStartTime() int64 {
	if x != nil {
		return x.ActStartTime
	}
	return 0
}

func (x *TeaPartyActivityData) GetIsActEndFlyToBrand() int64 {
	if x != nil {
		return x.IsActEndFlyToBrand
	}
	return 0
}

func (x *TeaPartyActivityData) GetCoefficients() []int32 {
	if x != nil {
		return x.Coefficients
	}
	return nil
}

//竞速活动数据
type RaceActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityInfo         *RaceLevelActivityInfo `protobuf:"bytes,1,opt,name=activityInfo,proto3" json:"activityInfo,omitempty"`                   //基本数据
	GroupInfo            *ActivityGroupInfo     `protobuf:"bytes,2,opt,name=groupInfo,proto3" json:"groupInfo,omitempty"`                         //组数据
	Status               int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                              //状态
	RankUsersUI          []*GroupMemberInfo     `protobuf:"bytes,4,rep,name=rankUsersUI,proto3" json:"rankUsersUI,omitempty"`                     //上一次打开UI排行榜数据
	ShowRed              int32                  `protobuf:"varint,5,opt,name=showRed,proto3" json:"showRed,omitempty"`                            //显示红点
	IsShowOpenUI         int32                  `protobuf:"varint,6,opt,name=isShowOpenUI,proto3" json:"isShowOpenUI,omitempty"`                  //是否显示活动开启UI
	Notsyncmedal         int32                  `protobuf:"varint,7,opt,name=notsyncmedal,proto3" json:"notsyncmedal,omitempty"`                  //待同步的积分
	PreRank              int32                  `protobuf:"varint,8,opt,name=preRank,proto3" json:"preRank,omitempty"`                            //上一期的排名
	Rank                 int32                  `protobuf:"varint,9,opt,name=rank,proto3" json:"rank,omitempty"`                                  //排名
	Score                int32                  `protobuf:"varint,10,opt,name=score,proto3" json:"score,omitempty"`                               //分数
	IsAlreadyShowTips    int32                  `protobuf:"varint,11,opt,name=isAlreadyShowTips,proto3" json:"isAlreadyShowTips,omitempty"`       //是否显示了Tips
	IsOpenBreak          int32                  `protobuf:"varint,12,opt,name=isOpenBreak,proto3" json:"isOpenBreak,omitempty"`                   //是否开启打断(每组一次)
	IsEndBreak           int32                  `protobuf:"varint,13,opt,name=isEndBreak,proto3" json:"isEndBreak,omitempty"`                     //是否结束打断(每组一次)
	IsSelfScoreBreak     int32                  `protobuf:"varint,14,opt,name=isSelfScoreBreak,proto3" json:"isSelfScoreBreak,omitempty"`         //积分达到目标值
	AlreadyGetRwd        int32                  `protobuf:"varint,15,opt,name=alreadyGetRwd,proto3" json:"alreadyGetRwd,omitempty"`               //是否领奖
	ActivityTimes        int32                  `protobuf:"varint,16,opt,name=activityTimes,proto3" json:"activityTimes,omitempty"`               //轮次
	TotelMatchTime       int64                  `protobuf:"varint,17,opt,name=totelMatchTime,proto3" json:"totelMatchTime,omitempty"`             //三消中的时间 秒数 初始值
	WithinChallengeTimes int32                  `protobuf:"varint,18,opt,name=withinChallengeTimes,proto3" json:"withinChallengeTimes,omitempty"` //挑战次数  初始值
	JoinLevel            int32                  `protobuf:"varint,19,opt,name=joinLevel,proto3" json:"joinLevel,omitempty"`                       //加入时的关卡数
	JoinTimeUtc          int64                  `protobuf:"varint,20,opt,name=joinTimeUtc,proto3" json:"joinTimeUtc,omitempty"`                   //加入时的时间戳
}

func (x *RaceActivityData) Reset() {
	*x = RaceActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceActivityData) ProtoMessage() {}

func (x *RaceActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceActivityData.ProtoReflect.Descriptor instead.
func (*RaceActivityData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{50}
}

func (x *RaceActivityData) GetActivityInfo() *RaceLevelActivityInfo {
	if x != nil {
		return x.ActivityInfo
	}
	return nil
}

func (x *RaceActivityData) GetGroupInfo() *ActivityGroupInfo {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

func (x *RaceActivityData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RaceActivityData) GetRankUsersUI() []*GroupMemberInfo {
	if x != nil {
		return x.RankUsersUI
	}
	return nil
}

func (x *RaceActivityData) GetShowRed() int32 {
	if x != nil {
		return x.ShowRed
	}
	return 0
}

func (x *RaceActivityData) GetIsShowOpenUI() int32 {
	if x != nil {
		return x.IsShowOpenUI
	}
	return 0
}

func (x *RaceActivityData) GetNotsyncmedal() int32 {
	if x != nil {
		return x.Notsyncmedal
	}
	return 0
}

func (x *RaceActivityData) GetPreRank() int32 {
	if x != nil {
		return x.PreRank
	}
	return 0
}

func (x *RaceActivityData) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RaceActivityData) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RaceActivityData) GetIsAlreadyShowTips() int32 {
	if x != nil {
		return x.IsAlreadyShowTips
	}
	return 0
}

func (x *RaceActivityData) GetIsOpenBreak() int32 {
	if x != nil {
		return x.IsOpenBreak
	}
	return 0
}

func (x *RaceActivityData) GetIsEndBreak() int32 {
	if x != nil {
		return x.IsEndBreak
	}
	return 0
}

func (x *RaceActivityData) GetIsSelfScoreBreak() int32 {
	if x != nil {
		return x.IsSelfScoreBreak
	}
	return 0
}

func (x *RaceActivityData) GetAlreadyGetRwd() int32 {
	if x != nil {
		return x.AlreadyGetRwd
	}
	return 0
}

func (x *RaceActivityData) GetActivityTimes() int32 {
	if x != nil {
		return x.ActivityTimes
	}
	return 0
}

func (x *RaceActivityData) GetTotelMatchTime() int64 {
	if x != nil {
		return x.TotelMatchTime
	}
	return 0
}

func (x *RaceActivityData) GetWithinChallengeTimes() int32 {
	if x != nil {
		return x.WithinChallengeTimes
	}
	return 0
}

func (x *RaceActivityData) GetJoinLevel() int32 {
	if x != nil {
		return x.JoinLevel
	}
	return 0
}

func (x *RaceActivityData) GetJoinTimeUtc() int64 {
	if x != nil {
		return x.JoinTimeUtc
	}
	return 0
}

//用户数据
type PlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//用户基础信息
	BaseData *BaseData `protobuf:"bytes,1,opt,name=baseData,proto3" json:"baseData,omitempty"`
	//经验
	ExpData *ExpData `protobuf:"bytes,2,opt,name=expData,proto3" json:"expData,omitempty"`
	//金钱
	MoneyData *MoneyData `protobuf:"bytes,3,opt,name=moneyData,proto3" json:"moneyData,omitempty"`
	//体力
	HeartData *HeartData `protobuf:"bytes,4,opt,name=heartData,proto3" json:"heartData,omitempty"`
	//关卡
	LevelData *LevelData `protobuf:"bytes,5,opt,name=levelData,proto3" json:"levelData,omitempty"`
	//物品
	ItemData *ItemData `protobuf:"bytes,6,opt,name=itemData,proto3" json:"itemData,omitempty"`
	//泡泡
	BubbleData *BubbleData `protobuf:"bytes,7,opt,name=bubbleData,proto3" json:"bubbleData,omitempty"`
	//宝箱
	BasketData *BasketData `protobuf:"bytes,8,opt,name=basketData,proto3" json:"basketData,omitempty"`
	//建筑
	MapBuildingData *MapBuildingData `protobuf:"bytes,9,opt,name=mapBuildingData,proto3" json:"mapBuildingData,omitempty"`
	//MergeCounter
	BuildingMergeCounter *BuildingMergeCounter `protobuf:"bytes,10,opt,name=buildingMergeCounter,proto3" json:"buildingMergeCounter,omitempty"`
	//新建筑通知
	NewBuildingNotices *NewBuildingNotices `protobuf:"bytes,11,opt,name=newBuildingNotices,proto3" json:"newBuildingNotices,omitempty"`
	//灵力
	MapGridSprites *MapGridSprites `protobuf:"bytes,12,opt,name=mapGridSprites,proto3" json:"mapGridSprites,omitempty"`
	//Merge商店
	MergeShopData *MergeShopData `protobuf:"bytes,15,opt,name=mergeShopData,proto3" json:"mergeShopData,omitempty"`
	//系统设置
	SystemSettingData *SystemSetting `protobuf:"bytes,16,opt,name=SystemSettingData,proto3" json:"SystemSettingData,omitempty"`
	//相机
	CameraData *CameraData `protobuf:"bytes,17,opt,name=cameraData,proto3" json:"cameraData,omitempty"`
	//图鉴
	IllustrationData *IllustrationData `protobuf:"bytes,18,opt,name=illustrationData,proto3" json:"illustrationData,omitempty"`
	//任务
	TaskData *TaskData `protobuf:"bytes,19,opt,name=taskData,proto3" json:"taskData,omitempty"`
	//签到
	SignData *SigninData `protobuf:"bytes,20,opt,name=signData,proto3" json:"signData,omitempty"`
	//活动
	ActivityData *ActivityData `protobuf:"bytes,21,opt,name=activityData,proto3" json:"activityData,omitempty"`
	//付费商城
	PayShopData *PayShopData `protobuf:"bytes,22,opt,name=payShopData,proto3" json:"payShopData,omitempty"`
	//购买信息
	BuyData *BuyData `protobuf:"bytes,23,opt,name=buyData,proto3" json:"buyData,omitempty"`
	//商品状态
	ProduceStateData *ProduceStateData `protobuf:"bytes,24,opt,name=produceStateData,proto3" json:"produceStateData,omitempty"`
	//成就信息
	AchievementData *AchievementData `protobuf:"bytes,25,opt,name=achievementData,proto3" json:"achievementData,omitempty"`
	//结算信息
	GameEndBalaceData *GameEndBalaceData `protobuf:"bytes,26,opt,name=gameEndBalaceData,proto3" json:"gameEndBalaceData,omitempty"`
	//本地好友信息
	FriendLocalData *FriendLocalData `protobuf:"bytes,27,opt,name=friendLocalData,proto3" json:"friendLocalData,omitempty"`
	//NPC数据
	NPCData *NPCData `protobuf:"bytes,28,opt,name=nPCData,proto3" json:"nPCData,omitempty"`
	//岛屿解锁数据
	LandUnLockData *LandUnLockData `protobuf:"bytes,29,opt,name=landUnLockData,proto3" json:"landUnLockData,omitempty"`
	//漂浮物数据
	FlotageData *FlotageData `protobuf:"bytes,30,opt,name=flotageData,proto3" json:"flotageData,omitempty"`
	//最大关卡活动数据
	MaxLevelActivityData *MaxLevelActivityData `protobuf:"bytes,31,opt,name=maxLevelActivityData,proto3" json:"maxLevelActivityData,omitempty"`
	//收集书数据
	CollectBookData *CollectBookData `protobuf:"bytes,32,opt,name=collectBookData,proto3" json:"collectBookData,omitempty"`
	//剧情数据
	GamePlotData *GamePlotData `protobuf:"bytes,33,opt,name=gamePlotData,proto3" json:"gamePlotData,omitempty"`
	//新手引导
	NoviceGuideData *NoviceGuideData `protobuf:"bytes,34,opt,name=noviceGuideData,proto3" json:"noviceGuideData,omitempty"`
	//素材产出活动
	MaterialOutPutActivityData *MaterialOutPutActivityData `protobuf:"bytes,35,opt,name=materialOutPutActivityData,proto3" json:"materialOutPutActivityData,omitempty"`
	//城堡数据
	CastalData *CastalData `protobuf:"bytes,36,opt,name=castalData,proto3" json:"castalData,omitempty"`
	//建筑合成信息
	BuildingMergeData *BuildingMergeData `protobuf:"bytes,37,opt,name=buildingMergeData,proto3" json:"buildingMergeData,omitempty"`
	//事件记录数据
	EventRecordData *EventRecordData `protobuf:"bytes,38,opt,name=eventRecordData,proto3" json:"eventRecordData,omitempty"`
	//功能建筑泡泡数据
	FunctionMapBubbleData *FunctionMapBubbleData `protobuf:"bytes,39,opt,name=functionMapBubbleData,proto3" json:"functionMapBubbleData,omitempty"`
	//素材兑换活动
	ExchangeActivityData *ExchangeActivityData `protobuf:"bytes,40,opt,name=exchangeActivityData,proto3" json:"exchangeActivityData,omitempty"`
	//活动产出
	EventOutPutData *EventOutPutData `protobuf:"bytes,41,opt,name=eventOutPutData,proto3" json:"eventOutPutData,omitempty"`
	//玩家的统计数据
	StatisticsData *StatisticsData `protobuf:"bytes,42,opt,name=statisticsData,proto3" json:"statisticsData,omitempty"`
	//玩家的评价数据
	ReatData *ReatData `protobuf:"bytes,43,opt,name=reatData,proto3" json:"reatData,omitempty"`
	//收集棋子活动
	CollectPiecesActivityData *CollectPiecesActivityData `protobuf:"bytes,44,opt,name=CollectPiecesActivityData,proto3" json:"CollectPiecesActivityData,omitempty"`
	//当前关卡的AB测试配置
	LevelABConfigData *LevelABConfigData `protobuf:"bytes,45,opt,name=LevelABConfigData,proto3" json:"LevelABConfigData,omitempty"`
	//存钱罐活动
	PiggyBankData *PiggyBankData `protobuf:"bytes,46,opt,name=PiggyBankData,proto3" json:"PiggyBankData,omitempty"`
	//玩家的AB测试数据
	FunctionABConfigData *FunctionABConfigData `protobuf:"bytes,47,opt,name=FunctionABConfigData,proto3" json:"FunctionABConfigData,omitempty"`
	//公会数据
	ClubData *ClubData `protobuf:"bytes,48,opt,name=ClubData,proto3" json:"ClubData,omitempty"`
	//新满级玩法
	NewMaxLevelData *NewMaxLevelData `protobuf:"bytes,49,opt,name=NewMaxLevelData,proto3" json:"NewMaxLevelData,omitempty"`
	//时间宝箱
	UITimeBoxData *UITimeBoxData `protobuf:"bytes,50,opt,name=UITimeBoxData,proto3" json:"UITimeBoxData,omitempty"`
	//回归奖励
	ReturnRewardData *ReturnRewardData `protobuf:"bytes,51,opt,name=ReturnRewardData,proto3" json:"ReturnRewardData,omitempty"`
	//公会活动
	ClubActivityData *ClubActivityData `protobuf:"bytes,52,opt,name=ClubActivityData,proto3" json:"ClubActivityData,omitempty"`
	//调查问卷
	QuestionnaireData *QuestionnaireData `protobuf:"bytes,53,opt,name=QuestionnaireData,proto3" json:"QuestionnaireData,omitempty"`
	//魔力值
	MagicData *MagicData `protobuf:"bytes,54,opt,name=MagicData,proto3" json:"MagicData,omitempty"`
	//玩家本地邮件的数据
	MailData *LocalMailData `protobuf:"bytes,55,opt,name=MailData,proto3" json:"MailData,omitempty"`
	//新岛屿解锁数据
	NewLandUnLockData *NewLandUnLockData `protobuf:"bytes,56,opt,name=NewLandUnLockData,proto3" json:"NewLandUnLockData,omitempty"`
	//关卡宝箱数据
	LevelBoxData *LevelBoxData `protobuf:"bytes,57,opt,name=levelBoxData,proto3" json:"levelBoxData,omitempty"`
	//Npc wonder数据
	NpcWonderData *NpcWonderData `protobuf:"bytes,58,opt,name=npcWonderData,proto3" json:"npcWonderData,omitempty"`
	//Npc 额外奖励数据
	NpcExtraData *NpcExtraData `protobuf:"bytes,59,opt,name=npcExtraData,proto3" json:"npcExtraData,omitempty"`
	//精英赛数据
	ClassicActivityData *ClassicActivityData `protobuf:"bytes,60,opt,name=ClassicActivityData,proto3" json:"ClassicActivityData,omitempty"`
	//头像数据
	UserHeadData    *UserHeadData    `protobuf:"bytes,61,opt,name=UserHeadData,proto3" json:"UserHeadData,omitempty"`
	ContinueBoxData *ContinueBoxData `protobuf:"bytes,62,opt,name=ContinueBoxData,proto3" json:"ContinueBoxData,omitempty"`
	KeyData         *KeyData         `protobuf:"bytes,63,opt,name=KeyData,proto3" json:"KeyData,omitempty"`
	MergeMoudleData *MergeMoudleData `protobuf:"bytes,64,opt,name=MergeMoudleData,proto3" json:"MergeMoudleData,omitempty"`
	//连胜活动数据
	ContinuePassLevelData *ContinuePassLevelData `protobuf:"bytes,65,opt,name=ContinuePassLevelData,proto3" json:"ContinuePassLevelData,omitempty"`
	//故事礼包
	StoryGiftBoxData *StoryGiftBoxData `protobuf:"bytes,66,opt,name=StoryGiftBoxData,proto3" json:"StoryGiftBoxData,omitempty"`
	//失败礼包
	FailingGiftBoxData *FailingGiftBoxData `protobuf:"bytes,67,opt,name=FailingGiftBoxData,proto3" json:"FailingGiftBoxData,omitempty"`
	//排名活动
	RankActivityData *RankActivityData `protobuf:"bytes,68,opt,name=RankActivityData,proto3" json:"RankActivityData,omitempty"`
	//FanpageLike
	FanPageLikeData *FanPageLikeData `protobuf:"bytes,69,opt,name=FanPageLikeData,proto3" json:"FanPageLikeData,omitempty"`
	//maya活动
	MayaActivityData *MayaActivityData `protobuf:"bytes,70,opt,name=MayaActivityData,proto3" json:"MayaActivityData,omitempty"`
	//teaparty
	TeaPartyActivityData *TeaPartyActivityData `protobuf:"bytes,71,opt,name=TeaPartyActivityData,proto3" json:"TeaPartyActivityData,omitempty"`
	//Race
	RaceActivityData *RaceActivityData `protobuf:"bytes,72,opt,name=RaceActivityData,proto3" json:"RaceActivityData,omitempty"`
}

func (x *PlayerData) Reset() {
	*x = PlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userdata_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerData) ProtoMessage() {}

func (x *PlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_userdata_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerData.ProtoReflect.Descriptor instead.
func (*PlayerData) Descriptor() ([]byte, []int) {
	return file_userdata_proto_rawDescGZIP(), []int{51}
}

func (x *PlayerData) GetBaseData() *BaseData {
	if x != nil {
		return x.BaseData
	}
	return nil
}

func (x *PlayerData) GetExpData() *ExpData {
	if x != nil {
		return x.ExpData
	}
	return nil
}

func (x *PlayerData) GetMoneyData() *MoneyData {
	if x != nil {
		return x.MoneyData
	}
	return nil
}

func (x *PlayerData) GetHeartData() *HeartData {
	if x != nil {
		return x.HeartData
	}
	return nil
}

func (x *PlayerData) GetLevelData() *LevelData {
	if x != nil {
		return x.LevelData
	}
	return nil
}

func (x *PlayerData) GetItemData() *ItemData {
	if x != nil {
		return x.ItemData
	}
	return nil
}

func (x *PlayerData) GetBubbleData() *BubbleData {
	if x != nil {
		return x.BubbleData
	}
	return nil
}

func (x *PlayerData) GetBasketData() *BasketData {
	if x != nil {
		return x.BasketData
	}
	return nil
}

func (x *PlayerData) GetMapBuildingData() *MapBuildingData {
	if x != nil {
		return x.MapBuildingData
	}
	return nil
}

func (x *PlayerData) GetBuildingMergeCounter() *BuildingMergeCounter {
	if x != nil {
		return x.BuildingMergeCounter
	}
	return nil
}

func (x *PlayerData) GetNewBuildingNotices() *NewBuildingNotices {
	if x != nil {
		return x.NewBuildingNotices
	}
	return nil
}

func (x *PlayerData) GetMapGridSprites() *MapGridSprites {
	if x != nil {
		return x.MapGridSprites
	}
	return nil
}

func (x *PlayerData) GetMergeShopData() *MergeShopData {
	if x != nil {
		return x.MergeShopData
	}
	return nil
}

func (x *PlayerData) GetSystemSettingData() *SystemSetting {
	if x != nil {
		return x.SystemSettingData
	}
	return nil
}

func (x *PlayerData) GetCameraData() *CameraData {
	if x != nil {
		return x.CameraData
	}
	return nil
}

func (x *PlayerData) GetIllustrationData() *IllustrationData {
	if x != nil {
		return x.IllustrationData
	}
	return nil
}

func (x *PlayerData) GetTaskData() *TaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *PlayerData) GetSignData() *SigninData {
	if x != nil {
		return x.SignData
	}
	return nil
}

func (x *PlayerData) GetActivityData() *ActivityData {
	if x != nil {
		return x.ActivityData
	}
	return nil
}

func (x *PlayerData) GetPayShopData() *PayShopData {
	if x != nil {
		return x.PayShopData
	}
	return nil
}

func (x *PlayerData) GetBuyData() *BuyData {
	if x != nil {
		return x.BuyData
	}
	return nil
}

func (x *PlayerData) GetProduceStateData() *ProduceStateData {
	if x != nil {
		return x.ProduceStateData
	}
	return nil
}

func (x *PlayerData) GetAchievementData() *AchievementData {
	if x != nil {
		return x.AchievementData
	}
	return nil
}

func (x *PlayerData) GetGameEndBalaceData() *GameEndBalaceData {
	if x != nil {
		return x.GameEndBalaceData
	}
	return nil
}

func (x *PlayerData) GetFriendLocalData() *FriendLocalData {
	if x != nil {
		return x.FriendLocalData
	}
	return nil
}

func (x *PlayerData) GetNPCData() *NPCData {
	if x != nil {
		return x.NPCData
	}
	return nil
}

func (x *PlayerData) GetLandUnLockData() *LandUnLockData {
	if x != nil {
		return x.LandUnLockData
	}
	return nil
}

func (x *PlayerData) GetFlotageData() *FlotageData {
	if x != nil {
		return x.FlotageData
	}
	return nil
}

func (x *PlayerData) GetMaxLevelActivityData() *MaxLevelActivityData {
	if x != nil {
		return x.MaxLevelActivityData
	}
	return nil
}

func (x *PlayerData) GetCollectBookData() *CollectBookData {
	if x != nil {
		return x.CollectBookData
	}
	return nil
}

func (x *PlayerData) GetGamePlotData() *GamePlotData {
	if x != nil {
		return x.GamePlotData
	}
	return nil
}

func (x *PlayerData) GetNoviceGuideData() *NoviceGuideData {
	if x != nil {
		return x.NoviceGuideData
	}
	return nil
}

func (x *PlayerData) GetMaterialOutPutActivityData() *MaterialOutPutActivityData {
	if x != nil {
		return x.MaterialOutPutActivityData
	}
	return nil
}

func (x *PlayerData) GetCastalData() *CastalData {
	if x != nil {
		return x.CastalData
	}
	return nil
}

func (x *PlayerData) GetBuildingMergeData() *BuildingMergeData {
	if x != nil {
		return x.BuildingMergeData
	}
	return nil
}

func (x *PlayerData) GetEventRecordData() *EventRecordData {
	if x != nil {
		return x.EventRecordData
	}
	return nil
}

func (x *PlayerData) GetFunctionMapBubbleData() *FunctionMapBubbleData {
	if x != nil {
		return x.FunctionMapBubbleData
	}
	return nil
}

func (x *PlayerData) GetExchangeActivityData() *ExchangeActivityData {
	if x != nil {
		return x.ExchangeActivityData
	}
	return nil
}

func (x *PlayerData) GetEventOutPutData() *EventOutPutData {
	if x != nil {
		return x.EventOutPutData
	}
	return nil
}

func (x *PlayerData) GetStatisticsData() *StatisticsData {
	if x != nil {
		return x.StatisticsData
	}
	return nil
}

func (x *PlayerData) GetReatData() *ReatData {
	if x != nil {
		return x.ReatData
	}
	return nil
}

func (x *PlayerData) GetCollectPiecesActivityData() *CollectPiecesActivityData {
	if x != nil {
		return x.CollectPiecesActivityData
	}
	return nil
}

func (x *PlayerData) GetLevelABConfigData() *LevelABConfigData {
	if x != nil {
		return x.LevelABConfigData
	}
	return nil
}

func (x *PlayerData) GetPiggyBankData() *PiggyBankData {
	if x != nil {
		return x.PiggyBankData
	}
	return nil
}

func (x *PlayerData) GetFunctionABConfigData() *FunctionABConfigData {
	if x != nil {
		return x.FunctionABConfigData
	}
	return nil
}

func (x *PlayerData) GetClubData() *ClubData {
	if x != nil {
		return x.ClubData
	}
	return nil
}

func (x *PlayerData) GetNewMaxLevelData() *NewMaxLevelData {
	if x != nil {
		return x.NewMaxLevelData
	}
	return nil
}

func (x *PlayerData) GetUITimeBoxData() *UITimeBoxData {
	if x != nil {
		return x.UITimeBoxData
	}
	return nil
}

func (x *PlayerData) GetReturnRewardData() *ReturnRewardData {
	if x != nil {
		return x.ReturnRewardData
	}
	return nil
}

func (x *PlayerData) GetClubActivityData() *ClubActivityData {
	if x != nil {
		return x.ClubActivityData
	}
	return nil
}

func (x *PlayerData) GetQuestionnaireData() *QuestionnaireData {
	if x != nil {
		return x.QuestionnaireData
	}
	return nil
}

func (x *PlayerData) GetMagicData() *MagicData {
	if x != nil {
		return x.MagicData
	}
	return nil
}

func (x *PlayerData) GetMailData() *LocalMailData {
	if x != nil {
		return x.MailData
	}
	return nil
}

func (x *PlayerData) GetNewLandUnLockData() *NewLandUnLockData {
	if x != nil {
		return x.NewLandUnLockData
	}
	return nil
}

func (x *PlayerData) GetLevelBoxData() *LevelBoxData {
	if x != nil {
		return x.LevelBoxData
	}
	return nil
}

func (x *PlayerData) GetNpcWonderData() *NpcWonderData {
	if x != nil {
		return x.NpcWonderData
	}
	return nil
}

func (x *PlayerData) GetNpcExtraData() *NpcExtraData {
	if x != nil {
		return x.NpcExtraData
	}
	return nil
}

func (x *PlayerData) GetClassicActivityData() *ClassicActivityData {
	if x != nil {
		return x.ClassicActivityData
	}
	return nil
}

func (x *PlayerData) GetUserHeadData() *UserHeadData {
	if x != nil {
		return x.UserHeadData
	}
	return nil
}

func (x *PlayerData) GetContinueBoxData() *ContinueBoxData {
	if x != nil {
		return x.ContinueBoxData
	}
	return nil
}

func (x *PlayerData) GetKeyData() *KeyData {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *PlayerData) GetMergeMoudleData() *MergeMoudleData {
	if x != nil {
		return x.MergeMoudleData
	}
	return nil
}

func (x *PlayerData) GetContinuePassLevelData() *ContinuePassLevelData {
	if x != nil {
		return x.ContinuePassLevelData
	}
	return nil
}

func (x *PlayerData) GetStoryGiftBoxData() *StoryGiftBoxData {
	if x != nil {
		return x.StoryGiftBoxData
	}
	return nil
}

func (x *PlayerData) GetFailingGiftBoxData() *FailingGiftBoxData {
	if x != nil {
		return x.FailingGiftBoxData
	}
	return nil
}

func (x *PlayerData) GetRankActivityData() *RankActivityData {
	if x != nil {
		return x.RankActivityData
	}
	return nil
}

func (x *PlayerData) GetFanPageLikeData() *FanPageLikeData {
	if x != nil {
		return x.FanPageLikeData
	}
	return nil
}

func (x *PlayerData) GetMayaActivityData() *MayaActivityData {
	if x != nil {
		return x.MayaActivityData
	}
	return nil
}

func (x *PlayerData) GetTeaPartyActivityData() *TeaPartyActivityData {
	if x != nil {
		return x.TeaPartyActivityData
	}
	return nil
}

func (x *PlayerData) GetRaceActivityData() *RaceActivityData {
	if x != nil {
		return x.RaceActivityData
	}
	return nil
}

var File_userdata_proto protoreflect.FileDescriptor

var file_userdata_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x61, 0x62, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x72, 0x61, 0x6e, 0x6b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf6,
	0x01, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x64, 0x64, 0x75, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x75, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x44,
	0x61, 0x79, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x64, 0x64, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x64, 0x64, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x75, 0x70, 0x53, 0x69, 0x67, 0x6e,
	0x44, 0x61, 0x79, 0x73, 0x33, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x64,
	0x64, 0x75, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x33, 0x30, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x64, 0x64, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x33, 0x30,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x64, 0x64, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x33, 0x30, 0x22, 0xec, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x53, 0x68, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x0a, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x53, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x0e, 0x70, 0x69, 0x65, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x69, 0x65, 0x63, 0x65, 0x53, 0x68, 0x6f,
	0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x68, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x53, 0x68, 0x6f, 0x70, 0x22, 0xcd, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x53, 0x68, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x62, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x41, 0x68,
	0x65, 0x61, 0x64, 0x42, 0x75, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x41, 0x68, 0x65, 0x61, 0x64, 0x42, 0x75, 0x79, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0x6d, 0x0a, 0x11, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53,
	0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0xef, 0x03, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x73, 0x12,
	0x2d, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c,
	0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x41, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x41, 0x63, 0x74, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36,
	0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x74,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x12, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x14, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x41, 0x0a, 0x13, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x9a, 0x02, 0x0a, 0x08, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67,
	0x65, 0x74, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x47, 0x69, 0x66, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x47, 0x69,
	0x66, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x42, 0x75, 0x79, 0x53,
	0x68, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x42, 0x75,
	0x79, 0x53, 0x68, 0x6f, 0x77, 0x22, 0xc0, 0x05, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c,
	0x0a, 0x19, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x69, 0x6e, 0x50,
	0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x69, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x75, 0x72, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x75, 0x72, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x68, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x54, 0x68, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x6e, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6e, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x34,
	0x0a, 0x15, 0x68, 0x65, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x77, 0x4d, 0x61, 0x78, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x6f,
	0x77, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x14,
	0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x44,
	0x12, 0x32, 0x0a, 0x14, 0x74, 0x77, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x44, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14,
	0x74, 0x77, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x44, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x17, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x36,
	0x0a, 0x16, 0x74, 0x68, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x44, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x16,
	0x74, 0x68, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x44, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4a, 0x0a, 0x20, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x20, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6e, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x6e, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x9f, 0x02, 0x0a, 0x1a, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c,
	0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x73, 0x43, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x43,
	0x44, 0x12, 0x41, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0c, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x6f, 0x77,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd0, 0x04, 0x0a, 0x0d, 0x50,
	0x69, 0x67, 0x67, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x43, 0x44, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x43, 0x44, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75,
	0x72, 0x41, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x75, 0x72, 0x41, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x53, 0x68,
	0x6f, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53,
	0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x64, 0x69, 0x66, 0x66, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x1a, 0x64, 0x69, 0x66, 0x66, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x41, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x41, 0x63, 0x74, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x42, 0x75,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x42, 0x75, 0x79, 0x12, 0x3a, 0x0a,
	0x18, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x4a, 0x61, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x4a, 0x61, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x69, 0x67,
	0x67, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x70, 0x69, 0x67, 0x67, 0x79, 0x42, 0x61,
	0x6e, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xf1, 0x02,
	0x0a, 0x0f, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x16, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x77,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6e, 0x6f, 0x77, 0x46, 0x69, 0x78, 0x65, 0x64, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x61,
	0x6e, 0x64, 0x4c, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x64, 0x4c, 0x61, 0x63, 0x6b, 0x12, 0x34, 0x0a,
	0x15, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x47, 0x72,
	0x69, 0x64, 0x4c, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x69, 0x64, 0x4c,
	0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x46, 0x72,
	0x65, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x61,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x46, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x34, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x55, 0x70, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x61, 0x64, 0x64, 0x55, 0x70, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x73,
	0x65, 0x4f, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x75,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x73,
	0x65, 0x4f, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x75,
	0x6d, 0x22, 0x46, 0x0a, 0x1c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xbb, 0x02, 0x0a, 0x0b, 0x50, 0x61,
	0x79, 0x53, 0x68, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x08, 0x70, 0x61, 0x79,
	0x53, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x61,
	0x79, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x08, 0x70, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x77, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x49, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x6f, 0x77, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x49, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x49, 0x63,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x49, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x73, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x49, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x69, 0x73, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x49, 0x63,
	0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x6d, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x53, 0x68,
	0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x24, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xf5, 0x01, 0x0a,
	0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x4e, 0x75, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x47, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x55, 0x6e, 0x4c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x55,
	0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a,
	0x08, 0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xc1, 0x03, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6d,
	0x61, 0x78, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x70, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x6d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0c, 0x65, 0x6e, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x73,
	0x12, 0x34, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x63, 0x75, 0x72,
	0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x54, 0x6f, 0x4b,
	0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72,
	0x54, 0x6f, 0x4b, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x22, 0x34, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x65, 0x61, 0x74, 0x22, 0xdf,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x52, 0x65, 0x61, 0x74, 0x52, 0x08, 0x72, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32,
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x75, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x48, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x73, 0x48, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73,
	0x48, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x48, 0x69, 0x74,
	0x22, 0x88, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x38, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x0d,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x75, 0x72, 0x50, 0x6f, 0x70, 0x55, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x75, 0x72, 0x50, 0x6f, 0x70,
	0x55, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x75, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x75, 0x72, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x44, 0x22, 0xca, 0x06, 0x0a, 0x08,
	0x43, 0x6c, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x70, 0x72, 0x65, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x24,
	0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x70,
	0x53, 0x68, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x55, 0x74, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x68, 0x65, 0x6c, 0x70, 0x55, 0x74, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x77,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x71, 0x48, 0x65, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x48, 0x65, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x26,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x72, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x3a, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x35, 0x0a, 0x0e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x37, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x0b, 0x6d, 0x79, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70,
	0x73, 0x49, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x48, 0x65, 0x6c, 0x70, 0x73, 0x49, 0x64, 0x73, 0x22, 0xb7, 0x03, 0x0a, 0x0f, 0x4e, 0x65, 0x77,
	0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x55,
	0x49, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x65,
	0x55, 0x49, 0x12, 0x2f, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x61,
	0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x65, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x68, 0x65,
	0x61, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x55, 0x49, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x55, 0x49, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x4d, 0x61, 0x78, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x4d, 0x61, 0x78, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x11, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x0d, 0x62, 0x6f, 0x78,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x0d, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x50, 0x61, 0x74, 0x68, 0x22, 0x97, 0x01, 0x0a,
	0x0f, 0x42, 0x61, 0x73, 0x65, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f,
	0x78, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x32, 0x0a, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x47, 0x69, 0x66, 0x74, 0x42,
	0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67,
	0x69, 0x66, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x73, 0x42, 0x75, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73,
	0x42, 0x75, 0x79, 0x22, 0x67, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x66, 0x74,
	0x42, 0x6f, 0x78, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6e, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x5b, 0x0a, 0x0e,
	0x46, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x12, 0x2f,
	0x0a, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x66, 0x74, 0x42,
	0x6f, 0x78, 0x52, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x44, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b,
	0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78,
	0x41, 0x63, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e,
	0x64, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x41, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x10, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x66,
	0x74, 0x42, 0x6f, 0x78, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x66, 0x74, 0x42,
	0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47,
	0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x66, 0x74,
	0x42, 0x6f, 0x78, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xbc, 0x01, 0x0a,
	0x12, 0x46, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x69,
	0x66, 0x74, 0x42, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x52, 0x0e, 0x66, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x12, 0x3d, 0x0a, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x41, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e,
	0x64, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x41, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6e,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x22, 0xb3, 0x03, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x42, 0x0a, 0x10, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6f, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x10, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6f, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x41, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x70, 0x75,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x17, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x42, 0x75,
	0x79, 0x50, 0x61, 0x79, 0x42, 0x6f, 0x78, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x17, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x42, 0x75, 0x79,
	0x50, 0x61, 0x79, 0x42, 0x6f, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x75, 0x79, 0x4e, 0x75,
	0x6d, 0x22, 0xaf, 0x02, 0x0a, 0x10, 0x4d, 0x61, 0x79, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e,
	0x6f, 0x77, 0x41, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x79, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x61, 0x79, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x2a,
	0x0a, 0x10, 0x69, 0x73, 0x42, 0x75, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x42, 0x75, 0x79, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x61, 0x79,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x50,
	0x6f, 0x70, 0x75, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x54,
	0x69, 0x70, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x0e, 0x4d, 0x61, 0x79, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4d, 0x61, 0x79, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x44, 0x12, 0x38, 0x0a, 0x17, 0x6d, 0x61, 0x79, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x17, 0x6d, 0x61, 0x79, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x18, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x75,
	0x74, 0x50, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x18, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x75,
	0x74, 0x50, 0x75, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x77, 0x0a, 0x0e, 0x4d,
	0x61, 0x79, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x04, 0x6d,
	0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x04, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x47, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x47, 0x65, 0x74, 0x22, 0x61, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a,
	0x0b, 0x62, 0x6f, 0x78, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x62, 0x6f, 0x78, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x22, 0x8d, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4e, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6e,
	0x6f, 0x77, 0x41, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x16, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x41, 0x42,
	0x54, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x41,
	0x42, 0x54, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x41, 0x42, 0x54, 0x65,
	0x73, 0x74, 0x33, 0x39, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x41,
	0x42, 0x54, 0x65, 0x73, 0x74, 0x33, 0x39, 0x22, 0x63, 0x0a, 0x0b, 0x52, 0x65, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xef, 0x01, 0x0a,
	0x0f, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x32,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x70,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0d, 0x73, 0x74, 0x65, 0x70, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x65, 0x70, 0x22, 0xaa,
	0x0a, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x62, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x68, 0x6f,
	0x77, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x49, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69,
	0x73, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x49, 0x12, 0x38, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x47, 0x65, 0x74, 0x52,
	0x77, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x47, 0x65, 0x74,
	0x52, 0x77, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x47, 0x65,
	0x74, 0x52, 0x77, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x47, 0x65, 0x74, 0x52, 0x77, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x52, 0x77, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x52, 0x77, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x74, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x74, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x55, 0x74, 0x63, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x55, 0x74, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x55, 0x74, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x68, 0x6f,
	0x77, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x55, 0x74, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x09, 0x72, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x61,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x61,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x64,
	0x64, 0x49, 0x44, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x49, 0x44,
	0x73, 0x12, 0x40, 0x0a, 0x14, 0x72, 0x65, 0x69, 0x73, 0x73, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x52, 0x65, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x72,
	0x65, 0x69, 0x73, 0x73, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x31, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x31, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x32, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x32, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x65, 0x70, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x11, 0x73, 0x74, 0x65, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x47, 0x65, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44,
	0x72, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x72, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x12, 0x4c, 0x0a, 0x18, 0x73, 0x74, 0x65, 0x70, 0x52,
	0x65, 0x69, 0x73, 0x73, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x74, 0x65, 0x70,
	0x52, 0x65, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x18, 0x73, 0x74, 0x65,
	0x70, 0x52, 0x65, 0x69, 0x73, 0x73, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69,
	0x73, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x6e, 0x6f, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x61, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x4e,
	0x65, 0x65, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x61, 0x6c, 0x6c,
	0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xed, 0x03, 0x0a, 0x0f,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x64, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x4d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x6f, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x47, 0x69, 0x76, 0x65, 0x41,
	0x6c, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x47, 0x69,
	0x76, 0x65, 0x41, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x69, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12,
	0x30, 0x0a, 0x13, 0x69, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4d, 0x6f, 0x75, 0x64, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x73,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x75, 0x64, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x67,
	0x49, 0x73, 0x4f, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x67, 0x49, 0x73, 0x4f, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x73, 0x4e, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4f, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x69, 0x73, 0x4e, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4f, 0x6b, 0x12,
	0x28, 0x0a, 0x0f, 0x69, 0x73, 0x4e, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6c, 0x6c,
	0x4f, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x73, 0x4e, 0x70, 0x63, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x6c, 0x6c, 0x4f, 0x6b, 0x12, 0x36, 0x0a, 0x16, 0x6f, 0x6c, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x4e, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6f, 0x6c, 0x64, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x65,
	0x77, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x73, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x22, 0xe7, 0x04, 0x0a, 0x10,
	0x52, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x73, 0x79, 0x6e, 0x63, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x73, 0x79, 0x6e, 0x63, 0x6d, 0x65, 0x64,
	0x61, 0x6c, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x61,
	0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x77, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68,
	0x61, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x77, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53,
	0x68, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x49, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x49, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x65,
	0x64, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x77, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x77, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x0f, 0x46, 0x61, 0x6e, 0x50, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x68,
	0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x77, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x77, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x68, 0x6f, 0x77, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x61,
	0x6e, 0x64, 0x46, 0x42, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x42, 0x61, 0x6e, 0x64, 0x46, 0x42, 0x22, 0xb0, 0x03, 0x0a, 0x14, 0x54, 0x65, 0x61, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x49,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4f, 0x70,
	0x65, 0x6e, 0x55, 0x49, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52, 0x77, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52, 0x77,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x6e, 0x55, 0x49, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x55, 0x49, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x74, 0x65, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x73, 0x41, 0x63, 0x74, 0x45,
	0x6e, 0x64, 0x46, 0x6c, 0x79, 0x54, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x69, 0x73, 0x41, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x46, 0x6c, 0x79, 0x54,
	0x6f, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xf6, 0x05, 0x0a, 0x10, 0x52,
	0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3a, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x55, 0x49, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x61,
	0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x73, 0x55, 0x49, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x77, 0x52, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x77,
	0x52, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4f, 0x70, 0x65,
	0x6e, 0x55, 0x49, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x68, 0x6f,
	0x77, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x49, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x73, 0x79,
	0x6e, 0x63, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e,
	0x6f, 0x74, 0x73, 0x79, 0x6e, 0x63, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x69, 0x73, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x68, 0x6f, 0x77,
	0x54, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x73, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x70, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x2a, 0x0a, 0x10, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x73, 0x53, 0x65, 0x6c,
	0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x47, 0x65, 0x74, 0x52, 0x77, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x47, 0x65, 0x74, 0x52, 0x77,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x65, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x77,
	0x69, 0x74, 0x68, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x74, 0x63, 0x22, 0xa2, 0x1f, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x25, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x78, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x65, 0x78, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a,
	0x09, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x28, 0x0a, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2b, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f,
	0x6d, 0x61, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x14, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x14, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x47,
	0x72, 0x69, 0x64, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x69, 0x64, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x47, 0x72, 0x69, 0x64, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x53, 0x68, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53,
	0x68, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3d, 0x0a, 0x10, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x49,
	0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x10, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x25, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x31, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x61, 0x79, 0x53,
	0x68, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x42, 0x75, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x07, 0x62, 0x75, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x22, 0x0a, 0x07, 0x6e, 0x50, 0x43, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4e, 0x50, 0x43, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6e, 0x50,
	0x43, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x4c,
	0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e,
	0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e,
	0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x6c, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49,
	0x0a, 0x14, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x6f,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65,
	0x50, 0x6c, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x6e, 0x6f, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0f, 0x6e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x1a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4f,
	0x75, 0x74, 0x50, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0a, 0x63, 0x61, 0x73, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40,
	0x0a, 0x11, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3a, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x15,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x42, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x15, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70,
	0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x14, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x14, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75,
	0x74, 0x50, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x37, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x08, 0x72, 0x65,
	0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52,
	0x65, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x61, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x58, 0x0a, 0x19, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x69, 0x65, 0x63,
	0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x69,
	0x65, 0x63, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x19, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x11, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x41, 0x42, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x42,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x41, 0x42, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a,
	0x0d, 0x50, 0x69, 0x67, 0x67, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x69, 0x67, 0x67, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x50, 0x69, 0x67, 0x67, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x14, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x42, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x42, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x42, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x08, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x43, 0x6c, 0x75,
	0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x78, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0f, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x34, 0x0a, 0x0d, 0x55, 0x49, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x55, 0x49, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x55, 0x49, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x62, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x10, 0x43, 0x6c, 0x75, 0x62, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x09, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x61, 0x67,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x69, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a,
	0x11, 0x4e, 0x65, 0x77, 0x4c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4e, 0x65, 0x77, 0x4c, 0x61,
	0x6e, 0x64, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x4e, 0x65,
	0x77, 0x4c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x31, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x34, 0x0a, 0x0d, 0x6e, 0x70, 0x63, 0x57, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x70, 0x63, 0x57,
	0x6f, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6e, 0x70, 0x63, 0x57, 0x6f,
	0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0c, 0x6e, 0x70, 0x63, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x4e, 0x70, 0x63, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6e,
	0x70, 0x63, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x13, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x42, 0x6f, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x22, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x4b,
	0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d,
	0x6f, 0x75, 0x64, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x64, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x64, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4c, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3d, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x79, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x53,
	0x74, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x12, 0x46, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x12, 0x46, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x69, 0x66, 0x74, 0x42, 0x6f, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x10, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x46, 0x61, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46,
	0x61, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f,
	0x46, 0x61, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3d, 0x0a, 0x10, 0x4d, 0x61, 0x79, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x61, 0x79, 0x61,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x4d, 0x61,
	0x79, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49,
	0x0a, 0x14, 0x54, 0x65, 0x61, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54,
	0x65, 0x61, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x14, 0x54, 0x65, 0x61, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x10, 0x52, 0x61, 0x63,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x48, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x52, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x48, 0x01, 0x5a, 0x06, 0x2e, 0x2f,
	0x3b, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x0a, 0x4d, 0x4d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_userdata_proto_rawDescOnce sync.Once
	file_userdata_proto_rawDescData = file_userdata_proto_rawDesc
)

func file_userdata_proto_rawDescGZIP() []byte {
	file_userdata_proto_rawDescOnce.Do(func() {
		file_userdata_proto_rawDescData = protoimpl.X.CompressGZIP(file_userdata_proto_rawDescData)
	})
	return file_userdata_proto_rawDescData
}

var file_userdata_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_userdata_proto_goTypes = []interface{}{
	(*SigninData)(nil),                    // 0: SigninData
	(*MergeShopData)(nil),                 // 1: MergeShopData
	(*LimitShop)(nil),                     // 2: LimitShop
	(*LimitShopItemData)(nil),             // 3: LimitShopItemData
	(*ActivityData)(nil),                  // 4: ActivityData
	(*ActivityDotData)(nil),               // 5: ActivityDotData
	(*ActivityLocalNotficationData)(nil),  // 6: ActivityLocalNotficationData
	(*CurrentActRoundData)(nil),           // 7: CurrentActRoundData
	(*Activity)(nil),                      // 8: Activity
	(*MaxLevelActivityData)(nil),          // 9: MaxLevelActivityData
	(*MaterialOutPutActivityData)(nil),    // 10: MaterialOutPutActivityData
	(*PiggyBankData)(nil),                 // 11: PiggyBankData
	(*NoviceGuideData)(nil),               // 12: NoviceGuideData
	(*MaterialActivityRandomWeight)(nil),  // 13: MaterialActivityRandomWeight
	(*PayShopData)(nil),                   // 14: PayShopData
	(*PayShop)(nil),                       // 15: PayShop
	(*ProduceStateData)(nil),              // 16: ProduceStateData
	(*ExchangeActivity)(nil),              // 17: ExchangeActivity
	(*UserHeadData)(nil),                  // 18: UserHeadData
	(*HeadData)(nil),                      // 19: HeadData
	(*ExchangeActivityTable)(nil),         // 20: ExchangeActivityTable
	(*ExchangeActivityData)(nil),          // 21: ExchangeActivityData
	(*Reat)(nil),                          // 22: Reat
	(*ReatData)(nil),                      // 23: ReatData
	(*ReturnRewardData)(nil),              // 24: ReturnRewardData
	(*LocalChatInfo)(nil),                 // 25: LocalChatInfo
	(*QuestionnaireData)(nil),             // 26: QuestionnaireData
	(*ClubData)(nil),                      // 27: ClubData
	(*NewMaxLevelData)(nil),               // 28: NewMaxLevelData
	(*ClassicActivityData)(nil),           // 29: ClassicActivityData
	(*GiftBoxRewardData)(nil),             // 30: GiftBoxRewardData
	(*BaseGiftBoxData)(nil),               // 31: BaseGiftBoxData
	(*TimeLimitGiftBoxData)(nil),          // 32: TimeLimitGiftBoxData
	(*StoryGiftBox)(nil),                  // 33: StoryGiftBox
	(*FailingGiftBox)(nil),                // 34: FailingGiftBox
	(*StoryGiftBoxData)(nil),              // 35: StoryGiftBoxData
	(*FailingGiftBoxData)(nil),            // 36: FailingGiftBoxData
	(*ContinueBoxData)(nil),               // 37: ContinueBoxData
	(*MayaActivityData)(nil),              // 38: MayaActivityData
	(*MayaConfigData)(nil),                // 39: MayaConfigData
	(*MayaRewardData)(nil),                // 40: MayaRewardData
	(*ContinueBoxConfigData)(nil),         // 41: ContinueBoxConfigData
	(*ContinuePassLevelData)(nil),         // 42: ContinuePassLevelData
	(*ReissueData)(nil),                   // 43: ReissueData
	(*StepReissueData)(nil),               // 44: StepReissueData
	(*ClubActivityData)(nil),              // 45: ClubActivityData
	(*MergeMoudleData)(nil),               // 46: MergeMoudleData
	(*RankActivityData)(nil),              // 47: RankActivityData
	(*FanPageLikeData)(nil),               // 48: FanPageLikeData
	(*TeaPartyActivityData)(nil),          // 49: TeaPartyActivityData
	(*RaceActivityData)(nil),              // 50: RaceActivityData
	(*PlayerData)(nil),                    // 51: PlayerData
	(*MaterialJson)(nil),                  // 52: MaterialJson
	(*GuildRespHelp)(nil),                 // 53: GuildRespHelp
	(*GuildBaseInfo)(nil),                 // 54: GuildBaseInfo
	(*UserBaseInfo)(nil),                  // 55: UserBaseInfo
	(*GuildInfo)(nil),                     // 56: GuildInfo
	(*RankUserBaseInfo)(nil),              // 57: RankUserBaseInfo
	(*GuildActLevel)(nil),                 // 58: GuildActLevel
	(GuildActivityStatusCode)(0),          // 59: GuildActivityStatusCode
	(*GuildActivityRankUserBaseInfo)(nil), // 60: GuildActivityRankUserBaseInfo
	(*RankActivityUserInfo)(nil),          // 61: RankActivityUserInfo
	(*RaceLevelActivityInfo)(nil),         // 62: RaceLevelActivityInfo
	(*ActivityGroupInfo)(nil),             // 63: ActivityGroupInfo
	(*GroupMemberInfo)(nil),               // 64: GroupMemberInfo
	(*BaseData)(nil),                      // 65: BaseData
	(*ExpData)(nil),                       // 66: ExpData
	(*MoneyData)(nil),                     // 67: MoneyData
	(*HeartData)(nil),                     // 68: HeartData
	(*LevelData)(nil),                     // 69: LevelData
	(*ItemData)(nil),                      // 70: ItemData
	(*BubbleData)(nil),                    // 71: BubbleData
	(*BasketData)(nil),                    // 72: BasketData
	(*MapBuildingData)(nil),               // 73: MapBuildingData
	(*BuildingMergeCounter)(nil),          // 74: BuildingMergeCounter
	(*NewBuildingNotices)(nil),            // 75: NewBuildingNotices
	(*MapGridSprites)(nil),                // 76: MapGridSprites
	(*SystemSetting)(nil),                 // 77: SystemSetting
	(*CameraData)(nil),                    // 78: CameraData
	(*IllustrationData)(nil),              // 79: IllustrationData
	(*TaskData)(nil),                      // 80: TaskData
	(*BuyData)(nil),                       // 81: BuyData
	(*AchievementData)(nil),               // 82: AchievementData
	(*GameEndBalaceData)(nil),             // 83: GameEndBalaceData
	(*FriendLocalData)(nil),               // 84: FriendLocalData
	(*NPCData)(nil),                       // 85: NPCData
	(*LandUnLockData)(nil),                // 86: LandUnLockData
	(*FlotageData)(nil),                   // 87: FlotageData
	(*CollectBookData)(nil),               // 88: CollectBookData
	(*GamePlotData)(nil),                  // 89: GamePlotData
	(*CastalData)(nil),                    // 90: CastalData
	(*BuildingMergeData)(nil),             // 91: BuildingMergeData
	(*EventRecordData)(nil),               // 92: EventRecordData
	(*FunctionMapBubbleData)(nil),         // 93: FunctionMapBubbleData
	(*EventOutPutData)(nil),               // 94: EventOutPutData
	(*StatisticsData)(nil),                // 95: StatisticsData
	(*CollectPiecesActivityData)(nil),     // 96: CollectPiecesActivityData
	(*LevelABConfigData)(nil),             // 97: LevelABConfigData
	(*FunctionABConfigData)(nil),          // 98: FunctionABConfigData
	(*UITimeBoxData)(nil),                 // 99: UITimeBoxData
	(*MagicData)(nil),                     // 100: MagicData
	(*LocalMailData)(nil),                 // 101: LocalMailData
	(*NewLandUnLockData)(nil),             // 102: NewLandUnLockData
	(*LevelBoxData)(nil),                  // 103: LevelBoxData
	(*NpcWonderData)(nil),                 // 104: NpcWonderData
	(*NpcExtraData)(nil),                  // 105: NpcExtraData
	(*KeyData)(nil),                       // 106: KeyData
}
var file_userdata_proto_depIdxs = []int32{
	2,   // 0: MergeShopData.limitShops:type_name -> LimitShop
	52,  // 1: MergeShopData.pieceShowTimes:type_name -> MaterialJson
	3,   // 2: LimitShop.MaterialData:type_name -> LimitShopItemData
	8,   // 3: ActivityData.activitys:type_name -> Activity
	8,   // 4: ActivityData.endActivitys:type_name -> Activity
	7,   // 5: ActivityData.currentActRoundData:type_name -> CurrentActRoundData
	6,   // 6: ActivityData.actNotficationData:type_name -> ActivityLocalNotficationData
	5,   // 7: ActivityData.allActivityDotData:type_name -> ActivityDotData
	13,  // 8: MaterialOutPutActivityData.RandomWeight:type_name -> MaterialActivityRandomWeight
	52,  // 9: PiggyBankData.extraReward:type_name -> MaterialJson
	15,  // 10: PayShopData.payShops:type_name -> PayShop
	52,  // 11: ExchangeActivity.buyNumList:type_name -> MaterialJson
	19,  // 12: UserHeadData.allUnLockHeadData:type_name -> HeadData
	17,  // 13: ExchangeActivityData.currActivity:type_name -> ExchangeActivity
	17,  // 14: ExchangeActivityData.endActivitys:type_name -> ExchangeActivity
	20,  // 15: ExchangeActivityData.currTable:type_name -> ExchangeActivityTable
	22,  // 16: ReatData.reatData:type_name -> Reat
	53,  // 17: ClubData.hearts:type_name -> GuildRespHelp
	54,  // 18: ClubData.globalGuildRank:type_name -> GuildBaseInfo
	54,  // 19: ClubData.countryGuildRank:type_name -> GuildBaseInfo
	55,  // 20: ClubData.globalUserRank:type_name -> UserBaseInfo
	55,  // 21: ClubData.countryUserRank:type_name -> UserBaseInfo
	54,  // 22: ClubData.recommendGuilds:type_name -> GuildBaseInfo
	56,  // 23: ClubData.myGuildInfo:type_name -> GuildInfo
	25,  // 24: ClubData.chatInfos:type_name -> LocalChatInfo
	57,  // 25: NewMaxLevelData.rankUsers:type_name -> RankUserBaseInfo
	57,  // 26: NewMaxLevelData.endRankUsers:type_name -> RankUserBaseInfo
	52,  // 27: GiftBoxRewardData.boxRewardList:type_name -> MaterialJson
	30,  // 28: BaseGiftBoxData.allRewardList:type_name -> GiftBoxRewardData
	31,  // 29: TimeLimitGiftBoxData.giftBoxData:type_name -> BaseGiftBoxData
	32,  // 30: StoryGiftBox.timeLimitData:type_name -> TimeLimitGiftBoxData
	33,  // 31: FailingGiftBox.giftBoxData:type_name -> StoryGiftBox
	33,  // 32: StoryGiftBoxData.lastEndGiftBoxAct:type_name -> StoryGiftBox
	33,  // 33: StoryGiftBoxData.storyGiftBoxData:type_name -> StoryGiftBox
	34,  // 34: FailingGiftBoxData.failingGiftBox:type_name -> FailingGiftBox
	34,  // 35: FailingGiftBoxData.lastEndGiftBoxAct:type_name -> FailingGiftBox
	41,  // 36: ContinueBoxData.nowActAllBoxData:type_name -> ContinueBoxConfigData
	39,  // 37: MayaActivityData.config:type_name -> MayaConfigData
	40,  // 38: MayaConfigData.allRewardList:type_name -> MayaRewardData
	52,  // 39: MayaRewardData.mats:type_name -> MaterialJson
	31,  // 40: ContinueBoxConfigData.boxBaseData:type_name -> BaseGiftBoxData
	58,  // 41: ClubActivityData.levels:type_name -> GuildActLevel
	59,  // 42: ClubActivityData.statusCode:type_name -> GuildActivityStatusCode
	60,  // 43: ClubActivityData.rankUsers:type_name -> GuildActivityRankUserBaseInfo
	43,  // 44: ClubActivityData.reissueActivityDatas:type_name -> ReissueData
	44,  // 45: ClubActivityData.stepReissueActivityDatas:type_name -> StepReissueData
	61,  // 46: RankActivityData.rankUsers:type_name -> RankActivityUserInfo
	62,  // 47: RaceActivityData.activityInfo:type_name -> RaceLevelActivityInfo
	63,  // 48: RaceActivityData.groupInfo:type_name -> ActivityGroupInfo
	64,  // 49: RaceActivityData.rankUsersUI:type_name -> GroupMemberInfo
	65,  // 50: PlayerData.baseData:type_name -> BaseData
	66,  // 51: PlayerData.expData:type_name -> ExpData
	67,  // 52: PlayerData.moneyData:type_name -> MoneyData
	68,  // 53: PlayerData.heartData:type_name -> HeartData
	69,  // 54: PlayerData.levelData:type_name -> LevelData
	70,  // 55: PlayerData.itemData:type_name -> ItemData
	71,  // 56: PlayerData.bubbleData:type_name -> BubbleData
	72,  // 57: PlayerData.basketData:type_name -> BasketData
	73,  // 58: PlayerData.mapBuildingData:type_name -> MapBuildingData
	74,  // 59: PlayerData.buildingMergeCounter:type_name -> BuildingMergeCounter
	75,  // 60: PlayerData.newBuildingNotices:type_name -> NewBuildingNotices
	76,  // 61: PlayerData.mapGridSprites:type_name -> MapGridSprites
	1,   // 62: PlayerData.mergeShopData:type_name -> MergeShopData
	77,  // 63: PlayerData.SystemSettingData:type_name -> SystemSetting
	78,  // 64: PlayerData.cameraData:type_name -> CameraData
	79,  // 65: PlayerData.illustrationData:type_name -> IllustrationData
	80,  // 66: PlayerData.taskData:type_name -> TaskData
	0,   // 67: PlayerData.signData:type_name -> SigninData
	4,   // 68: PlayerData.activityData:type_name -> ActivityData
	14,  // 69: PlayerData.payShopData:type_name -> PayShopData
	81,  // 70: PlayerData.buyData:type_name -> BuyData
	16,  // 71: PlayerData.produceStateData:type_name -> ProduceStateData
	82,  // 72: PlayerData.achievementData:type_name -> AchievementData
	83,  // 73: PlayerData.gameEndBalaceData:type_name -> GameEndBalaceData
	84,  // 74: PlayerData.friendLocalData:type_name -> FriendLocalData
	85,  // 75: PlayerData.nPCData:type_name -> NPCData
	86,  // 76: PlayerData.landUnLockData:type_name -> LandUnLockData
	87,  // 77: PlayerData.flotageData:type_name -> FlotageData
	9,   // 78: PlayerData.maxLevelActivityData:type_name -> MaxLevelActivityData
	88,  // 79: PlayerData.collectBookData:type_name -> CollectBookData
	89,  // 80: PlayerData.gamePlotData:type_name -> GamePlotData
	12,  // 81: PlayerData.noviceGuideData:type_name -> NoviceGuideData
	10,  // 82: PlayerData.materialOutPutActivityData:type_name -> MaterialOutPutActivityData
	90,  // 83: PlayerData.castalData:type_name -> CastalData
	91,  // 84: PlayerData.buildingMergeData:type_name -> BuildingMergeData
	92,  // 85: PlayerData.eventRecordData:type_name -> EventRecordData
	93,  // 86: PlayerData.functionMapBubbleData:type_name -> FunctionMapBubbleData
	21,  // 87: PlayerData.exchangeActivityData:type_name -> ExchangeActivityData
	94,  // 88: PlayerData.eventOutPutData:type_name -> EventOutPutData
	95,  // 89: PlayerData.statisticsData:type_name -> StatisticsData
	23,  // 90: PlayerData.reatData:type_name -> ReatData
	96,  // 91: PlayerData.CollectPiecesActivityData:type_name -> CollectPiecesActivityData
	97,  // 92: PlayerData.LevelABConfigData:type_name -> LevelABConfigData
	11,  // 93: PlayerData.PiggyBankData:type_name -> PiggyBankData
	98,  // 94: PlayerData.FunctionABConfigData:type_name -> FunctionABConfigData
	27,  // 95: PlayerData.ClubData:type_name -> ClubData
	28,  // 96: PlayerData.NewMaxLevelData:type_name -> NewMaxLevelData
	99,  // 97: PlayerData.UITimeBoxData:type_name -> UITimeBoxData
	24,  // 98: PlayerData.ReturnRewardData:type_name -> ReturnRewardData
	45,  // 99: PlayerData.ClubActivityData:type_name -> ClubActivityData
	26,  // 100: PlayerData.QuestionnaireData:type_name -> QuestionnaireData
	100, // 101: PlayerData.MagicData:type_name -> MagicData
	101, // 102: PlayerData.MailData:type_name -> LocalMailData
	102, // 103: PlayerData.NewLandUnLockData:type_name -> NewLandUnLockData
	103, // 104: PlayerData.levelBoxData:type_name -> LevelBoxData
	104, // 105: PlayerData.npcWonderData:type_name -> NpcWonderData
	105, // 106: PlayerData.npcExtraData:type_name -> NpcExtraData
	29,  // 107: PlayerData.ClassicActivityData:type_name -> ClassicActivityData
	18,  // 108: PlayerData.UserHeadData:type_name -> UserHeadData
	37,  // 109: PlayerData.ContinueBoxData:type_name -> ContinueBoxData
	106, // 110: PlayerData.KeyData:type_name -> KeyData
	46,  // 111: PlayerData.MergeMoudleData:type_name -> MergeMoudleData
	42,  // 112: PlayerData.ContinuePassLevelData:type_name -> ContinuePassLevelData
	35,  // 113: PlayerData.StoryGiftBoxData:type_name -> StoryGiftBoxData
	36,  // 114: PlayerData.FailingGiftBoxData:type_name -> FailingGiftBoxData
	47,  // 115: PlayerData.RankActivityData:type_name -> RankActivityData
	48,  // 116: PlayerData.FanPageLikeData:type_name -> FanPageLikeData
	38,  // 117: PlayerData.MayaActivityData:type_name -> MayaActivityData
	49,  // 118: PlayerData.TeaPartyActivityData:type_name -> TeaPartyActivityData
	50,  // 119: PlayerData.RaceActivityData:type_name -> RaceActivityData
	120, // [120:120] is the sub-list for method output_type
	120, // [120:120] is the sub-list for method input_type
	120, // [120:120] is the sub-list for extension type_name
	120, // [120:120] is the sub-list for extension extendee
	0,   // [0:120] is the sub-list for field type_name
}

func init() { file_userdata_proto_init() }
func file_userdata_proto_init() {
	if File_userdata_proto != nil {
		return
	}
	file_common_proto_init()
	file_userDataNative_proto_init()
	file_levelabconfig_proto_init()
	file_user_proto_init()
	file_rank_proto_init()
	file_guild_proto_init()
	file_guild_help_proto_init()
	file_activity_proto_init()
	file_guildactivity_proto_init()
	file_mail_proto_init()
	file_rankactivity_proto_init()
	file_racelevelactivity_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_userdata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigninData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeShopData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitShopItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityLocalNotficationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentActRoundData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxLevelActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialOutPutActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PiggyBankData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoviceGuideData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialActivityRandomWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayShopData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserHeadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeActivityTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReatData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnRewardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalChatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMaxLevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassicActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftBoxRewardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseGiftBoxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeLimitGiftBoxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoryGiftBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailingGiftBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoryGiftBoxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailingGiftBoxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinueBoxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MayaActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MayaConfigData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MayaRewardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinueBoxConfigData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuePassLevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReissueData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepReissueData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeMoudleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanPageLikeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeaPartyActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userdata_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userdata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_userdata_proto_goTypes,
		DependencyIndexes: file_userdata_proto_depIdxs,
		MessageInfos:      file_userdata_proto_msgTypes,
	}.Build()
	File_userdata_proto = out.File
	file_userdata_proto_rawDesc = nil
	file_userdata_proto_goTypes = nil
	file_userdata_proto_depIdxs = nil
}
