// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: guildactivity.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GuildActivityStatusCode int32

const (
	GuildActivityStatusCode_GUILD_ACTIVITY_STATUS_CODE_NONE        GuildActivityStatusCode = 0 // 不使用
	GuildActivityStatusCode_GUILD_ACTIVITY_STATUS_CODE_OPEN        GuildActivityStatusCode = 1 // 活动进行中
	GuildActivityStatusCode_GUILD_ACTIVITY_STATUS_CODE_COMPLETED   GuildActivityStatusCode = 2 // 当前公会活动结束，达成目标, 在公示期时间内
	GuildActivityStatusCode_GUILD_ACTIVITY_STATUS_CODE_UNCOMPLETED GuildActivityStatusCode = 3 // 当前公会活动结束，到达截止时间，未达成目标, 在公示期时间内
	GuildActivityStatusCode_GUILD_ACTIVITY_STATUS_CODE_END         GuildActivityStatusCode = 4 // 当前公会活动结束，暂时不能确定是否达成目标，中间状态, 在公示期时间内
	GuildActivityStatusCode_GUILD_ACTIVITY_STATUS_CODE_UNKNOWN     GuildActivityStatusCode = 5 // 初始化状态
	GuildActivityStatusCode_GUILD_ACTIVITY_STATUS_CODE_CLOSE       GuildActivityStatusCode = 6 // 活动关闭, 公示期结束，看板已关闭
	GuildActivityStatusCode_GUILD_ACTIVITY_STATUS_CODE_DROP_OUT    GuildActivityStatusCode = 7 // 该玩家过了一关且中途(未完成)退出了该公会活动。(多级简历公会活动修改@2022.3.7)
)

// Enum value maps for GuildActivityStatusCode.
var (
	GuildActivityStatusCode_name = map[int32]string{
		0: "GUILD_ACTIVITY_STATUS_CODE_NONE",
		1: "GUILD_ACTIVITY_STATUS_CODE_OPEN",
		2: "GUILD_ACTIVITY_STATUS_CODE_COMPLETED",
		3: "GUILD_ACTIVITY_STATUS_CODE_UNCOMPLETED",
		4: "GUILD_ACTIVITY_STATUS_CODE_END",
		5: "GUILD_ACTIVITY_STATUS_CODE_UNKNOWN",
		6: "GUILD_ACTIVITY_STATUS_CODE_CLOSE",
		7: "GUILD_ACTIVITY_STATUS_CODE_DROP_OUT",
	}
	GuildActivityStatusCode_value = map[string]int32{
		"GUILD_ACTIVITY_STATUS_CODE_NONE":        0,
		"GUILD_ACTIVITY_STATUS_CODE_OPEN":        1,
		"GUILD_ACTIVITY_STATUS_CODE_COMPLETED":   2,
		"GUILD_ACTIVITY_STATUS_CODE_UNCOMPLETED": 3,
		"GUILD_ACTIVITY_STATUS_CODE_END":         4,
		"GUILD_ACTIVITY_STATUS_CODE_UNKNOWN":     5,
		"GUILD_ACTIVITY_STATUS_CODE_CLOSE":       6,
		"GUILD_ACTIVITY_STATUS_CODE_DROP_OUT":    7,
	}
)

func (x GuildActivityStatusCode) Enum() *GuildActivityStatusCode {
	p := new(GuildActivityStatusCode)
	*p = x
	return p
}

func (x GuildActivityStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildActivityStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_guildactivity_proto_enumTypes[0].Descriptor()
}

func (GuildActivityStatusCode) Type() protoreflect.EnumType {
	return &file_guildactivity_proto_enumTypes[0]
}

func (x GuildActivityStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuildActivityStatusCode.Descriptor instead.
func (GuildActivityStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_guildactivity_proto_rawDescGZIP(), []int{0}
}

type LevelType int32

const (
	LevelType_LEVEL_TYPE_MAX_LEVEL LevelType = 0 // 满级玩法关卡
	LevelType_LEVEL_TYPE_COMMON    LevelType = 1 // 普通关卡
	LevelType_LEVEL_TYPE_ELITE     LevelType = 2 // 精英赛关卡
)

// Enum value maps for LevelType.
var (
	LevelType_name = map[int32]string{
		0: "LEVEL_TYPE_MAX_LEVEL",
		1: "LEVEL_TYPE_COMMON",
		2: "LEVEL_TYPE_ELITE",
	}
	LevelType_value = map[string]int32{
		"LEVEL_TYPE_MAX_LEVEL": 0,
		"LEVEL_TYPE_COMMON":    1,
		"LEVEL_TYPE_ELITE":     2,
	}
)

func (x LevelType) Enum() *LevelType {
	p := new(LevelType)
	*p = x
	return p
}

func (x LevelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LevelType) Descriptor() protoreflect.EnumDescriptor {
	return file_guildactivity_proto_enumTypes[1].Descriptor()
}

func (LevelType) Type() protoreflect.EnumType {
	return &file_guildactivity_proto_enumTypes[1]
}

func (x LevelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LevelType.Descriptor instead.
func (LevelType) EnumDescriptor() ([]byte, []int) {
	return file_guildactivity_proto_rawDescGZIP(), []int{1}
}

type AckResult int32

const (
	AckResult_ACK_RESULT_FAIL         AckResult = 0 // 失败
	AckResult_ACK_RESULT_SUCCESS      AckResult = 1 // 成功
	AckResult_ACK_RESULT_ACKNOWLEDGED AckResult = 2 // 已被消费
)

// Enum value maps for AckResult.
var (
	AckResult_name = map[int32]string{
		0: "ACK_RESULT_FAIL",
		1: "ACK_RESULT_SUCCESS",
		2: "ACK_RESULT_ACKNOWLEDGED",
	}
	AckResult_value = map[string]int32{
		"ACK_RESULT_FAIL":         0,
		"ACK_RESULT_SUCCESS":      1,
		"ACK_RESULT_ACKNOWLEDGED": 2,
	}
)

func (x AckResult) Enum() *AckResult {
	p := new(AckResult)
	*p = x
	return p
}

func (x AckResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AckResult) Descriptor() protoreflect.EnumDescriptor {
	return file_guildactivity_proto_enumTypes[2].Descriptor()
}

func (AckResult) Type() protoreflect.EnumType {
	return &file_guildactivity_proto_enumTypes[2]
}

func (x AckResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AckResult.Descriptor instead.
func (AckResult) EnumDescriptor() ([]byte, []int) {
	return file_guildactivity_proto_rawDescGZIP(), []int{2}
}

// 关卡
type GuildActLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  LevelType `protobuf:"varint,1,opt,name=type,proto3,enum=LevelType" json:"type,omitempty"` // 关卡类型，枚举
	Id    string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                     // 关卡唯一标识
	Round int32     `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`              // 若关卡为满级玩法，存在round这一属性
	Score int32     `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *GuildActLevel) Reset() {
	*x = GuildActLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guildactivity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildActLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildActLevel) ProtoMessage() {}

func (x *GuildActLevel) ProtoReflect() protoreflect.Message {
	mi := &file_guildactivity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildActLevel.ProtoReflect.Descriptor instead.
func (*GuildActLevel) Descriptor() ([]byte, []int) {
	return file_guildactivity_proto_rawDescGZIP(), []int{0}
}

func (x *GuildActLevel) GetType() LevelType {
	if x != nil {
		return x.Type
	}
	return LevelType_LEVEL_TYPE_MAX_LEVEL
}

func (x *GuildActLevel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GuildActLevel) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *GuildActLevel) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// 请求我的公会活动状态
type CSGetGuildActivityStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level      int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`           // 我当前的等级, 若满足40而公会活动内无我，则加入
	ActivityId int64 `protobuf:"varint,2,opt,name=activityId,proto3" json:"activityId,omitempty"` // 活动ID，若指定活动ID，则查询我在该期活动的数据并返回
}

func (x *CSGetGuildActivityStatus) Reset() {
	*x = CSGetGuildActivityStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guildactivity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSGetGuildActivityStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSGetGuildActivityStatus) ProtoMessage() {}

func (x *CSGetGuildActivityStatus) ProtoReflect() protoreflect.Message {
	mi := &file_guildactivity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSGetGuildActivityStatus.ProtoReflect.Descriptor instead.
func (*CSGetGuildActivityStatus) Descriptor() ([]byte, []int) {
	return file_guildactivity_proto_rawDescGZIP(), []int{1}
}

func (x *CSGetGuildActivityStatus) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CSGetGuildActivityStatus) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

// 请求我的公会活动当前状态, 若公会已完成活动，跳转其他公会，其活动状态依然为上一期}
type SCGetGuildActivityStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           GuildActivityStatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=GuildActivityStatusCode" json:"status,omitempty"` // 活动状态
	Target           int32                   `protobuf:"varint,2,opt,name=target,proto3" json:"target,omitempty"`                              // 总目标
	GuildId          int64                   `protobuf:"varint,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`             // 该活动所属的公会ID
	Id               int64                   `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                      // 公会活动ID，若公会已完成活动，跳转其他公会，其活动id依然为上一个。否则，其活动为该公会活动。
	HasReward        bool                    `protobuf:"varint,5,opt,name=has_reward,json=hasReward,proto3" json:"has_reward,omitempty"`       // 是否可以领取宝箱奖励，过了一关才可以领
	Rank             int32                   `protobuf:"varint,6,opt,name=rank,proto3" json:"rank,omitempty"`
	GuildName        string                  `protobuf:"bytes,7,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`                         // 该公会所属的公会名
	GuildBadge       string                  `protobuf:"bytes,8,opt,name=guild_badge,json=guildBadge,proto3" json:"guild_badge,omitempty"`                      // 该活动所属的公会徽章
	GuildNumberCount int32                   `protobuf:"varint,9,opt,name=guild_number_count,json=guildNumberCount,proto3" json:"guild_number_count,omitempty"` // 该活动所属的公会人数
	Target1          int32                   `protobuf:"varint,10,opt,name=target1,proto3" json:"target1,omitempty"`                                            // 多阶奖励1
	Target2          int32                   `protobuf:"varint,11,opt,name=target2,proto3" json:"target2,omitempty"`                                            // 多阶奖励2
	Score            int32                   `protobuf:"varint,12,opt,name=score,proto3" json:"score,omitempty"`                                                // 当前我的组总积分
}

func (x *SCGetGuildActivityStatus) Reset() {
	*x = SCGetGuildActivityStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guildactivity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCGetGuildActivityStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCGetGuildActivityStatus) ProtoMessage() {}

func (x *SCGetGuildActivityStatus) ProtoReflect() protoreflect.Message {
	mi := &file_guildactivity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCGetGuildActivityStatus.ProtoReflect.Descriptor instead.
func (*SCGetGuildActivityStatus) Descriptor() ([]byte, []int) {
	return file_guildactivity_proto_rawDescGZIP(), []int{2}
}

func (x *SCGetGuildActivityStatus) GetStatus() GuildActivityStatusCode {
	if x != nil {
		return x.Status
	}
	return GuildActivityStatusCode_GUILD_ACTIVITY_STATUS_CODE_NONE
}

func (x *SCGetGuildActivityStatus) GetTarget() int32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *SCGetGuildActivityStatus) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *SCGetGuildActivityStatus) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SCGetGuildActivityStatus) GetHasReward() bool {
	if x != nil {
		return x.HasReward
	}
	return false
}

func (x *SCGetGuildActivityStatus) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *SCGetGuildActivityStatus) GetGuildName() string {
	if x != nil {
		return x.GuildName
	}
	return ""
}

func (x *SCGetGuildActivityStatus) GetGuildBadge() string {
	if x != nil {
		return x.GuildBadge
	}
	return ""
}

func (x *SCGetGuildActivityStatus) GetGuildNumberCount() int32 {
	if x != nil {
		return x.GuildNumberCount
	}
	return 0
}

func (x *SCGetGuildActivityStatus) GetTarget1() int32 {
	if x != nil {
		return x.Target1
	}
	return 0
}

func (x *SCGetGuildActivityStatus) GetTarget2() int32 {
	if x != nil {
		return x.Target2
	}
	return 0
}

func (x *SCGetGuildActivityStatus) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// 获取当前公会活动list，服务端排序
type CSGetGuildActivityRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`        // 公会活动ID，若公会已完成活动，跳转其他公会，其活动id依然为上一个。否则，其活动为该公会活动。
	Levels []*GuildActLevel `protobuf:"bytes,2,rep,name=levels,proto3" json:"levels,omitempty"` // 列表，从左往右依次加分
}

func (x *CSGetGuildActivityRank) Reset() {
	*x = CSGetGuildActivityRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guildactivity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSGetGuildActivityRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSGetGuildActivityRank) ProtoMessage() {}

func (x *CSGetGuildActivityRank) ProtoReflect() protoreflect.Message {
	mi := &file_guildactivity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSGetGuildActivityRank.ProtoReflect.Descriptor instead.
func (*CSGetGuildActivityRank) Descriptor() ([]byte, []int) {
	return file_guildactivity_proto_rawDescGZIP(), []int{3}
}

func (x *CSGetGuildActivityRank) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CSGetGuildActivityRank) GetLevels() []*GuildActLevel {
	if x != nil {
		return x.Levels
	}
	return nil
}

// 公会活动列表item
type GuildActivityRankUserBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score            int32  `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"` // 积分
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	HeadIcon         string `protobuf:"bytes,3,opt,name=head_icon,json=headIcon,proto3" json:"head_icon,omitempty"`                            // 头像
	Rank             int32  `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`                                                   // 排名
	Channel          int32  `protobuf:"varint,5,opt,name=channel,proto3" json:"channel,omitempty"`                                             // fb标识
	ScoreUpdatedTime int64  `protobuf:"varint,6,opt,name=score_updated_time,json=scoreUpdatedTime,proto3" json:"score_updated_time,omitempty"` // 上次更新我的分数时间
	IsLeader         bool   `protobuf:"varint,7,opt,name=is_leader,json=isLeader,proto3" json:"is_leader,omitempty"`                           // 是否是leader, ld本人需要展示
	Level            int32  `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`                                                 // 我的等级，参与排序
	UserId           int64  `protobuf:"varint,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                 // 玩家id
}

func (x *GuildActivityRankUserBaseInfo) Reset() {
	*x = GuildActivityRankUserBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guildactivity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildActivityRankUserBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildActivityRankUserBaseInfo) ProtoMessage() {}

func (x *GuildActivityRankUserBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_guildactivity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildActivityRankUserBaseInfo.ProtoReflect.Descriptor instead.
func (*GuildActivityRankUserBaseInfo) Descriptor() ([]byte, []int) {
	return file_guildactivity_proto_rawDescGZIP(), []int{4}
}

func (x *GuildActivityRankUserBaseInfo) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GuildActivityRankUserBaseInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GuildActivityRankUserBaseInfo) GetHeadIcon() string {
	if x != nil {
		return x.HeadIcon
	}
	return ""
}

func (x *GuildActivityRankUserBaseInfo) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GuildActivityRankUserBaseInfo) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *GuildActivityRankUserBaseInfo) GetScoreUpdatedTime() int64 {
	if x != nil {
		return x.ScoreUpdatedTime
	}
	return 0
}

func (x *GuildActivityRankUserBaseInfo) GetIsLeader() bool {
	if x != nil {
		return x.IsLeader
	}
	return false
}

func (x *GuildActivityRankUserBaseInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GuildActivityRankUserBaseInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SCGetGuildActivityRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfos []*GuildActivityRankUserBaseInfo `protobuf:"bytes,1,rep,name=userInfos,proto3" json:"userInfos,omitempty"`                         // 玩家信息列表
	Status    GuildActivityStatusCode          `protobuf:"varint,2,opt,name=status,proto3,enum=GuildActivityStatusCode" json:"status,omitempty"` // 活动状态
	Id        int64                            `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                      // 公会活动ID，若公会已完成活动，跳转其他公会，其活动id依然为上一个。否则，其活动为该公会活动。
	Target    int32                            `protobuf:"varint,4,opt,name=target,proto3" json:"target,omitempty"`                              // 总目标
	Score     int32                            `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`                                // 公会活动总分
	Target1   int32                            `protobuf:"varint,6,opt,name=target1,proto3" json:"target1,omitempty"`                            // 多阶奖励1
	Target2   int32                            `protobuf:"varint,7,opt,name=target2,proto3" json:"target2,omitempty"`                            // 多阶奖励2
}

func (x *SCGetGuildActivityRank) Reset() {
	*x = SCGetGuildActivityRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guildactivity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCGetGuildActivityRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCGetGuildActivityRank) ProtoMessage() {}

func (x *SCGetGuildActivityRank) ProtoReflect() protoreflect.Message {
	mi := &file_guildactivity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCGetGuildActivityRank.ProtoReflect.Descriptor instead.
func (*SCGetGuildActivityRank) Descriptor() ([]byte, []int) {
	return file_guildactivity_proto_rawDescGZIP(), []int{5}
}

func (x *SCGetGuildActivityRank) GetUserInfos() []*GuildActivityRankUserBaseInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

func (x *SCGetGuildActivityRank) GetStatus() GuildActivityStatusCode {
	if x != nil {
		return x.Status
	}
	return GuildActivityStatusCode_GUILD_ACTIVITY_STATUS_CODE_NONE
}

func (x *SCGetGuildActivityRank) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SCGetGuildActivityRank) GetTarget() int32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *SCGetGuildActivityRank) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SCGetGuildActivityRank) GetTarget1() int32 {
	if x != nil {
		return x.Target1
	}
	return 0
}

func (x *SCGetGuildActivityRank) GetTarget2() int32 {
	if x != nil {
		return x.Target2
	}
	return 0
}

// 上传公会活动增量积分，上传关卡ID
type CSUploadGuildActivityScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`        // 公会活动ID，若公会已完成活动，跳转其他公会，其活动id依然为上一个。否则，其活动为该公会活动。
	Levels []*GuildActLevel `protobuf:"bytes,2,rep,name=levels,proto3" json:"levels,omitempty"` // 列表，从左往右依次加分
}

func (x *CSUploadGuildActivityScore) Reset() {
	*x = CSUploadGuildActivityScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guildactivity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSUploadGuildActivityScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSUploadGuildActivityScore) ProtoMessage() {}

func (x *CSUploadGuildActivityScore) ProtoReflect() protoreflect.Message {
	mi := &file_guildactivity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSUploadGuildActivityScore.ProtoReflect.Descriptor instead.
func (*CSUploadGuildActivityScore) Descriptor() ([]byte, []int) {
	return file_guildactivity_proto_rawDescGZIP(), []int{6}
}

func (x *CSUploadGuildActivityScore) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CSUploadGuildActivityScore) GetLevels() []*GuildActLevel {
	if x != nil {
		return x.Levels
	}
	return nil
}

type SCUploadGuildActivityScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result AckResult               `protobuf:"varint,1,opt,name=result,proto3,enum=AckResult" json:"result,omitempty"`               // 是否加分成功, 仅当服务错误，返回0：加分失败。否则返回1
	Score  int32                   `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`                                // 加完后的公会活动分数
	Status GuildActivityStatusCode `protobuf:"varint,3,opt,name=status,proto3,enum=GuildActivityStatusCode" json:"status,omitempty"` // 活动状态
}

func (x *SCUploadGuildActivityScore) Reset() {
	*x = SCUploadGuildActivityScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guildactivity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCUploadGuildActivityScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCUploadGuildActivityScore) ProtoMessage() {}

func (x *SCUploadGuildActivityScore) ProtoReflect() protoreflect.Message {
	mi := &file_guildactivity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCUploadGuildActivityScore.ProtoReflect.Descriptor instead.
func (*SCUploadGuildActivityScore) Descriptor() ([]byte, []int) {
	return file_guildactivity_proto_rawDescGZIP(), []int{7}
}

func (x *SCUploadGuildActivityScore) GetResult() AckResult {
	if x != nil {
		return x.Result
	}
	return AckResult_ACK_RESULT_FAIL
}

func (x *SCUploadGuildActivityScore) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SCUploadGuildActivityScore) GetStatus() GuildActivityStatusCode {
	if x != nil {
		return x.Status
	}
	return GuildActivityStatusCode_GUILD_ACTIVITY_STATUS_CODE_NONE
}

var File_guildactivity_proto protoreflect.FileDescriptor

var file_guildactivity_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x63,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x50, 0x0a, 0x18, 0x43, 0x53, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0xfa, 0x02, 0x0a, 0x18, 0x53, 0x43, 0x47, 0x65, 0x74, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x31, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x32, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x50, 0x0a, 0x16, 0x43, 0x53, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x1d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x16, 0x53, 0x43, 0x47, 0x65, 0x74, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x3c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x32, 0x22, 0x54, 0x0a, 0x1a, 0x43, 0x53, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x53, 0x43, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2a, 0xd4, 0x02, 0x0a, 0x17, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x1f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x22,
	0x0a, 0x1e, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x4e, 0x44,
	0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x06,
	0x12, 0x27, 0x0a, 0x23, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x07, 0x2a, 0x52, 0x0a, 0x09, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4c, 0x49, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x55, 0x0a,
	0x09, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x4b, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47,
	0x45, 0x44, 0x10, 0x02, 0x42, 0x17, 0x48, 0x01, 0x5a, 0x06, 0x2e, 0x2f, 0x3b, 0x61, 0x70, 0x69,
	0xaa, 0x02, 0x0a, 0x4d, 0x4d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_guildactivity_proto_rawDescOnce sync.Once
	file_guildactivity_proto_rawDescData = file_guildactivity_proto_rawDesc
)

func file_guildactivity_proto_rawDescGZIP() []byte {
	file_guildactivity_proto_rawDescOnce.Do(func() {
		file_guildactivity_proto_rawDescData = protoimpl.X.CompressGZIP(file_guildactivity_proto_rawDescData)
	})
	return file_guildactivity_proto_rawDescData
}

var file_guildactivity_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_guildactivity_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_guildactivity_proto_goTypes = []interface{}{
	(GuildActivityStatusCode)(0),          // 0: GuildActivityStatusCode
	(LevelType)(0),                        // 1: LevelType
	(AckResult)(0),                        // 2: AckResult
	(*GuildActLevel)(nil),                 // 3: GuildActLevel
	(*CSGetGuildActivityStatus)(nil),      // 4: CSGetGuildActivityStatus
	(*SCGetGuildActivityStatus)(nil),      // 5: SCGetGuildActivityStatus
	(*CSGetGuildActivityRank)(nil),        // 6: CSGetGuildActivityRank
	(*GuildActivityRankUserBaseInfo)(nil), // 7: GuildActivityRankUserBaseInfo
	(*SCGetGuildActivityRank)(nil),        // 8: SCGetGuildActivityRank
	(*CSUploadGuildActivityScore)(nil),    // 9: CSUploadGuildActivityScore
	(*SCUploadGuildActivityScore)(nil),    // 10: SCUploadGuildActivityScore
}
var file_guildactivity_proto_depIdxs = []int32{
	1, // 0: GuildActLevel.type:type_name -> LevelType
	0, // 1: SCGetGuildActivityStatus.status:type_name -> GuildActivityStatusCode
	3, // 2: CSGetGuildActivityRank.levels:type_name -> GuildActLevel
	7, // 3: SCGetGuildActivityRank.userInfos:type_name -> GuildActivityRankUserBaseInfo
	0, // 4: SCGetGuildActivityRank.status:type_name -> GuildActivityStatusCode
	3, // 5: CSUploadGuildActivityScore.levels:type_name -> GuildActLevel
	2, // 6: SCUploadGuildActivityScore.result:type_name -> AckResult
	0, // 7: SCUploadGuildActivityScore.status:type_name -> GuildActivityStatusCode
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_guildactivity_proto_init() }
func file_guildactivity_proto_init() {
	if File_guildactivity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_guildactivity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildActLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guildactivity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSGetGuildActivityStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guildactivity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCGetGuildActivityStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guildactivity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSGetGuildActivityRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guildactivity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildActivityRankUserBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guildactivity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCGetGuildActivityRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guildactivity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSUploadGuildActivityScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guildactivity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCUploadGuildActivityScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_guildactivity_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_guildactivity_proto_goTypes,
		DependencyIndexes: file_guildactivity_proto_depIdxs,
		EnumInfos:         file_guildactivity_proto_enumTypes,
		MessageInfos:      file_guildactivity_proto_msgTypes,
	}.Build()
	File_guildactivity_proto = out.File
	file_guildactivity_proto_rawDesc = nil
	file_guildactivity_proto_goTypes = nil
	file_guildactivity_proto_depIdxs = nil
}
