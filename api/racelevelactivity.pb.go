// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: racelevelactivity.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 活动信息
type RaceLevelActivityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId    int64  `protobuf:"varint,1,opt,name=UniqueId,proto3" json:"UniqueId,omitempty"`       // 活动唯一ID
	ActivityID  string `protobuf:"bytes,2,opt,name=ActivityID,proto3" json:"ActivityID,omitempty"`    // 打点活动ID
	OpenTime    int64  `protobuf:"varint,3,opt,name=OpenTime,proto3" json:"OpenTime,omitempty"`       // 开启时间
	CloseTime   int64  `protobuf:"varint,4,opt,name=CloseTime,proto3" json:"CloseTime,omitempty"`     // 结束时间
	TargetScore int32  `protobuf:"varint,5,opt,name=TargetScore,proto3" json:"TargetScore,omitempty"` // 目标关卡数
	Status      int32  `protobuf:"varint,6,opt,name=Status,proto3" json:"Status,omitempty"`           // 当前状态 (1：开启、2：关闭)（由时间可推算出来、GM修改时间是设置是否关闭）
}

func (x *RaceLevelActivityInfo) Reset() {
	*x = RaceLevelActivityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_racelevelactivity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceLevelActivityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceLevelActivityInfo) ProtoMessage() {}

func (x *RaceLevelActivityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_racelevelactivity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceLevelActivityInfo.ProtoReflect.Descriptor instead.
func (*RaceLevelActivityInfo) Descriptor() ([]byte, []int) {
	return file_racelevelactivity_proto_rawDescGZIP(), []int{0}
}

func (x *RaceLevelActivityInfo) GetUniqueId() int64 {
	if x != nil {
		return x.UniqueId
	}
	return 0
}

func (x *RaceLevelActivityInfo) GetActivityID() string {
	if x != nil {
		return x.ActivityID
	}
	return ""
}

func (x *RaceLevelActivityInfo) GetOpenTime() int64 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *RaceLevelActivityInfo) GetCloseTime() int64 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *RaceLevelActivityInfo) GetTargetScore() int32 {
	if x != nil {
		return x.TargetScore
	}
	return 0
}

func (x *RaceLevelActivityInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 分组成员信息
type GroupMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      int64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`            // ID
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`                 // 名称
	HeadIcon    string `protobuf:"bytes,3,opt,name=HeadIcon,proto3" json:"HeadIcon,omitempty"`         // 头像
	Level       int32  `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`              // 等级
	Score       int32  `protobuf:"varint,5,opt,name=Score,proto3" json:"Score,omitempty"`              // 积分       mnnn
	UpdateTime  int64  `protobuf:"varint,6,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`    // 更新积分时间
	Channel     int32  `protobuf:"varint,7,opt,name=Channel,proto3" json:"Channel,omitempty"`          //
	LastRank    int32  `protobuf:"varint,8,opt,name=LastRank,proto3" json:"LastRank,omitempty"`        // 上次排名
	JoinTime    int64  `protobuf:"varint,9,opt,name=JoinTime,proto3" json:"JoinTime,omitempty"`        // 加入分组时间
	ActivityNum int32  `protobuf:"varint,10,opt,name=ActivityNum,proto3" json:"ActivityNum,omitempty"` // 参与活动次数
	Rank        int32  `protobuf:"varint,11,opt,name=Rank,proto3" json:"Rank,omitempty"`               // 当前排名
}

func (x *GroupMemberInfo) Reset() {
	*x = GroupMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_racelevelactivity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberInfo) ProtoMessage() {}

func (x *GroupMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_racelevelactivity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberInfo.ProtoReflect.Descriptor instead.
func (*GroupMemberInfo) Descriptor() ([]byte, []int) {
	return file_racelevelactivity_proto_rawDescGZIP(), []int{1}
}

func (x *GroupMemberInfo) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GroupMemberInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupMemberInfo) GetHeadIcon() string {
	if x != nil {
		return x.HeadIcon
	}
	return ""
}

func (x *GroupMemberInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GroupMemberInfo) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GroupMemberInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *GroupMemberInfo) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *GroupMemberInfo) GetLastRank() int32 {
	if x != nil {
		return x.LastRank
	}
	return 0
}

func (x *GroupMemberInfo) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *GroupMemberInfo) GetActivityNum() int32 {
	if x != nil {
		return x.ActivityNum
	}
	return 0
}

func (x *GroupMemberInfo) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

// 组信息
type ActivityGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityUniqueId int64  `protobuf:"varint,1,opt,name=ActivityUniqueId,proto3" json:"ActivityUniqueId,omitempty"` // 活动唯一ID
	ActivityID       string `protobuf:"bytes,2,opt,name=ActivityID,proto3" json:"ActivityID,omitempty"`              // 活动打点ID
	ActivityConfID   int32  `protobuf:"varint,3,opt,name=ActivityConfID,proto3" json:"ActivityConfID,omitempty"`     // 配表ID
	StartTime        int64  `protobuf:"varint,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	//  int64 JoinEndTime = 5;
	EndTime   int64              `protobuf:"varint,6,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Members   []*GroupMemberInfo `protobuf:"bytes,7,rep,name=members,proto3" json:"members,omitempty"`
	GroupID   int64              `protobuf:"varint,8,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	BiGroupId string             `protobuf:"bytes,9,opt,name=BiGroupId,proto3" json:"BiGroupId,omitempty"`
	Status    int32              `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"` // 分组活动状态 1.存在活动，可以加入 2.已经加入组 3.该组结束
}

func (x *ActivityGroupInfo) Reset() {
	*x = ActivityGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_racelevelactivity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityGroupInfo) ProtoMessage() {}

func (x *ActivityGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_racelevelactivity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityGroupInfo.ProtoReflect.Descriptor instead.
func (*ActivityGroupInfo) Descriptor() ([]byte, []int) {
	return file_racelevelactivity_proto_rawDescGZIP(), []int{2}
}

func (x *ActivityGroupInfo) GetActivityUniqueId() int64 {
	if x != nil {
		return x.ActivityUniqueId
	}
	return 0
}

func (x *ActivityGroupInfo) GetActivityID() string {
	if x != nil {
		return x.ActivityID
	}
	return ""
}

func (x *ActivityGroupInfo) GetActivityConfID() int32 {
	if x != nil {
		return x.ActivityConfID
	}
	return 0
}

func (x *ActivityGroupInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ActivityGroupInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ActivityGroupInfo) GetMembers() []*GroupMemberInfo {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ActivityGroupInfo) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ActivityGroupInfo) GetBiGroupId() string {
	if x != nil {
		return x.BiGroupId
	}
	return ""
}

func (x *ActivityGroupInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 获取活动状态
type CSRequestRaceLevelActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId int64 `protobuf:"varint,1,opt,name=uniqueId,proto3" json:"uniqueId,omitempty"` // 活动唯一ID
	GroupID  int64 `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`   //指定组id
}

func (x *CSRequestRaceLevelActivity) Reset() {
	*x = CSRequestRaceLevelActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_racelevelactivity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSRequestRaceLevelActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSRequestRaceLevelActivity) ProtoMessage() {}

func (x *CSRequestRaceLevelActivity) ProtoReflect() protoreflect.Message {
	mi := &file_racelevelactivity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSRequestRaceLevelActivity.ProtoReflect.Descriptor instead.
func (*CSRequestRaceLevelActivity) Descriptor() ([]byte, []int) {
	return file_racelevelactivity_proto_rawDescGZIP(), []int{3}
}

func (x *CSRequestRaceLevelActivity) GetUniqueId() int64 {
	if x != nil {
		return x.UniqueId
	}
	return 0
}

func (x *CSRequestRaceLevelActivity) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

// 获取活动状态返回
type SCRequestRaceLevelActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          int32                  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`                  // 2000为正常，其它值说明出错了
	Group        *ActivityGroupInfo     `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`               // 当前组信息 如已有分组，无分组时不符值
	ActivityInfo *RaceLevelActivityInfo `protobuf:"bytes,3,opt,name=activityInfo,proto3" json:"activityInfo,omitempty"` //活动信息 一直下发 组状态是1，2，3的时候，ActivityGroupInfo这个字段有值，其他情况是null或者字段都是0
	UniqueId     int64                  `protobuf:"varint,4,opt,name=uniqueId,proto3" json:"uniqueId,omitempty"`        // 前端请求的活动唯一ID
	GroupID      int64                  `protobuf:"varint,5,opt,name=GroupID,proto3" json:"GroupID,omitempty"`          // 前端请求的指定组id
}

func (x *SCRequestRaceLevelActivity) Reset() {
	*x = SCRequestRaceLevelActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_racelevelactivity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRequestRaceLevelActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRequestRaceLevelActivity) ProtoMessage() {}

func (x *SCRequestRaceLevelActivity) ProtoReflect() protoreflect.Message {
	mi := &file_racelevelactivity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRequestRaceLevelActivity.ProtoReflect.Descriptor instead.
func (*SCRequestRaceLevelActivity) Descriptor() ([]byte, []int) {
	return file_racelevelactivity_proto_rawDescGZIP(), []int{4}
}

func (x *SCRequestRaceLevelActivity) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *SCRequestRaceLevelActivity) GetGroup() *ActivityGroupInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *SCRequestRaceLevelActivity) GetActivityInfo() *RaceLevelActivityInfo {
	if x != nil {
		return x.ActivityInfo
	}
	return nil
}

func (x *SCRequestRaceLevelActivity) GetUniqueId() int64 {
	if x != nil {
		return x.UniqueId
	}
	return 0
}

func (x *SCRequestRaceLevelActivity) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

// 请求加入活动
type CSJoinRaceLevelActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId  int64 `protobuf:"varint,1,opt,name=uniqueId,proto3" json:"uniqueId,omitempty"`   // 活动唯一ID
	Level     int32 `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`         // 当前等级
	Score     int64 `protobuf:"varint,3,opt,name=Score,proto3" json:"Score,omitempty"`         // 积分
	LevelType int32 `protobuf:"varint,4,opt,name=LevelType,proto3" json:"LevelType,omitempty"` //1普通；2是满级或者精英赛
	UserType  int32 `protobuf:"varint,5,opt,name=userType,proto3" json:"userType,omitempty"`   //0免费；1付费
}

func (x *CSJoinRaceLevelActivity) Reset() {
	*x = CSJoinRaceLevelActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_racelevelactivity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSJoinRaceLevelActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSJoinRaceLevelActivity) ProtoMessage() {}

func (x *CSJoinRaceLevelActivity) ProtoReflect() protoreflect.Message {
	mi := &file_racelevelactivity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSJoinRaceLevelActivity.ProtoReflect.Descriptor instead.
func (*CSJoinRaceLevelActivity) Descriptor() ([]byte, []int) {
	return file_racelevelactivity_proto_rawDescGZIP(), []int{5}
}

func (x *CSJoinRaceLevelActivity) GetUniqueId() int64 {
	if x != nil {
		return x.UniqueId
	}
	return 0
}

func (x *CSJoinRaceLevelActivity) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CSJoinRaceLevelActivity) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CSJoinRaceLevelActivity) GetLevelType() int32 {
	if x != nil {
		return x.LevelType
	}
	return 0
}

func (x *CSJoinRaceLevelActivity) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

//
type SCJoinRaceLevelActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   int32              `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`    // 2000为正常，其它值说明出错了
	Group *ActivityGroupInfo `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"` // 分组
}

func (x *SCJoinRaceLevelActivity) Reset() {
	*x = SCJoinRaceLevelActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_racelevelactivity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCJoinRaceLevelActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCJoinRaceLevelActivity) ProtoMessage() {}

func (x *SCJoinRaceLevelActivity) ProtoReflect() protoreflect.Message {
	mi := &file_racelevelactivity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCJoinRaceLevelActivity.ProtoReflect.Descriptor instead.
func (*SCJoinRaceLevelActivity) Descriptor() ([]byte, []int) {
	return file_racelevelactivity_proto_rawDescGZIP(), []int{6}
}

func (x *SCJoinRaceLevelActivity) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *SCJoinRaceLevelActivity) GetGroup() *ActivityGroupInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

// 发送积分
type CSRaceLevelUpdateScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  int64 uniqueId = 1; // 活动唯一ID
	GroupId int64 `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"` // 组唯一ID
	Score   int64 `protobuf:"varint,2,opt,name=Score,proto3" json:"Score,omitempty"`     // 积分
}

func (x *CSRaceLevelUpdateScore) Reset() {
	*x = CSRaceLevelUpdateScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_racelevelactivity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSRaceLevelUpdateScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSRaceLevelUpdateScore) ProtoMessage() {}

func (x *CSRaceLevelUpdateScore) ProtoReflect() protoreflect.Message {
	mi := &file_racelevelactivity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSRaceLevelUpdateScore.ProtoReflect.Descriptor instead.
func (*CSRaceLevelUpdateScore) Descriptor() ([]byte, []int) {
	return file_racelevelactivity_proto_rawDescGZIP(), []int{7}
}

func (x *CSRaceLevelUpdateScore) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CSRaceLevelUpdateScore) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// 发送积分返回
type SCRaceLevelUpdateScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   int32              `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`    // 2000为正常，其它值说明出错了
	Group *ActivityGroupInfo `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"` // 分组
}

func (x *SCRaceLevelUpdateScore) Reset() {
	*x = SCRaceLevelUpdateScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_racelevelactivity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRaceLevelUpdateScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRaceLevelUpdateScore) ProtoMessage() {}

func (x *SCRaceLevelUpdateScore) ProtoReflect() protoreflect.Message {
	mi := &file_racelevelactivity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRaceLevelUpdateScore.ProtoReflect.Descriptor instead.
func (*SCRaceLevelUpdateScore) Descriptor() ([]byte, []int) {
	return file_racelevelactivity_proto_rawDescGZIP(), []int{8}
}

func (x *SCRaceLevelUpdateScore) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *SCRaceLevelUpdateScore) GetGroup() *ActivityGroupInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

// 获取排行榜
type CSRaceLevelRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  int64 uniqueId = 1; // 活动唯一ID
	GroupId int64 `protobuf:"varint,1,opt,name=groupId,proto3" json:"groupId,omitempty"` // 组ID
}

func (x *CSRaceLevelRankInfo) Reset() {
	*x = CSRaceLevelRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_racelevelactivity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSRaceLevelRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSRaceLevelRankInfo) ProtoMessage() {}

func (x *CSRaceLevelRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_racelevelactivity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSRaceLevelRankInfo.ProtoReflect.Descriptor instead.
func (*CSRaceLevelRankInfo) Descriptor() ([]byte, []int) {
	return file_racelevelactivity_proto_rawDescGZIP(), []int{9}
}

func (x *CSRaceLevelRankInfo) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// 获取排行榜返回
type SCRaceLevelRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   int32              `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`    // 2000为正常，其它值说明出错了
	Group *ActivityGroupInfo `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"` // 分组
}

func (x *SCRaceLevelRankInfo) Reset() {
	*x = SCRaceLevelRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_racelevelactivity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRaceLevelRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRaceLevelRankInfo) ProtoMessage() {}

func (x *SCRaceLevelRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_racelevelactivity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRaceLevelRankInfo.ProtoReflect.Descriptor instead.
func (*SCRaceLevelRankInfo) Descriptor() ([]byte, []int) {
	return file_racelevelactivity_proto_rawDescGZIP(), []int{10}
}

func (x *SCRaceLevelRankInfo) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *SCRaceLevelRankInfo) GetGroup() *ActivityGroupInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

var File_racelevelactivity_proto protoreflect.FileDescriptor

var file_racelevelactivity_proto_rawDesc = []byte{
	0x0a, 0x17, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x01, 0x0a, 0x15, 0x52, 0x61,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52,
	0x61, 0x6e, 0x6b, 0x22, 0xbb, 0x02, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x42, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x52, 0x0a, 0x1a, 0x43, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x53, 0x43, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x43, 0x53, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x55, 0x0a, 0x17, 0x53, 0x43, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x28, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x48, 0x0a, 0x16, 0x43, 0x53, 0x52, 0x61, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x54, 0x0a, 0x16, 0x53, 0x43, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x28, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x2f, 0x0a, 0x13, 0x43, 0x53, 0x52, 0x61, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x13, 0x53, 0x43, 0x52, 0x61,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x28, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x17, 0x48, 0x01, 0x5a,
	0x06, 0x2e, 0x2f, 0x3b, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x0a, 0x4d, 0x4d, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_racelevelactivity_proto_rawDescOnce sync.Once
	file_racelevelactivity_proto_rawDescData = file_racelevelactivity_proto_rawDesc
)

func file_racelevelactivity_proto_rawDescGZIP() []byte {
	file_racelevelactivity_proto_rawDescOnce.Do(func() {
		file_racelevelactivity_proto_rawDescData = protoimpl.X.CompressGZIP(file_racelevelactivity_proto_rawDescData)
	})
	return file_racelevelactivity_proto_rawDescData
}

var file_racelevelactivity_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_racelevelactivity_proto_goTypes = []interface{}{
	(*RaceLevelActivityInfo)(nil),      // 0: RaceLevelActivityInfo
	(*GroupMemberInfo)(nil),            // 1: GroupMemberInfo
	(*ActivityGroupInfo)(nil),          // 2: ActivityGroupInfo
	(*CSRequestRaceLevelActivity)(nil), // 3: CSRequestRaceLevelActivity
	(*SCRequestRaceLevelActivity)(nil), // 4: SCRequestRaceLevelActivity
	(*CSJoinRaceLevelActivity)(nil),    // 5: CSJoinRaceLevelActivity
	(*SCJoinRaceLevelActivity)(nil),    // 6: SCJoinRaceLevelActivity
	(*CSRaceLevelUpdateScore)(nil),     // 7: CSRaceLevelUpdateScore
	(*SCRaceLevelUpdateScore)(nil),     // 8: SCRaceLevelUpdateScore
	(*CSRaceLevelRankInfo)(nil),        // 9: CSRaceLevelRankInfo
	(*SCRaceLevelRankInfo)(nil),        // 10: SCRaceLevelRankInfo
}
var file_racelevelactivity_proto_depIdxs = []int32{
	1, // 0: ActivityGroupInfo.members:type_name -> GroupMemberInfo
	2, // 1: SCRequestRaceLevelActivity.group:type_name -> ActivityGroupInfo
	0, // 2: SCRequestRaceLevelActivity.activityInfo:type_name -> RaceLevelActivityInfo
	2, // 3: SCJoinRaceLevelActivity.group:type_name -> ActivityGroupInfo
	2, // 4: SCRaceLevelUpdateScore.group:type_name -> ActivityGroupInfo
	2, // 5: SCRaceLevelRankInfo.group:type_name -> ActivityGroupInfo
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_racelevelactivity_proto_init() }
func file_racelevelactivity_proto_init() {
	if File_racelevelactivity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_racelevelactivity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceLevelActivityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_racelevelactivity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_racelevelactivity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_racelevelactivity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSRequestRaceLevelActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_racelevelactivity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRequestRaceLevelActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_racelevelactivity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSJoinRaceLevelActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_racelevelactivity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCJoinRaceLevelActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_racelevelactivity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSRaceLevelUpdateScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_racelevelactivity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRaceLevelUpdateScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_racelevelactivity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSRaceLevelRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_racelevelactivity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRaceLevelRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_racelevelactivity_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_racelevelactivity_proto_goTypes,
		DependencyIndexes: file_racelevelactivity_proto_depIdxs,
		MessageInfos:      file_racelevelactivity_proto_msgTypes,
	}.Build()
	File_racelevelactivity_proto = out.File
	file_racelevelactivity_proto_rawDesc = nil
	file_racelevelactivity_proto_goTypes = nil
	file_racelevelactivity_proto_depIdxs = nil
}
