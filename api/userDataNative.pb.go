// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: userDataNative.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//好友类型
type FriendType int32

const (
	//游戏好友
	FriendType_Game FriendType = 0
	//Facebook好友
	FriendType_Facebook FriendType = 1
	//机器人好友
	FriendType_Robot FriendType = 2
)

// Enum value maps for FriendType.
var (
	FriendType_name = map[int32]string{
		0: "Game",
		1: "Facebook",
		2: "Robot",
	}
	FriendType_value = map[string]int32{
		"Game":     0,
		"Facebook": 1,
		"Robot":    2,
	}
)

func (x FriendType) Enum() *FriendType {
	p := new(FriendType)
	*p = x
	return p
}

func (x FriendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendType) Descriptor() protoreflect.EnumDescriptor {
	return file_userDataNative_proto_enumTypes[0].Descriptor()
}

func (FriendType) Type() protoreflect.EnumType {
	return &file_userDataNative_proto_enumTypes[0]
}

func (x FriendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendType.Descriptor instead.
func (FriendType) EnumDescriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{0}
}

//地图上的泡泡
type MapBubble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X                     float32                 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                     float32                 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Type                  int32                   `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Mats                  []*MaterialJson         `protobuf:"bytes,4,rep,name=mats,proto3" json:"mats,omitempty"`
	Id                    int32                   `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	StartTimeUct          int64                   `protobuf:"varint,6,opt,name=startTimeUct,proto3" json:"startTimeUct,omitempty"`
	BubbleBoxMats         []*BubbleBoxData        `protobuf:"bytes,7,rep,name=bubbleBoxMats,proto3" json:"bubbleBoxMats,omitempty"`
	FunctionKey           int64                   `protobuf:"varint,8,opt,name=functionKey,proto3" json:"functionKey,omitempty"`
	IsInit                int32                   `protobuf:"varint,9,opt,name=isInit,proto3" json:"isInit,omitempty"`
	Level                 int32                   `protobuf:"varint,10,opt,name=level,proto3" json:"level,omitempty"`
	MaxMatsCount          int32                   `protobuf:"varint,11,opt,name=maxMatsCount,proto3" json:"maxMatsCount,omitempty"`
	CreateTotalEnterLevel int32                   `protobuf:"varint,12,opt,name=createTotalEnterLevel,proto3" json:"createTotalEnterLevel,omitempty"`
	OnlyId                string                  `protobuf:"bytes,13,opt,name=onlyId,proto3" json:"onlyId,omitempty"`
	SuperBubbleMats       []*SuperLevelBubbleData `protobuf:"bytes,14,rep,name=superBubbleMats,proto3" json:"superBubbleMats,omitempty"`
}

func (x *MapBubble) Reset() {
	*x = MapBubble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBubble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBubble) ProtoMessage() {}

func (x *MapBubble) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBubble.ProtoReflect.Descriptor instead.
func (*MapBubble) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{0}
}

func (x *MapBubble) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MapBubble) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MapBubble) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MapBubble) GetMats() []*MaterialJson {
	if x != nil {
		return x.Mats
	}
	return nil
}

func (x *MapBubble) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MapBubble) GetStartTimeUct() int64 {
	if x != nil {
		return x.StartTimeUct
	}
	return 0
}

func (x *MapBubble) GetBubbleBoxMats() []*BubbleBoxData {
	if x != nil {
		return x.BubbleBoxMats
	}
	return nil
}

func (x *MapBubble) GetFunctionKey() int64 {
	if x != nil {
		return x.FunctionKey
	}
	return 0
}

func (x *MapBubble) GetIsInit() int32 {
	if x != nil {
		return x.IsInit
	}
	return 0
}

func (x *MapBubble) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MapBubble) GetMaxMatsCount() int32 {
	if x != nil {
		return x.MaxMatsCount
	}
	return 0
}

func (x *MapBubble) GetCreateTotalEnterLevel() int32 {
	if x != nil {
		return x.CreateTotalEnterLevel
	}
	return 0
}

func (x *MapBubble) GetOnlyId() string {
	if x != nil {
		return x.OnlyId
	}
	return ""
}

func (x *MapBubble) GetSuperBubbleMats() []*SuperLevelBubbleData {
	if x != nil {
		return x.SuperBubbleMats
	}
	return nil
}

//功能建筑挤压泡泡数据
type FunctionMapBubble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       int64               `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	FuncDatas []*BuildingFuncData `protobuf:"bytes,2,rep,name=funcDatas,proto3" json:"funcDatas,omitempty"`
}

func (x *FunctionMapBubble) Reset() {
	*x = FunctionMapBubble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionMapBubble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionMapBubble) ProtoMessage() {}

func (x *FunctionMapBubble) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionMapBubble.ProtoReflect.Descriptor instead.
func (*FunctionMapBubble) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{1}
}

func (x *FunctionMapBubble) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *FunctionMapBubble) GetFuncDatas() []*BuildingFuncData {
	if x != nil {
		return x.FuncDatas
	}
	return nil
}

//功能建筑挤压泡泡数据
type FunctionMapBubbleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bubbles []*FunctionMapBubble `protobuf:"bytes,1,rep,name=bubbles,proto3" json:"bubbles,omitempty"`
}

func (x *FunctionMapBubbleData) Reset() {
	*x = FunctionMapBubbleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionMapBubbleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionMapBubbleData) ProtoMessage() {}

func (x *FunctionMapBubbleData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionMapBubbleData.ProtoReflect.Descriptor instead.
func (*FunctionMapBubbleData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{2}
}

func (x *FunctionMapBubbleData) GetBubbles() []*FunctionMapBubble {
	if x != nil {
		return x.Bubbles
	}
	return nil
}

//泡泡里的自定义宝箱
type BubbleBoxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxID int32           `protobuf:"varint,1,opt,name=boxID,proto3" json:"boxID,omitempty"`
	Mats  []*MaterialJson `protobuf:"bytes,7,rep,name=mats,proto3" json:"mats,omitempty"`
}

func (x *BubbleBoxData) Reset() {
	*x = BubbleBoxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BubbleBoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BubbleBoxData) ProtoMessage() {}

func (x *BubbleBoxData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BubbleBoxData.ProtoReflect.Descriptor instead.
func (*BubbleBoxData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{3}
}

func (x *BubbleBoxData) GetBoxID() int32 {
	if x != nil {
		return x.BoxID
	}
	return 0
}

func (x *BubbleBoxData) GetMats() []*MaterialJson {
	if x != nil {
		return x.Mats
	}
	return nil
}

//超级关卡泡泡
type SuperLevelBubbleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType   int32           `protobuf:"varint,1,opt,name=itemType,proto3" json:"itemType,omitempty"`
	BubbleData *MapBubble      `protobuf:"bytes,2,opt,name=bubbleData,proto3" json:"bubbleData,omitempty"`
	ItemData   []*MaterialJson `protobuf:"bytes,3,rep,name=itemData,proto3" json:"itemData,omitempty"`
}

func (x *SuperLevelBubbleData) Reset() {
	*x = SuperLevelBubbleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperLevelBubbleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperLevelBubbleData) ProtoMessage() {}

func (x *SuperLevelBubbleData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperLevelBubbleData.ProtoReflect.Descriptor instead.
func (*SuperLevelBubbleData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{4}
}

func (x *SuperLevelBubbleData) GetItemType() int32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *SuperLevelBubbleData) GetBubbleData() *MapBubble {
	if x != nil {
		return x.BubbleData
	}
	return nil
}

func (x *SuperLevelBubbleData) GetItemData() []*MaterialJson {
	if x != nil {
		return x.ItemData
	}
	return nil
}

//地图上的宝箱
type MapBasket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                      int32           `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Time                      int64           `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Click                     int32           `protobuf:"varint,5,opt,name=click,proto3" json:"click,omitempty"`
	Isget                     bool            `protobuf:"varint,6,opt,name=isget,proto3" json:"isget,omitempty"`
	Mats                      []*MaterialJson `protobuf:"bytes,7,rep,name=mats,proto3" json:"mats,omitempty"`
	TimeBoxIdle               bool            `protobuf:"varint,8,opt,name=timeBoxIdle,proto3" json:"timeBoxIdle,omitempty"`
	FromBubbleTotalEnterLevel int32           `protobuf:"varint,9,opt,name=fromBubbleTotalEnterLevel,proto3" json:"fromBubbleTotalEnterLevel,omitempty"`
	NeedCDTime                int32           `protobuf:"varint,10,opt,name=needCDTime,proto3" json:"needCDTime,omitempty"`
	IsYetLevelUp              bool            `protobuf:"varint,11,opt,name=isYetLevelUp,proto3" json:"isYetLevelUp,omitempty"`
}

func (x *MapBasket) Reset() {
	*x = MapBasket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBasket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBasket) ProtoMessage() {}

func (x *MapBasket) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBasket.ProtoReflect.Descriptor instead.
func (*MapBasket) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{5}
}

func (x *MapBasket) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MapBasket) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MapBasket) GetClick() int32 {
	if x != nil {
		return x.Click
	}
	return 0
}

func (x *MapBasket) GetIsget() bool {
	if x != nil {
		return x.Isget
	}
	return false
}

func (x *MapBasket) GetMats() []*MaterialJson {
	if x != nil {
		return x.Mats
	}
	return nil
}

func (x *MapBasket) GetTimeBoxIdle() bool {
	if x != nil {
		return x.TimeBoxIdle
	}
	return false
}

func (x *MapBasket) GetFromBubbleTotalEnterLevel() int32 {
	if x != nil {
		return x.FromBubbleTotalEnterLevel
	}
	return 0
}

func (x *MapBasket) GetNeedCDTime() int32 {
	if x != nil {
		return x.NeedCDTime
	}
	return 0
}

func (x *MapBasket) GetIsYetLevelUp() bool {
	if x != nil {
		return x.IsYetLevelUp
	}
	return false
}

//UI宝箱的数据
type UITimeBoxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UiTimeBoxDatas       []*UITimeBox `protobuf:"bytes,1,rep,name=uiTimeBoxDatas,proto3" json:"uiTimeBoxDatas,omitempty"`
	WaitOpenTimeBoxQueue []*UITimeBox `protobuf:"bytes,2,rep,name=waitOpenTimeBoxQueue,proto3" json:"waitOpenTimeBoxQueue,omitempty"`
	FreeBoxQueueIndex    int32        `protobuf:"varint,3,opt,name=freeBoxQueueIndex,proto3" json:"freeBoxQueueIndex,omitempty"`
	PayBoxQueueIndex     int32        `protobuf:"varint,4,opt,name=payBoxQueueIndex,proto3" json:"payBoxQueueIndex,omitempty"`
	MaxLevelQueueIndex   int32        `protobuf:"varint,5,opt,name=maxLevelQueueIndex,proto3" json:"maxLevelQueueIndex,omitempty"`
	LastFreeBoxQueueID   int32        `protobuf:"varint,6,opt,name=lastFreeBoxQueueID,proto3" json:"lastFreeBoxQueueID,omitempty"`
	LastPayBoxQueueID    int32        `protobuf:"varint,7,opt,name=lastPayBoxQueueID,proto3" json:"lastPayBoxQueueID,omitempty"`
}

func (x *UITimeBoxData) Reset() {
	*x = UITimeBoxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UITimeBoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UITimeBoxData) ProtoMessage() {}

func (x *UITimeBoxData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UITimeBoxData.ProtoReflect.Descriptor instead.
func (*UITimeBoxData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{6}
}

func (x *UITimeBoxData) GetUiTimeBoxDatas() []*UITimeBox {
	if x != nil {
		return x.UiTimeBoxDatas
	}
	return nil
}

func (x *UITimeBoxData) GetWaitOpenTimeBoxQueue() []*UITimeBox {
	if x != nil {
		return x.WaitOpenTimeBoxQueue
	}
	return nil
}

func (x *UITimeBoxData) GetFreeBoxQueueIndex() int32 {
	if x != nil {
		return x.FreeBoxQueueIndex
	}
	return 0
}

func (x *UITimeBoxData) GetPayBoxQueueIndex() int32 {
	if x != nil {
		return x.PayBoxQueueIndex
	}
	return 0
}

func (x *UITimeBoxData) GetMaxLevelQueueIndex() int32 {
	if x != nil {
		return x.MaxLevelQueueIndex
	}
	return 0
}

func (x *UITimeBoxData) GetLastFreeBoxQueueID() int32 {
	if x != nil {
		return x.LastFreeBoxQueueID
	}
	return 0
}

func (x *UITimeBoxData) GetLastPayBoxQueueID() int32 {
	if x != nil {
		return x.LastPayBoxQueueID
	}
	return 0
}

type UITimeBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//宝箱唯一的ID
	BoxOnlyId int64 `protobuf:"varint,1,opt,name=boxOnlyId,proto3" json:"boxOnlyId,omitempty"`
	//宝箱的building表里的id
	BoxID int32 `protobuf:"varint,2,opt,name=boxID,proto3" json:"boxID,omitempty"`
	//槽位编号
	SlotID int32 `protobuf:"varint,3,opt,name=slotID,proto3" json:"slotID,omitempty"`
	//开始解锁时间
	StartUnLockTime int64 `protobuf:"varint,4,opt,name=startUnLockTime,proto3" json:"startUnLockTime,omitempty"`
	//宝箱状态
	BoxState int32 `protobuf:"varint,5,opt,name=boxState,proto3" json:"boxState,omitempty"`
	//宝箱CD时间
	BoxCdTime int32 `protobuf:"varint,6,opt,name=boxCdTime,proto3" json:"boxCdTime,omitempty"`
}

func (x *UITimeBox) Reset() {
	*x = UITimeBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UITimeBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UITimeBox) ProtoMessage() {}

func (x *UITimeBox) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UITimeBox.ProtoReflect.Descriptor instead.
func (*UITimeBox) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{7}
}

func (x *UITimeBox) GetBoxOnlyId() int64 {
	if x != nil {
		return x.BoxOnlyId
	}
	return 0
}

func (x *UITimeBox) GetBoxID() int32 {
	if x != nil {
		return x.BoxID
	}
	return 0
}

func (x *UITimeBox) GetSlotID() int32 {
	if x != nil {
		return x.SlotID
	}
	return 0
}

func (x *UITimeBox) GetStartUnLockTime() int64 {
	if x != nil {
		return x.StartUnLockTime
	}
	return 0
}

func (x *UITimeBox) GetBoxState() int32 {
	if x != nil {
		return x.BoxState
	}
	return 0
}

func (x *UITimeBox) GetBoxCdTime() int32 {
	if x != nil {
		return x.BoxCdTime
	}
	return 0
}

//用户基础信息
type BaseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid string `protobuf:"bytes,1,opt,name=accountid,proto3" json:"accountid,omitempty"`
	//名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	//创建时间
	CreateDay uint32 `protobuf:"varint,3,opt,name=createDay,proto3" json:"createDay,omitempty"`
	//token
	Token string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	//userID
	UserID int64 `protobuf:"varint,5,opt,name=userID,proto3" json:"userID,omitempty"`
	//headIcon
	HeadIcon string `protobuf:"bytes,6,opt,name=headIcon,proto3" json:"headIcon,omitempty"`
	//fb ID
	FbId string `protobuf:"bytes,7,opt,name=fbId,proto3" json:"fbId,omitempty"`
	//fb 头像URL
	FbHeadUrl string `protobuf:"bytes,8,opt,name=fbHeadUrl,proto3" json:"fbHeadUrl,omitempty"`
	//device2
	DeviceID2 string `protobuf:"bytes,9,opt,name=deviceID2,proto3" json:"deviceID2,omitempty"`
	//本地版本号
	Version int32 `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	//安装时的版本号
	InstallVersion int32 `protobuf:"varint,11,opt,name=installVersion,proto3" json:"installVersion,omitempty"`
	//是否已经被禁止
	Forbid int32 `protobuf:"varint,12,opt,name=forbid,proto3" json:"forbid,omitempty"`
	//是否第一次进入
	IsFirstEnter int32 `protobuf:"varint,13,opt,name=isFirstEnter,proto3" json:"isFirstEnter,omitempty"`
	//ABTest模式
	//0 NotSet
	//1 老用户
	//2 A
	//3 B
	ABTestModel int32 `protobuf:"varint,14,opt,name=ABTestModel,proto3" json:"ABTestModel,omitempty"`
	//是否是作弊用户
	CheatUser int32 `protobuf:"varint,15,opt,name=cheatUser,proto3" json:"cheatUser,omitempty"`
	//是否已经进入过Merge场景
	EnterMergeScene int32 `protobuf:"varint,16,opt,name=enterMergeScene,proto3" json:"enterMergeScene,omitempty"`
	//国家
	Country string `protobuf:"bytes,17,opt,name=country,proto3" json:"country,omitempty"`
	//玩家被点赞的数量
	LikedCount int32 `protobuf:"varint,18,opt,name=likedCount,proto3" json:"likedCount,omitempty"`
	//AB测试的配置
	ABConfig []*ABConfig `protobuf:"bytes,19,rep,name=ABConfig,proto3" json:"ABConfig,omitempty"`
	//是否是测试用户
	TestUser int32 `protobuf:"varint,20,opt,name=testUser,proto3" json:"testUser,omitempty"`
	//之前的testType
	OldTestType int32 `protobuf:"varint,21,opt,name=oldTestType,proto3" json:"oldTestType,omitempty"`
}

func (x *BaseData) Reset() {
	*x = BaseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseData) ProtoMessage() {}

func (x *BaseData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseData.ProtoReflect.Descriptor instead.
func (*BaseData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{8}
}

func (x *BaseData) GetAccountid() string {
	if x != nil {
		return x.Accountid
	}
	return ""
}

func (x *BaseData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BaseData) GetCreateDay() uint32 {
	if x != nil {
		return x.CreateDay
	}
	return 0
}

func (x *BaseData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *BaseData) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *BaseData) GetHeadIcon() string {
	if x != nil {
		return x.HeadIcon
	}
	return ""
}

func (x *BaseData) GetFbId() string {
	if x != nil {
		return x.FbId
	}
	return ""
}

func (x *BaseData) GetFbHeadUrl() string {
	if x != nil {
		return x.FbHeadUrl
	}
	return ""
}

func (x *BaseData) GetDeviceID2() string {
	if x != nil {
		return x.DeviceID2
	}
	return ""
}

func (x *BaseData) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BaseData) GetInstallVersion() int32 {
	if x != nil {
		return x.InstallVersion
	}
	return 0
}

func (x *BaseData) GetForbid() int32 {
	if x != nil {
		return x.Forbid
	}
	return 0
}

func (x *BaseData) GetIsFirstEnter() int32 {
	if x != nil {
		return x.IsFirstEnter
	}
	return 0
}

func (x *BaseData) GetABTestModel() int32 {
	if x != nil {
		return x.ABTestModel
	}
	return 0
}

func (x *BaseData) GetCheatUser() int32 {
	if x != nil {
		return x.CheatUser
	}
	return 0
}

func (x *BaseData) GetEnterMergeScene() int32 {
	if x != nil {
		return x.EnterMergeScene
	}
	return 0
}

func (x *BaseData) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *BaseData) GetLikedCount() int32 {
	if x != nil {
		return x.LikedCount
	}
	return 0
}

func (x *BaseData) GetABConfig() []*ABConfig {
	if x != nil {
		return x.ABConfig
	}
	return nil
}

func (x *BaseData) GetTestUser() int32 {
	if x != nil {
		return x.TestUser
	}
	return 0
}

func (x *BaseData) GetOldTestType() int32 {
	if x != nil {
		return x.OldTestType
	}
	return 0
}

type HeartData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//体力
	Heart int32 `protobuf:"varint,1,opt,name=heart,proto3" json:"heart,omitempty"`
	//上次体力使用时间
	LastHeartUseTime int32 `protobuf:"varint,2,opt,name=lastHeartUseTime,proto3" json:"lastHeartUseTime,omitempty"`
	//无体力时间
	NoHeartTime int64 `protobuf:"varint,3,opt,name=noHeartTime,proto3" json:"noHeartTime,omitempty"`
	//收到无限体力的时间
	ReceiveInfiniteTime int32 `protobuf:"varint,4,opt,name=receiveInfiniteTime,proto3" json:"receiveInfiniteTime,omitempty"`
}

func (x *HeartData) Reset() {
	*x = HeartData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartData) ProtoMessage() {}

func (x *HeartData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartData.ProtoReflect.Descriptor instead.
func (*HeartData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{9}
}

func (x *HeartData) GetHeart() int32 {
	if x != nil {
		return x.Heart
	}
	return 0
}

func (x *HeartData) GetLastHeartUseTime() int32 {
	if x != nil {
		return x.LastHeartUseTime
	}
	return 0
}

func (x *HeartData) GetNoHeartTime() int64 {
	if x != nil {
		return x.NoHeartTime
	}
	return 0
}

func (x *HeartData) GetReceiveInfiniteTime() int32 {
	if x != nil {
		return x.ReceiveInfiniteTime
	}
	return 0
}

//物品信息
type ItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemBags           []*MaterialJson `protobuf:"bytes,1,rep,name=itemBags,proto3" json:"itemBags,omitempty"`
	ItemLockeds        []int32         `protobuf:"varint,2,rep,packed,name=itemLockeds,proto3" json:"itemLockeds,omitempty"`
	PreItemAutoSelects []int32         `protobuf:"varint,3,rep,packed,name=preItemAutoSelects,proto3" json:"preItemAutoSelects,omitempty"`
	HistoryBuy         []*MaterialJson `protobuf:"bytes,4,rep,name=historyBuy,proto3" json:"historyBuy,omitempty"`
	HistoryUse         []*MaterialJson `protobuf:"bytes,5,rep,name=historyUse,proto3" json:"historyUse,omitempty"`
}

func (x *ItemData) Reset() {
	*x = ItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemData) ProtoMessage() {}

func (x *ItemData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemData.ProtoReflect.Descriptor instead.
func (*ItemData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{10}
}

func (x *ItemData) GetItemBags() []*MaterialJson {
	if x != nil {
		return x.ItemBags
	}
	return nil
}

func (x *ItemData) GetItemLockeds() []int32 {
	if x != nil {
		return x.ItemLockeds
	}
	return nil
}

func (x *ItemData) GetPreItemAutoSelects() []int32 {
	if x != nil {
		return x.PreItemAutoSelects
	}
	return nil
}

func (x *ItemData) GetHistoryBuy() []*MaterialJson {
	if x != nil {
		return x.HistoryBuy
	}
	return nil
}

func (x *ItemData) GetHistoryUse() []*MaterialJson {
	if x != nil {
		return x.HistoryUse
	}
	return nil
}

//泡泡信息
type BubbleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bubbles []*MapBubble `protobuf:"bytes,1,rep,name=bubbles,proto3" json:"bubbles,omitempty"`
}

func (x *BubbleData) Reset() {
	*x = BubbleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BubbleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BubbleData) ProtoMessage() {}

func (x *BubbleData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BubbleData.ProtoReflect.Descriptor instead.
func (*BubbleData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{11}
}

func (x *BubbleData) GetBubbles() []*MapBubble {
	if x != nil {
		return x.Bubbles
	}
	return nil
}

//宝箱信息
type BasketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Baskets []*MapBasket `protobuf:"bytes,1,rep,name=baskets,proto3" json:"baskets,omitempty"`
}

func (x *BasketData) Reset() {
	*x = BasketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasketData) ProtoMessage() {}

func (x *BasketData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasketData.ProtoReflect.Descriptor instead.
func (*BasketData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{12}
}

func (x *BasketData) GetBaskets() []*MapBasket {
	if x != nil {
		return x.Baskets
	}
	return nil
}

//建筑信息
type MapBuildingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//地图是否已经初始化
	BuildingInit int32 `protobuf:"varint,1,opt,name=buildingInit,proto3" json:"buildingInit,omitempty"`
	//建筑
	MapBuildings []*MapBuilding `protobuf:"bytes,2,rep,name=mapBuildings,proto3" json:"mapBuildings,omitempty"`
	//版本号
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	//是否替换过
	IsReplanceMagicStick bool `protobuf:"varint,4,opt,name=isReplanceMagicStick,proto3" json:"isReplanceMagicStick,omitempty"`
	//是否替换过魔法棒新
	IsReplanceMagicStickNew bool `protobuf:"varint,5,opt,name=isReplanceMagicStickNew,proto3" json:"isReplanceMagicStickNew,omitempty"`
}

func (x *MapBuildingData) Reset() {
	*x = MapBuildingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBuildingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBuildingData) ProtoMessage() {}

func (x *MapBuildingData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBuildingData.ProtoReflect.Descriptor instead.
func (*MapBuildingData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{13}
}

func (x *MapBuildingData) GetBuildingInit() int32 {
	if x != nil {
		return x.BuildingInit
	}
	return 0
}

func (x *MapBuildingData) GetMapBuildings() []*MapBuilding {
	if x != nil {
		return x.MapBuildings
	}
	return nil
}

func (x *MapBuildingData) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MapBuildingData) GetIsReplanceMagicStick() bool {
	if x != nil {
		return x.IsReplanceMagicStick
	}
	return false
}

func (x *MapBuildingData) GetIsReplanceMagicStickNew() bool {
	if x != nil {
		return x.IsReplanceMagicStickNew
	}
	return false
}

//升级建筑相关
type BuildingMergeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PieceMergeCounters []*MaterialJson `protobuf:"bytes,1,rep,name=pieceMergeCounters,proto3" json:"pieceMergeCounters,omitempty"`
}

func (x *BuildingMergeCounter) Reset() {
	*x = BuildingMergeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingMergeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingMergeCounter) ProtoMessage() {}

func (x *BuildingMergeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingMergeCounter.ProtoReflect.Descriptor instead.
func (*BuildingMergeCounter) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{14}
}

func (x *BuildingMergeCounter) GetPieceMergeCounters() []*MaterialJson {
	if x != nil {
		return x.PieceMergeCounters
	}
	return nil
}

//新建筑通知
type NewBuildingNotices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewBuildingNotices []int32 `protobuf:"varint,1,rep,packed,name=newBuildingNotices,proto3" json:"newBuildingNotices,omitempty"`
}

func (x *NewBuildingNotices) Reset() {
	*x = NewBuildingNotices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBuildingNotices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBuildingNotices) ProtoMessage() {}

func (x *NewBuildingNotices) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBuildingNotices.ProtoReflect.Descriptor instead.
func (*NewBuildingNotices) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{15}
}

func (x *NewBuildingNotices) GetNewBuildingNotices() []int32 {
	if x != nil {
		return x.NewBuildingNotices
	}
	return nil
}

//解锁进度
type MapGridSprites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GridSprites []*MaterialJson `protobuf:"bytes,1,rep,name=gridSprites,proto3" json:"gridSprites,omitempty"`
}

func (x *MapGridSprites) Reset() {
	*x = MapGridSprites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapGridSprites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapGridSprites) ProtoMessage() {}

func (x *MapGridSprites) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapGridSprites.ProtoReflect.Descriptor instead.
func (*MapGridSprites) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{16}
}

func (x *MapGridSprites) GetGridSprites() []*MaterialJson {
	if x != nil {
		return x.GridSprites
	}
	return nil
}

//系统设置
type SystemSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//音乐
	Se int32 `protobuf:"varint,1,opt,name=se,proto3" json:"se,omitempty"`
	//音效
	Bgm int32 `protobuf:"varint,2,opt,name=bgm,proto3" json:"bgm,omitempty"`
	//建筑详情是否折叠
	Flod int32 `protobuf:"varint,3,opt,name=flod,proto3" json:"flod,omitempty"`
	//当前选择的语言
	Language int32 `protobuf:"varint,4,opt,name=Language,proto3" json:"Language,omitempty"`
	//当前是否开启通知
	IsOpenInform int32 `protobuf:"varint,5,opt,name=isOpenInform,proto3" json:"isOpenInform,omitempty"`
	//是否关注我们
	IsAttention int32 `protobuf:"varint,6,opt,name=isAttention,proto3" json:"isAttention,omitempty"`
	//是否重叠
	IsOverLap bool `protobuf:"varint,7,opt,name=isOverLap,proto3" json:"isOverLap,omitempty"`
	//是否连锁合并
	IsCombo bool `protobuf:"varint,8,opt,name=isCombo,proto3" json:"isCombo,omitempty"`
	//是否可以添加好友
	IsAddFriends bool `protobuf:"varint,9,opt,name=isAddFriends,proto3" json:"isAddFriends,omitempty"`
	//是否是本地存档
	IsLocal bool `protobuf:"varint,10,opt,name=isLocal,proto3" json:"isLocal,omitempty"`
	//是否开启融合泡泡
	IsEnableFuseBubble bool `protobuf:"varint,11,opt,name=isEnableFuseBubble,proto3" json:"isEnableFuseBubble,omitempty"`
	//上次打开融合泡泡界面的时候
	LastOpenFuseBubbleWindowTime int64 `protobuf:"varint,12,opt,name=lastOpenFuseBubbleWindowTime,proto3" json:"lastOpenFuseBubbleWindowTime,omitempty"`
	//是否选择过语言
	IsSelectLanguage bool `protobuf:"varint,13,opt,name=isSelectLanguage,proto3" json:"isSelectLanguage,omitempty"`
}

func (x *SystemSetting) Reset() {
	*x = SystemSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSetting) ProtoMessage() {}

func (x *SystemSetting) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSetting.ProtoReflect.Descriptor instead.
func (*SystemSetting) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{17}
}

func (x *SystemSetting) GetSe() int32 {
	if x != nil {
		return x.Se
	}
	return 0
}

func (x *SystemSetting) GetBgm() int32 {
	if x != nil {
		return x.Bgm
	}
	return 0
}

func (x *SystemSetting) GetFlod() int32 {
	if x != nil {
		return x.Flod
	}
	return 0
}

func (x *SystemSetting) GetLanguage() int32 {
	if x != nil {
		return x.Language
	}
	return 0
}

func (x *SystemSetting) GetIsOpenInform() int32 {
	if x != nil {
		return x.IsOpenInform
	}
	return 0
}

func (x *SystemSetting) GetIsAttention() int32 {
	if x != nil {
		return x.IsAttention
	}
	return 0
}

func (x *SystemSetting) GetIsOverLap() bool {
	if x != nil {
		return x.IsOverLap
	}
	return false
}

func (x *SystemSetting) GetIsCombo() bool {
	if x != nil {
		return x.IsCombo
	}
	return false
}

func (x *SystemSetting) GetIsAddFriends() bool {
	if x != nil {
		return x.IsAddFriends
	}
	return false
}

func (x *SystemSetting) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *SystemSetting) GetIsEnableFuseBubble() bool {
	if x != nil {
		return x.IsEnableFuseBubble
	}
	return false
}

func (x *SystemSetting) GetLastOpenFuseBubbleWindowTime() int64 {
	if x != nil {
		return x.LastOpenFuseBubbleWindowTime
	}
	return 0
}

func (x *SystemSetting) GetIsSelectLanguage() bool {
	if x != nil {
		return x.IsSelectLanguage
	}
	return false
}

//相机数据
type CameraData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X       float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y       float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Orthog  float32 `protobuf:"fixed32,4,opt,name=orthog,proto3" json:"orthog,omitempty"`
	TimeUtc int64   `protobuf:"varint,5,opt,name=timeUtc,proto3" json:"timeUtc,omitempty"`
}

func (x *CameraData) Reset() {
	*x = CameraData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraData) ProtoMessage() {}

func (x *CameraData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraData.ProtoReflect.Descriptor instead.
func (*CameraData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{18}
}

func (x *CameraData) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *CameraData) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *CameraData) GetOrthog() float32 {
	if x != nil {
		return x.Orthog
	}
	return 0
}

func (x *CameraData) GetTimeUtc() int64 {
	if x != nil {
		return x.TimeUtc
	}
	return 0
}

//任务信息
type TaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks       []*Task    `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	EndTasks    []*TaskEnd `protobuf:"bytes,2,rep,name=endTasks,proto3" json:"endTasks,omitempty"`
	AllEndTasks []*TaskEnd `protobuf:"bytes,3,rep,name=allEndTasks,proto3" json:"allEndTasks,omitempty"`
	EndPlotIds  []int32    `protobuf:"varint,4,rep,packed,name=endPlotIds,proto3" json:"endPlotIds,omitempty"`
	//跳过次数
	SkipTimes int32 `protobuf:"varint,5,opt,name=skipTimes,proto3" json:"skipTimes,omitempty"`
	//跳过开始时间
	SkipStartTime int32 `protobuf:"varint,6,opt,name=skipStartTime,proto3" json:"skipStartTime,omitempty"`
	//高级元素任务的刷新次数
	NoCommonElementTaskRefreshTimes int32 `protobuf:"varint,7,opt,name=noCommonElementTaskRefreshTimes,proto3" json:"noCommonElementTaskRefreshTimes,omitempty"`
}

func (x *TaskData) Reset() {
	*x = TaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskData) ProtoMessage() {}

func (x *TaskData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskData.ProtoReflect.Descriptor instead.
func (*TaskData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{19}
}

func (x *TaskData) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *TaskData) GetEndTasks() []*TaskEnd {
	if x != nil {
		return x.EndTasks
	}
	return nil
}

func (x *TaskData) GetAllEndTasks() []*TaskEnd {
	if x != nil {
		return x.AllEndTasks
	}
	return nil
}

func (x *TaskData) GetEndPlotIds() []int32 {
	if x != nil {
		return x.EndPlotIds
	}
	return nil
}

func (x *TaskData) GetSkipTimes() int32 {
	if x != nil {
		return x.SkipTimes
	}
	return 0
}

func (x *TaskData) GetSkipStartTime() int32 {
	if x != nil {
		return x.SkipStartTime
	}
	return 0
}

func (x *TaskData) GetNoCommonElementTaskRefreshTimes() int32 {
	if x != nil {
		return x.NoCommonElementTaskRefreshTimes
	}
	return 0
}

//任务
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//任务id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//状态
	State int32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	//进度
	Processes int32 `protobuf:"varint,3,opt,name=processes,proto3" json:"processes,omitempty"`
	//开始时间
	StartTime int64 `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	//剧情选择参数
	PlotId int32 `protobuf:"varint,5,opt,name=plotId,proto3" json:"plotId,omitempty"`
	//跳过所需钻石
	SkipCost int32 `protobuf:"varint,6,opt,name=skipCost,proto3" json:"skipCost,omitempty"`
	//关卡结束奖励出现任务目标剩余次数N
	TargetShowLeftTimes int32 `protobuf:"varint,7,opt,name=targetShowLeftTimes,proto3" json:"targetShowLeftTimes,omitempty"`
	//关卡结束奖励未选中次数M
	NoSelectedTimes int32 `protobuf:"varint,8,opt,name=noSelectedTimes,proto3" json:"noSelectedTimes,omitempty"`
	//任务类型
	TaskType int32 `protobuf:"varint,9,opt,name=taskType,proto3" json:"taskType,omitempty"`
	//任务目标类型
	TaskTargetType int32 `protobuf:"varint,10,opt,name=taskTargetType,proto3" json:"taskTargetType,omitempty"`
	//任务目标
	TaskTarget int32 `protobuf:"varint,11,opt,name=taskTarget,proto3" json:"taskTarget,omitempty"`
	//任务目标数量
	TaskTargetNum int32 `protobuf:"varint,12,opt,name=taskTargetNum,proto3" json:"taskTargetNum,omitempty"`
	//任务奖励数据
	TaskRewards []*MaterialJson `protobuf:"bytes,13,rep,name=taskRewards,proto3" json:"taskRewards,omitempty"`
	//x
	TaskLevelProvideTimes int32 `protobuf:"varint,14,opt,name=taskLevelProvideTimes,proto3" json:"taskLevelProvideTimes,omitempty"`
	//z
	TaskLevelProvideNum int32 `protobuf:"varint,15,opt,name=taskLevelProvideNum,proto3" json:"taskLevelProvideNum,omitempty"`
	//初始的目标ID
	StartTargetID int32 `protobuf:"varint,16,opt,name=startTargetID,proto3" json:"startTargetID,omitempty"`
	//任务开始时关卡数
	CurLevelNum int32 `protobuf:"varint,17,opt,name=curLevelNum,proto3" json:"curLevelNum,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{20}
}

func (x *Task) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Task) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Task) GetProcesses() int32 {
	if x != nil {
		return x.Processes
	}
	return 0
}

func (x *Task) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Task) GetPlotId() int32 {
	if x != nil {
		return x.PlotId
	}
	return 0
}

func (x *Task) GetSkipCost() int32 {
	if x != nil {
		return x.SkipCost
	}
	return 0
}

func (x *Task) GetTargetShowLeftTimes() int32 {
	if x != nil {
		return x.TargetShowLeftTimes
	}
	return 0
}

func (x *Task) GetNoSelectedTimes() int32 {
	if x != nil {
		return x.NoSelectedTimes
	}
	return 0
}

func (x *Task) GetTaskType() int32 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *Task) GetTaskTargetType() int32 {
	if x != nil {
		return x.TaskTargetType
	}
	return 0
}

func (x *Task) GetTaskTarget() int32 {
	if x != nil {
		return x.TaskTarget
	}
	return 0
}

func (x *Task) GetTaskTargetNum() int32 {
	if x != nil {
		return x.TaskTargetNum
	}
	return 0
}

func (x *Task) GetTaskRewards() []*MaterialJson {
	if x != nil {
		return x.TaskRewards
	}
	return nil
}

func (x *Task) GetTaskLevelProvideTimes() int32 {
	if x != nil {
		return x.TaskLevelProvideTimes
	}
	return 0
}

func (x *Task) GetTaskLevelProvideNum() int32 {
	if x != nil {
		return x.TaskLevelProvideNum
	}
	return 0
}

func (x *Task) GetStartTargetID() int32 {
	if x != nil {
		return x.StartTargetID
	}
	return 0
}

func (x *Task) GetCurLevelNum() int32 {
	if x != nil {
		return x.CurLevelNum
	}
	return 0
}

//任务结束
type TaskEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EndTime int64 `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *TaskEnd) Reset() {
	*x = TaskEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEnd) ProtoMessage() {}

func (x *TaskEnd) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEnd.ProtoReflect.Descriptor instead.
func (*TaskEnd) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{21}
}

func (x *TaskEnd) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskEnd) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

//剧情数据
type GamePlotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllEndPlotID []int32 `protobuf:"varint,1,rep,packed,name=allEndPlotID,proto3" json:"allEndPlotID,omitempty"`
}

func (x *GamePlotData) Reset() {
	*x = GamePlotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlotData) ProtoMessage() {}

func (x *GamePlotData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlotData.ProtoReflect.Descriptor instead.
func (*GamePlotData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{22}
}

func (x *GamePlotData) GetAllEndPlotID() []int32 {
	if x != nil {
		return x.AllEndPlotID
	}
	return nil
}

//漂浮物数据
type FlotageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResidueRefreshNumber        int32   `protobuf:"varint,1,opt,name=residueRefreshNumber,proto3" json:"residueRefreshNumber,omitempty"`
	SpecialFlotageTriggerNumber []int32 `protobuf:"varint,2,rep,packed,name=specialFlotageTriggerNumber,proto3" json:"specialFlotageTriggerNumber,omitempty"`
	ResetTimer                  int64   `protobuf:"varint,3,opt,name=resetTimer,proto3" json:"resetTimer,omitempty"`
	ContinueNotTriggerNumer     int32   `protobuf:"varint,4,opt,name=continueNotTriggerNumer,proto3" json:"continueNotTriggerNumer,omitempty"`
	IsTriggerFlotage            bool    `protobuf:"varint,5,opt,name=isTriggerFlotage,proto3" json:"isTriggerFlotage,omitempty"`
	DotShowCount                int32   `protobuf:"varint,6,opt,name=dotShowCount,proto3" json:"dotShowCount,omitempty"`
	DotClickCount               int32   `protobuf:"varint,7,opt,name=dotClickCount,proto3" json:"dotClickCount,omitempty"`
}

func (x *FlotageData) Reset() {
	*x = FlotageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlotageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlotageData) ProtoMessage() {}

func (x *FlotageData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlotageData.ProtoReflect.Descriptor instead.
func (*FlotageData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{23}
}

func (x *FlotageData) GetResidueRefreshNumber() int32 {
	if x != nil {
		return x.ResidueRefreshNumber
	}
	return 0
}

func (x *FlotageData) GetSpecialFlotageTriggerNumber() []int32 {
	if x != nil {
		return x.SpecialFlotageTriggerNumber
	}
	return nil
}

func (x *FlotageData) GetResetTimer() int64 {
	if x != nil {
		return x.ResetTimer
	}
	return 0
}

func (x *FlotageData) GetContinueNotTriggerNumer() int32 {
	if x != nil {
		return x.ContinueNotTriggerNumer
	}
	return 0
}

func (x *FlotageData) GetIsTriggerFlotage() bool {
	if x != nil {
		return x.IsTriggerFlotage
	}
	return false
}

func (x *FlotageData) GetDotShowCount() int32 {
	if x != nil {
		return x.DotShowCount
	}
	return 0
}

func (x *FlotageData) GetDotClickCount() int32 {
	if x != nil {
		return x.DotClickCount
	}
	return 0
}

//好友数据
type LocalFriendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//好友类型
	FriendType int32 `protobuf:"varint,1,opt,name=friendType,proto3" json:"friendType,omitempty"`
	//userID
	UserID int64 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	//名字
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	//头像
	HeadIcon string `protobuf:"bytes,4,opt,name=headIcon,proto3" json:"headIcon,omitempty"`
	//Level
	Level int32 `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	//被点赞的数量
	LikeCount int32 `protobuf:"varint,6,opt,name=likeCount,proto3" json:"likeCount,omitempty"`
	//每日营地寻宝次数
	TreasureHuntCount int32 `protobuf:"varint,7,opt,name=treasureHuntCount,proto3" json:"treasureHuntCount,omitempty"`
	//是否可以被寻宝
	IsCanByTreasure bool `protobuf:"varint,8,opt,name=isCanByTreasure,proto3" json:"isCanByTreasure,omitempty"`
}

func (x *LocalFriendData) Reset() {
	*x = LocalFriendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalFriendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalFriendData) ProtoMessage() {}

func (x *LocalFriendData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalFriendData.ProtoReflect.Descriptor instead.
func (*LocalFriendData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{24}
}

func (x *LocalFriendData) GetFriendType() int32 {
	if x != nil {
		return x.FriendType
	}
	return 0
}

func (x *LocalFriendData) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *LocalFriendData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocalFriendData) GetHeadIcon() string {
	if x != nil {
		return x.HeadIcon
	}
	return ""
}

func (x *LocalFriendData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LocalFriendData) GetLikeCount() int32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *LocalFriendData) GetTreasureHuntCount() int32 {
	if x != nil {
		return x.TreasureHuntCount
	}
	return 0
}

func (x *LocalFriendData) GetIsCanByTreasure() bool {
	if x != nil {
		return x.IsCanByTreasure
	}
	return false
}

type FriendLocalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//好友分享的领奖次数
	ShareRewardNumber int32 `protobuf:"varint,1,opt,name=ShareRewardNumber,proto3" json:"ShareRewardNumber,omitempty"`
	//上次分享的时间戳
	LastShareTime int64 `protobuf:"varint,2,opt,name=LastShareTime,proto3" json:"LastShareTime,omitempty"`
	//上次推荐好友的时间
	LastRecommendFriendTime int64 `protobuf:"varint,3,opt,name=LastRecommendFriendTime,proto3" json:"LastRecommendFriendTime,omitempty"`
	//本地存储的好友数据
	FriendDatas []*LocalFriendData `protobuf:"bytes,4,rep,name=friendDatas,proto3" json:"friendDatas,omitempty"`
	//自己的寻宝次数
	SelfFindTreasureCount int32 `protobuf:"varint,5,opt,name=selfFindTreasureCount,proto3" json:"selfFindTreasureCount,omitempty"`
	//上次寻宝的时间
	LastFindTreasureTime int64 `protobuf:"varint,6,opt,name=LastFindTreasureTime,proto3" json:"LastFindTreasureTime,omitempty"`
	//点赞过的好友列表
	LikeFriendList []int64 `protobuf:"varint,7,rep,packed,name=LikeFriendList,proto3" json:"LikeFriendList,omitempty"`
	//删除过的好友列表
	RemoveFriendList []*RemoveFriendData `protobuf:"bytes,8,rep,name=RemoveFriendList,proto3" json:"RemoveFriendList,omitempty"`
	//机器人好友申请列表
	RobotApplyFriendList []int64 `protobuf:"varint,9,rep,packed,name=RobotApplyFriendList,proto3" json:"RobotApplyFriendList,omitempty"`
	//给自己点过赞的机器人
	GiveSelfGiveLikeAIList []int64 `protobuf:"varint,10,rep,packed,name=GiveSelfGiveLikeAIList,proto3" json:"GiveSelfGiveLikeAIList,omitempty"`
	//修改名称
	IsChangeName bool `protobuf:"varint,11,opt,name=isChangeName,proto3" json:"isChangeName,omitempty"`
	//修改头像
	IsChangeHead bool `protobuf:"varint,12,opt,name=isChangeHead,proto3" json:"isChangeHead,omitempty"`
	//是否去过寻宝
	IsGoToFindTreasure bool `protobuf:"varint,13,opt,name=isGoToFindTreasure,proto3" json:"isGoToFindTreasure,omitempty"`
	//好友挖宝产出数据
	FriendFindTreasureData []*FriendFindTreasureOutputData `protobuf:"bytes,14,rep,name=friendFindTreasureData,proto3" json:"friendFindTreasureData,omitempty"`
	//好友挖宝的奖励数据
	FriendFindTreasureRewardData []*MaterialJson `protobuf:"bytes,15,rep,name=FriendFindTreasureRewardData,proto3" json:"FriendFindTreasureRewardData,omitempty"`
	//是否首次刷新寻宝奖励
	IsFristRefreshFindReward bool `protobuf:"varint,16,opt,name=isFristRefreshFindReward,proto3" json:"isFristRefreshFindReward,omitempty"`
	//上次查看好友列表的时间
	LastSeeFriendApplyListTime int64 `protobuf:"varint,17,opt,name=lastSeeFriendApplyListTime,proto3" json:"lastSeeFriendApplyListTime,omitempty"`
}

func (x *FriendLocalData) Reset() {
	*x = FriendLocalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendLocalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendLocalData) ProtoMessage() {}

func (x *FriendLocalData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendLocalData.ProtoReflect.Descriptor instead.
func (*FriendLocalData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{25}
}

func (x *FriendLocalData) GetShareRewardNumber() int32 {
	if x != nil {
		return x.ShareRewardNumber
	}
	return 0
}

func (x *FriendLocalData) GetLastShareTime() int64 {
	if x != nil {
		return x.LastShareTime
	}
	return 0
}

func (x *FriendLocalData) GetLastRecommendFriendTime() int64 {
	if x != nil {
		return x.LastRecommendFriendTime
	}
	return 0
}

func (x *FriendLocalData) GetFriendDatas() []*LocalFriendData {
	if x != nil {
		return x.FriendDatas
	}
	return nil
}

func (x *FriendLocalData) GetSelfFindTreasureCount() int32 {
	if x != nil {
		return x.SelfFindTreasureCount
	}
	return 0
}

func (x *FriendLocalData) GetLastFindTreasureTime() int64 {
	if x != nil {
		return x.LastFindTreasureTime
	}
	return 0
}

func (x *FriendLocalData) GetLikeFriendList() []int64 {
	if x != nil {
		return x.LikeFriendList
	}
	return nil
}

func (x *FriendLocalData) GetRemoveFriendList() []*RemoveFriendData {
	if x != nil {
		return x.RemoveFriendList
	}
	return nil
}

func (x *FriendLocalData) GetRobotApplyFriendList() []int64 {
	if x != nil {
		return x.RobotApplyFriendList
	}
	return nil
}

func (x *FriendLocalData) GetGiveSelfGiveLikeAIList() []int64 {
	if x != nil {
		return x.GiveSelfGiveLikeAIList
	}
	return nil
}

func (x *FriendLocalData) GetIsChangeName() bool {
	if x != nil {
		return x.IsChangeName
	}
	return false
}

func (x *FriendLocalData) GetIsChangeHead() bool {
	if x != nil {
		return x.IsChangeHead
	}
	return false
}

func (x *FriendLocalData) GetIsGoToFindTreasure() bool {
	if x != nil {
		return x.IsGoToFindTreasure
	}
	return false
}

func (x *FriendLocalData) GetFriendFindTreasureData() []*FriendFindTreasureOutputData {
	if x != nil {
		return x.FriendFindTreasureData
	}
	return nil
}

func (x *FriendLocalData) GetFriendFindTreasureRewardData() []*MaterialJson {
	if x != nil {
		return x.FriendFindTreasureRewardData
	}
	return nil
}

func (x *FriendLocalData) GetIsFristRefreshFindReward() bool {
	if x != nil {
		return x.IsFristRefreshFindReward
	}
	return false
}

func (x *FriendLocalData) GetLastSeeFriendApplyListTime() int64 {
	if x != nil {
		return x.LastSeeFriendApplyListTime
	}
	return 0
}

type CollectPiecesActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityIsEnable            bool                 `protobuf:"varint,1,opt,name=activityIsEnable,proto3" json:"activityIsEnable,omitempty"`
	NowActivityCollectStage     int32                `protobuf:"varint,2,opt,name=nowActivityCollectStage,proto3" json:"nowActivityCollectStage,omitempty"`                 //当前活动的收集阶段
	NowActivityId               int32                `protobuf:"varint,3,opt,name=nowActivityId,proto3" json:"nowActivityId,omitempty"`                                     //当前活动的ID
	LastActivityEnableTime      int64                `protobuf:"varint,4,opt,name=lastActivityEnableTime,proto3" json:"lastActivityEnableTime,omitempty"`                   //上次活动开启时间
	NowActivityCollectDatas     []*CollectPiecesData `protobuf:"bytes,5,rep,name=nowActivityCollectDatas,proto3" json:"nowActivityCollectDatas,omitempty"`                  //当前活动的收集物信息
	LastActivityEndTime         int64                `protobuf:"varint,6,opt,name=lastActivityEndTime,proto3" json:"lastActivityEndTime,omitempty"`                         //上次活动结束时间
	IsCD                        bool                 `protobuf:"varint,7,opt,name=IsCD,proto3" json:"IsCD,omitempty"`                                                       //当前活动是否CD
	IsInformActivityEnd         bool                 `protobuf:"varint,8,opt,name=IsInformActivityEnd,proto3" json:"IsInformActivityEnd,omitempty"`                         //是否通知活动已经结束
	CurrentActCollectRewards    []int32              `protobuf:"varint,9,rep,packed,name=currentActCollectRewards,proto3" json:"currentActCollectRewards,omitempty"`        //当前活动收集奖励
	CurrentActCollectNums       []int32              `protobuf:"varint,10,rep,packed,name=currentActCollectNums,proto3" json:"currentActCollectNums,omitempty"`             //当前活动收集数量
	CurrentActCollectRewardNums []int32              `protobuf:"varint,11,rep,packed,name=currentActCollectRewardNums,proto3" json:"currentActCollectRewardNums,omitempty"` //当前活动收集奖励数量
	CurStageCollectSumNum       int32                `protobuf:"varint,12,opt,name=curStageCollectSumNum,proto3" json:"curStageCollectSumNum,omitempty"`                    //这个阶段收集的总和
}

func (x *CollectPiecesActivityData) Reset() {
	*x = CollectPiecesActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectPiecesActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectPiecesActivityData) ProtoMessage() {}

func (x *CollectPiecesActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectPiecesActivityData.ProtoReflect.Descriptor instead.
func (*CollectPiecesActivityData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{26}
}

func (x *CollectPiecesActivityData) GetActivityIsEnable() bool {
	if x != nil {
		return x.ActivityIsEnable
	}
	return false
}

func (x *CollectPiecesActivityData) GetNowActivityCollectStage() int32 {
	if x != nil {
		return x.NowActivityCollectStage
	}
	return 0
}

func (x *CollectPiecesActivityData) GetNowActivityId() int32 {
	if x != nil {
		return x.NowActivityId
	}
	return 0
}

func (x *CollectPiecesActivityData) GetLastActivityEnableTime() int64 {
	if x != nil {
		return x.LastActivityEnableTime
	}
	return 0
}

func (x *CollectPiecesActivityData) GetNowActivityCollectDatas() []*CollectPiecesData {
	if x != nil {
		return x.NowActivityCollectDatas
	}
	return nil
}

func (x *CollectPiecesActivityData) GetLastActivityEndTime() int64 {
	if x != nil {
		return x.LastActivityEndTime
	}
	return 0
}

func (x *CollectPiecesActivityData) GetIsCD() bool {
	if x != nil {
		return x.IsCD
	}
	return false
}

func (x *CollectPiecesActivityData) GetIsInformActivityEnd() bool {
	if x != nil {
		return x.IsInformActivityEnd
	}
	return false
}

func (x *CollectPiecesActivityData) GetCurrentActCollectRewards() []int32 {
	if x != nil {
		return x.CurrentActCollectRewards
	}
	return nil
}

func (x *CollectPiecesActivityData) GetCurrentActCollectNums() []int32 {
	if x != nil {
		return x.CurrentActCollectNums
	}
	return nil
}

func (x *CollectPiecesActivityData) GetCurrentActCollectRewardNums() []int32 {
	if x != nil {
		return x.CurrentActCollectRewardNums
	}
	return nil
}

func (x *CollectPiecesActivityData) GetCurStageCollectSumNum() int32 {
	if x != nil {
		return x.CurStageCollectSumNum
	}
	return 0
}

type CollectPiecesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`   //收集物ID
	Num int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"` //收集物数量
}

func (x *CollectPiecesData) Reset() {
	*x = CollectPiecesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectPiecesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectPiecesData) ProtoMessage() {}

func (x *CollectPiecesData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectPiecesData.ProtoReflect.Descriptor instead.
func (*CollectPiecesData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{27}
}

func (x *CollectPiecesData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CollectPiecesData) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type FriendFindTreasureOutputData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SingleDayMaxNum int32 `protobuf:"varint,2,opt,name=singleDayMaxNum,proto3" json:"singleDayMaxNum,omitempty"` //单日最大上限
	OutPutWeight    int32 `protobuf:"varint,3,opt,name=outPutWeight,proto3" json:"outPutWeight,omitempty"`       //产出权重
}

func (x *FriendFindTreasureOutputData) Reset() {
	*x = FriendFindTreasureOutputData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendFindTreasureOutputData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendFindTreasureOutputData) ProtoMessage() {}

func (x *FriendFindTreasureOutputData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendFindTreasureOutputData.ProtoReflect.Descriptor instead.
func (*FriendFindTreasureOutputData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{28}
}

func (x *FriendFindTreasureOutputData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FriendFindTreasureOutputData) GetSingleDayMaxNum() int32 {
	if x != nil {
		return x.SingleDayMaxNum
	}
	return 0
}

func (x *FriendFindTreasureOutputData) GetOutPutWeight() int32 {
	if x != nil {
		return x.OutPutWeight
	}
	return 0
}

type RemoveFriendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GoFrHomeFindRewardNum int32 `protobuf:"varint,2,opt,name=GoFrHomeFindRewardNum,proto3" json:"GoFrHomeFindRewardNum,omitempty"` //去好友家寻找奖励的次数
}

func (x *RemoveFriendData) Reset() {
	*x = RemoveFriendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFriendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFriendData) ProtoMessage() {}

func (x *RemoveFriendData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFriendData.ProtoReflect.Descriptor instead.
func (*RemoveFriendData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{29}
}

func (x *RemoveFriendData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RemoveFriendData) GetGoFrHomeFindRewardNum() int32 {
	if x != nil {
		return x.GoFrHomeFindRewardNum
	}
	return 0
}

type AchievementData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//开始时间
	StartTime int64 `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	//上次登录时间
	LastLoginTime int64 `protobuf:"varint,2,opt,name=lastLoginTime,proto3" json:"lastLoginTime,omitempty"`
	//登录频率
	LoginFrequency int32 `protobuf:"varint,3,opt,name=loginFrequency,proto3" json:"loginFrequency,omitempty"`
	//累计在线时长
	OnLineTime int32 `protobuf:"varint,4,opt,name=onLineTime,proto3" json:"onLineTime,omitempty"`
	//累计合成次数
	AddUpMergeNumber int32 `protobuf:"varint,5,opt,name=AddUpMergeNumber,proto3" json:"AddUpMergeNumber,omitempty"`
	//当前剧情解锁的进度
	NowPlotLockProgress int32 `protobuf:"varint,6,opt,name=NowPlotLockProgress,proto3" json:"NowPlotLockProgress,omitempty"`
	//是否第一次通过第一关
	IsFirstTimePassOneLevel bool `protobuf:"varint,7,opt,name=isFirstTimePassOneLevel,proto3" json:"isFirstTimePassOneLevel,omitempty"`
	//总合成次数不清零
	AddUpMergeNumberNotClear int32 `protobuf:"varint,8,opt,name=AddUpMergeNumberNotClear,proto3" json:"AddUpMergeNumberNotClear,omitempty"`
	//是否开启剧情累计合成
	IsOpenPlotAddUpMerge bool `protobuf:"varint,9,opt,name=IsOpenPlotAddUpMerge,proto3" json:"IsOpenPlotAddUpMerge,omitempty"`
}

func (x *AchievementData) Reset() {
	*x = AchievementData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementData) ProtoMessage() {}

func (x *AchievementData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementData.ProtoReflect.Descriptor instead.
func (*AchievementData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{30}
}

func (x *AchievementData) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AchievementData) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *AchievementData) GetLoginFrequency() int32 {
	if x != nil {
		return x.LoginFrequency
	}
	return 0
}

func (x *AchievementData) GetOnLineTime() int32 {
	if x != nil {
		return x.OnLineTime
	}
	return 0
}

func (x *AchievementData) GetAddUpMergeNumber() int32 {
	if x != nil {
		return x.AddUpMergeNumber
	}
	return 0
}

func (x *AchievementData) GetNowPlotLockProgress() int32 {
	if x != nil {
		return x.NowPlotLockProgress
	}
	return 0
}

func (x *AchievementData) GetIsFirstTimePassOneLevel() bool {
	if x != nil {
		return x.IsFirstTimePassOneLevel
	}
	return false
}

func (x *AchievementData) GetAddUpMergeNumberNotClear() int32 {
	if x != nil {
		return x.AddUpMergeNumberNotClear
	}
	return 0
}

func (x *AchievementData) GetIsOpenPlotAddUpMerge() bool {
	if x != nil {
		return x.IsOpenPlotAddUpMerge
	}
	return false
}

//登录天数数据
type LoginDaysData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//累计登录天数
	LoginDays int32 `protobuf:"varint,1,opt,name=loginDays,proto3" json:"loginDays,omitempty"`
	//连续登录天数
	ConsecutiveLoginDays int32 `protobuf:"varint,2,opt,name=consecutiveLoginDays,proto3" json:"consecutiveLoginDays,omitempty"`
	//最大连续登录天数
	MaxConsecutiveLoginDays int32 `protobuf:"varint,3,opt,name=maxConsecutiveLoginDays,proto3" json:"maxConsecutiveLoginDays,omitempty"`
}

func (x *LoginDaysData) Reset() {
	*x = LoginDaysData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginDaysData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginDaysData) ProtoMessage() {}

func (x *LoginDaysData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginDaysData.ProtoReflect.Descriptor instead.
func (*LoginDaysData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{31}
}

func (x *LoginDaysData) GetLoginDays() int32 {
	if x != nil {
		return x.LoginDays
	}
	return 0
}

func (x *LoginDaysData) GetConsecutiveLoginDays() int32 {
	if x != nil {
		return x.ConsecutiveLoginDays
	}
	return 0
}

func (x *LoginDaysData) GetMaxConsecutiveLoginDays() int32 {
	if x != nil {
		return x.MaxConsecutiveLoginDays
	}
	return 0
}

//结算产出时间宝箱数据
type BalaceTimeBoxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId   int32   `protobuf:"varint,1,opt,name=levelId,proto3" json:"levelId,omitempty"`          //配置表ID
	BoxQueue  []int32 `protobuf:"varint,3,rep,packed,name=boxQueue,proto3" json:"boxQueue,omitempty"` //宝箱队列
	DropLevel int32   `protobuf:"varint,4,opt,name=dropLevel,proto3" json:"dropLevel,omitempty"`      //出现宝箱的关卡数
	DropRate  int32   `protobuf:"varint,5,opt,name=dropRate,proto3" json:"dropRate,omitempty"`        //出现宝箱的概率积累
	TimeBoxId int32   `protobuf:"varint,6,opt,name=timeBoxId,proto3" json:"timeBoxId,omitempty"`      //掉落的宝箱id
	PreLevel  int32   `protobuf:"varint,7,opt,name=preLevel,proto3" json:"preLevel,omitempty"`        //前一次关卡号
}

func (x *BalaceTimeBoxData) Reset() {
	*x = BalaceTimeBoxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalaceTimeBoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalaceTimeBoxData) ProtoMessage() {}

func (x *BalaceTimeBoxData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalaceTimeBoxData.ProtoReflect.Descriptor instead.
func (*BalaceTimeBoxData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{32}
}

func (x *BalaceTimeBoxData) GetLevelId() int32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *BalaceTimeBoxData) GetBoxQueue() []int32 {
	if x != nil {
		return x.BoxQueue
	}
	return nil
}

func (x *BalaceTimeBoxData) GetDropLevel() int32 {
	if x != nil {
		return x.DropLevel
	}
	return 0
}

func (x *BalaceTimeBoxData) GetDropRate() int32 {
	if x != nil {
		return x.DropRate
	}
	return 0
}

func (x *BalaceTimeBoxData) GetTimeBoxId() int32 {
	if x != nil {
		return x.TimeBoxId
	}
	return 0
}

func (x *BalaceTimeBoxData) GetPreLevel() int32 {
	if x != nil {
		return x.PreLevel
	}
	return 0
}

//关卡结算解锁新元素触发次数
type GameEndBalaceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewPieceTimes []*MaterialJson `protobuf:"bytes,1,rep,name=newPieceTimes,proto3" json:"newPieceTimes,omitempty"`
	//当前任务目标奖励的任务id
	CurrentTargetTaskId int32 `protobuf:"varint,2,opt,name=currentTargetTaskId,proto3" json:"currentTargetTaskId,omitempty"`
	//当前产出的Npc碎片id
	CurrentNpcId int32 `protobuf:"varint,3,opt,name=currentNpcId,proto3" json:"currentNpcId,omitempty"`
	//付费元素出现次数
	PayPieceTimes []*MaterialJson `protobuf:"bytes,4,rep,name=payPieceTimes,proto3" json:"payPieceTimes,omitempty"`
	//时间宝箱产出数据
	TimeBox *BalaceTimeBoxData `protobuf:"bytes,5,opt,name=timeBox,proto3" json:"timeBox,omitempty"`
	//记录宝箱历史数据
	HistoryTimeBoxs []*BalaceTimeBoxData `protobuf:"bytes,6,rep,name=historyTimeBoxs,proto3" json:"historyTimeBoxs,omitempty"`
}

func (x *GameEndBalaceData) Reset() {
	*x = GameEndBalaceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEndBalaceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEndBalaceData) ProtoMessage() {}

func (x *GameEndBalaceData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEndBalaceData.ProtoReflect.Descriptor instead.
func (*GameEndBalaceData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{33}
}

func (x *GameEndBalaceData) GetNewPieceTimes() []*MaterialJson {
	if x != nil {
		return x.NewPieceTimes
	}
	return nil
}

func (x *GameEndBalaceData) GetCurrentTargetTaskId() int32 {
	if x != nil {
		return x.CurrentTargetTaskId
	}
	return 0
}

func (x *GameEndBalaceData) GetCurrentNpcId() int32 {
	if x != nil {
		return x.CurrentNpcId
	}
	return 0
}

func (x *GameEndBalaceData) GetPayPieceTimes() []*MaterialJson {
	if x != nil {
		return x.PayPieceTimes
	}
	return nil
}

func (x *GameEndBalaceData) GetTimeBox() *BalaceTimeBoxData {
	if x != nil {
		return x.TimeBox
	}
	return nil
}

func (x *GameEndBalaceData) GetHistoryTimeBoxs() []*BalaceTimeBoxData {
	if x != nil {
		return x.HistoryTimeBoxs
	}
	return nil
}

//NPCEvent
type NPCEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	State      int32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	EventId    int32 `protobuf:"varint,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
	RwdId      int32 `protobuf:"varint,4,opt,name=rwdId,proto3" json:"rwdId,omitempty"`
	CurProcess int32 `protobuf:"varint,5,opt,name=curProcess,proto3" json:"curProcess,omitempty"`
	MaxProcess int32 `protobuf:"varint,6,opt,name=maxProcess,proto3" json:"maxProcess,omitempty"`
}

func (x *NPCEvent) Reset() {
	*x = NPCEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NPCEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NPCEvent) ProtoMessage() {}

func (x *NPCEvent) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NPCEvent.ProtoReflect.Descriptor instead.
func (*NPCEvent) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{34}
}

func (x *NPCEvent) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NPCEvent) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *NPCEvent) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *NPCEvent) GetRwdId() int32 {
	if x != nil {
		return x.RwdId
	}
	return 0
}

func (x *NPCEvent) GetCurProcess() int32 {
	if x != nil {
		return x.CurProcess
	}
	return 0
}

func (x *NPCEvent) GetMaxProcess() int32 {
	if x != nil {
		return x.MaxProcess
	}
	return 0
}

type NPCSpecialState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpcId      int32 `protobuf:"varint,1,opt,name=npcId,proto3" json:"npcId,omitempty"`
	EventId    int32 `protobuf:"varint,2,opt,name=eventId,proto3" json:"eventId,omitempty"`
	EndTimeUtc int32 `protobuf:"varint,3,opt,name=endTimeUtc,proto3" json:"endTimeUtc,omitempty"`
}

func (x *NPCSpecialState) Reset() {
	*x = NPCSpecialState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NPCSpecialState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NPCSpecialState) ProtoMessage() {}

func (x *NPCSpecialState) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NPCSpecialState.ProtoReflect.Descriptor instead.
func (*NPCSpecialState) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{35}
}

func (x *NPCSpecialState) GetNpcId() int32 {
	if x != nil {
		return x.NpcId
	}
	return 0
}

func (x *NPCSpecialState) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *NPCSpecialState) GetEndTimeUtc() int32 {
	if x != nil {
		return x.EndTimeUtc
	}
	return 0
}

//NPC数据
type NPCData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpcEvent *NPCEvent `protobuf:"bytes,1,opt,name=npcEvent,proto3" json:"npcEvent,omitempty"`
	//事件开始时间
	EventStartTime int32 `protobuf:"varint,2,opt,name=eventStartTime,proto3" json:"eventStartTime,omitempty"`
	//事件结束时间
	EventEndTime int32 `protobuf:"varint,3,opt,name=eventEndTime,proto3" json:"eventEndTime,omitempty"`
	//npc事件解锁时间
	EventUnLockTime int32 `protobuf:"varint,4,opt,name=eventUnLockTime,proto3" json:"eventUnLockTime,omitempty"`
	//已经显示过的失败关卡
	DoFailLevels []int32 `protobuf:"varint,5,rep,packed,name=doFailLevels,proto3" json:"doFailLevels,omitempty"`
	//事件结束时关卡数
	EventEndTimeLevel int32 `protobuf:"varint,6,opt,name=eventEndTimeLevel,proto3" json:"eventEndTimeLevel,omitempty"`
	//奖励数据
	RwdData []*MaterialJson `protobuf:"bytes,7,rep,name=rwdData,proto3" json:"rwdData,omitempty"`
	//npc特殊状态数据
	SpecialData []*NPCSpecialState `protobuf:"bytes,8,rep,name=specialData,proto3" json:"specialData,omitempty"`
}

func (x *NPCData) Reset() {
	*x = NPCData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NPCData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NPCData) ProtoMessage() {}

func (x *NPCData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NPCData.ProtoReflect.Descriptor instead.
func (*NPCData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{36}
}

func (x *NPCData) GetNpcEvent() *NPCEvent {
	if x != nil {
		return x.NpcEvent
	}
	return nil
}

func (x *NPCData) GetEventStartTime() int32 {
	if x != nil {
		return x.EventStartTime
	}
	return 0
}

func (x *NPCData) GetEventEndTime() int32 {
	if x != nil {
		return x.EventEndTime
	}
	return 0
}

func (x *NPCData) GetEventUnLockTime() int32 {
	if x != nil {
		return x.EventUnLockTime
	}
	return 0
}

func (x *NPCData) GetDoFailLevels() []int32 {
	if x != nil {
		return x.DoFailLevels
	}
	return nil
}

func (x *NPCData) GetEventEndTimeLevel() int32 {
	if x != nil {
		return x.EventEndTimeLevel
	}
	return 0
}

func (x *NPCData) GetRwdData() []*MaterialJson {
	if x != nil {
		return x.RwdData
	}
	return nil
}

func (x *NPCData) GetSpecialData() []*NPCSpecialState {
	if x != nil {
		return x.SpecialData
	}
	return nil
}

//购买
type Buy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//商品id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//购买时间
	BuyTime int64 `protobuf:"varint,2,opt,name=buyTime,proto3" json:"buyTime,omitempty"`
	//所用的钱数
	Money int32 `protobuf:"varint,5,opt,name=money,proto3" json:"money,omitempty"`
	//订单号
	OrderID string `protobuf:"bytes,6,opt,name=orderID,proto3" json:"orderID,omitempty"`
}

func (x *Buy) Reset() {
	*x = Buy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buy) ProtoMessage() {}

func (x *Buy) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buy.ProtoReflect.Descriptor instead.
func (*Buy) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{37}
}

func (x *Buy) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Buy) GetBuyTime() int64 {
	if x != nil {
		return x.BuyTime
	}
	return 0
}

func (x *Buy) GetMoney() int32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *Buy) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

//购买信息
type BuyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buys []*Buy `protobuf:"bytes,1,rep,name=buys,proto3" json:"buys,omitempty"`
	//首次购买时间
	FirstBuyTime int64 `protobuf:"varint,2,opt,name=firstBuyTime,proto3" json:"firstBuyTime,omitempty"`
	//待发放内购物品列表
	UnsendGoods []*UnfinishedOrder `protobuf:"bytes,3,rep,name=unsendGoods,proto3" json:"unsendGoods,omitempty"`
}

func (x *BuyData) Reset() {
	*x = BuyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyData) ProtoMessage() {}

func (x *BuyData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyData.ProtoReflect.Descriptor instead.
func (*BuyData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{38}
}

func (x *BuyData) GetBuys() []*Buy {
	if x != nil {
		return x.Buys
	}
	return nil
}

func (x *BuyData) GetFirstBuyTime() int64 {
	if x != nil {
		return x.FirstBuyTime
	}
	return 0
}

func (x *BuyData) GetUnsendGoods() []*UnfinishedOrder {
	if x != nil {
		return x.UnsendGoods
	}
	return nil
}

//未完成订单
type UnfinishedOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//计费点
	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
	//订单号
	OrderID string `protobuf:"bytes,2,opt,name=orderID,proto3" json:"orderID,omitempty"`
	//时间
	Date string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *UnfinishedOrder) Reset() {
	*x = UnfinishedOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnfinishedOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnfinishedOrder) ProtoMessage() {}

func (x *UnfinishedOrder) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnfinishedOrder.ProtoReflect.Descriptor instead.
func (*UnfinishedOrder) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{39}
}

func (x *UnfinishedOrder) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *UnfinishedOrder) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *UnfinishedOrder) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

//城堡建筑信息
type BuildingCastal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpValue         int32   `protobuf:"varint,1,opt,name=expValue,proto3" json:"expValue,omitempty"`
	TimeUtc          int32   `protobuf:"varint,2,opt,name=timeUtc,proto3" json:"timeUtc,omitempty"`
	Times            int32   `protobuf:"varint,3,opt,name=times,proto3" json:"times,omitempty"`
	ShowRwd          int32   `protobuf:"varint,4,opt,name=showRwd,proto3" json:"showRwd,omitempty"`
	Rates            []int32 `protobuf:"varint,5,rep,packed,name=rates,proto3" json:"rates,omitempty"`
	GetStageRwdIndex int32   `protobuf:"varint,7,opt,name=getStageRwdIndex,proto3" json:"getStageRwdIndex,omitempty"`
	CanLevelUp       int32   `protobuf:"varint,8,opt,name=canLevelUp,proto3" json:"canLevelUp,omitempty"`
	NextIndex        int32   `protobuf:"varint,9,opt,name=nextIndex,proto3" json:"nextIndex,omitempty"`
	CurrScore        int32   `protobuf:"varint,10,opt,name=currScore,proto3" json:"currScore,omitempty"`
	CheckOldPlayer   int32   `protobuf:"varint,11,opt,name=checkOldPlayer,proto3" json:"checkOldPlayer,omitempty"` //是否已兼容老玩家
}

func (x *BuildingCastal) Reset() {
	*x = BuildingCastal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingCastal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingCastal) ProtoMessage() {}

func (x *BuildingCastal) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingCastal.ProtoReflect.Descriptor instead.
func (*BuildingCastal) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{40}
}

func (x *BuildingCastal) GetExpValue() int32 {
	if x != nil {
		return x.ExpValue
	}
	return 0
}

func (x *BuildingCastal) GetTimeUtc() int32 {
	if x != nil {
		return x.TimeUtc
	}
	return 0
}

func (x *BuildingCastal) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *BuildingCastal) GetShowRwd() int32 {
	if x != nil {
		return x.ShowRwd
	}
	return 0
}

func (x *BuildingCastal) GetRates() []int32 {
	if x != nil {
		return x.Rates
	}
	return nil
}

func (x *BuildingCastal) GetGetStageRwdIndex() int32 {
	if x != nil {
		return x.GetStageRwdIndex
	}
	return 0
}

func (x *BuildingCastal) GetCanLevelUp() int32 {
	if x != nil {
		return x.CanLevelUp
	}
	return 0
}

func (x *BuildingCastal) GetNextIndex() int32 {
	if x != nil {
		return x.NextIndex
	}
	return 0
}

func (x *BuildingCastal) GetCurrScore() int32 {
	if x != nil {
		return x.CurrScore
	}
	return 0
}

func (x *BuildingCastal) GetCheckOldPlayer() int32 {
	if x != nil {
		return x.CheckOldPlayer
	}
	return 0
}

//新NPC建筑信息
type NewBuildingNpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`             //当前状态（1.可兑换，2.cd中，3.可领奖）
	StartTimeUtc int32 `protobuf:"varint,2,opt,name=startTimeUtc,proto3" json:"startTimeUtc,omitempty"` //倒计时开始时间戳
	TotalTimes   int32 `protobuf:"varint,3,opt,name=totalTimes,proto3" json:"totalTimes,omitempty"`     //累计兑换次数
	Cd           int32 `protobuf:"varint,4,opt,name=cd,proto3" json:"cd,omitempty"`                     //cd秒数
}

func (x *NewBuildingNpc) Reset() {
	*x = NewBuildingNpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBuildingNpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBuildingNpc) ProtoMessage() {}

func (x *NewBuildingNpc) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBuildingNpc.ProtoReflect.Descriptor instead.
func (*NewBuildingNpc) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{41}
}

func (x *NewBuildingNpc) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NewBuildingNpc) GetStartTimeUtc() int32 {
	if x != nil {
		return x.StartTimeUtc
	}
	return 0
}

func (x *NewBuildingNpc) GetTotalTimes() int32 {
	if x != nil {
		return x.TotalTimes
	}
	return 0
}

func (x *NewBuildingNpc) GetCd() int32 {
	if x != nil {
		return x.Cd
	}
	return 0
}

//新城堡建筑信息
type NewBuildingCastal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarLevel    int32 `protobuf:"varint,1,opt,name=starLevel,proto3" json:"starLevel,omitempty"`       //星星等级
	ExpValue     int32 `protobuf:"varint,2,opt,name=expValue,proto3" json:"expValue,omitempty"`         //当前等级的星星经验值
	StartTimeUtc int32 `protobuf:"varint,3,opt,name=startTimeUtc,proto3" json:"startTimeUtc,omitempty"` //倒计时开始时间戳
	Cd           int32 `protobuf:"varint,4,opt,name=cd,proto3" json:"cd,omitempty"`                     //cd秒数
}

func (x *NewBuildingCastal) Reset() {
	*x = NewBuildingCastal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBuildingCastal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBuildingCastal) ProtoMessage() {}

func (x *NewBuildingCastal) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBuildingCastal.ProtoReflect.Descriptor instead.
func (*NewBuildingCastal) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{42}
}

func (x *NewBuildingCastal) GetStarLevel() int32 {
	if x != nil {
		return x.StarLevel
	}
	return 0
}

func (x *NewBuildingCastal) GetExpValue() int32 {
	if x != nil {
		return x.ExpValue
	}
	return 0
}

func (x *NewBuildingCastal) GetStartTimeUtc() int32 {
	if x != nil {
		return x.StartTimeUtc
	}
	return 0
}

func (x *NewBuildingCastal) GetCd() int32 {
	if x != nil {
		return x.Cd
	}
	return 0
}

//建筑的功能信息
type BuildingFuncData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuncId    int32 `protobuf:"varint,1,opt,name=funcId,proto3" json:"funcId,omitempty"`
	TimeUtc   int64 `protobuf:"varint,2,opt,name=timeUtc,proto3" json:"timeUtc,omitempty"`
	Times     int32 `protobuf:"varint,3,opt,name=times,proto3" json:"times,omitempty"`
	Cd        int32 `protobuf:"varint,4,opt,name=cd,proto3" json:"cd,omitempty"`
	ProduceId int32 `protobuf:"varint,5,opt,name=produceId,proto3" json:"produceId,omitempty"`
}

func (x *BuildingFuncData) Reset() {
	*x = BuildingFuncData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFuncData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFuncData) ProtoMessage() {}

func (x *BuildingFuncData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFuncData.ProtoReflect.Descriptor instead.
func (*BuildingFuncData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{43}
}

func (x *BuildingFuncData) GetFuncId() int32 {
	if x != nil {
		return x.FuncId
	}
	return 0
}

func (x *BuildingFuncData) GetTimeUtc() int64 {
	if x != nil {
		return x.TimeUtc
	}
	return 0
}

func (x *BuildingFuncData) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *BuildingFuncData) GetCd() int32 {
	if x != nil {
		return x.Cd
	}
	return 0
}

func (x *BuildingFuncData) GetProduceId() int32 {
	if x != nil {
		return x.ProduceId
	}
	return 0
}

//地图上的建筑
type MapBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X             int32               `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             int32               `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Id            int32               `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Mats          []*MaterialJson     `protobuf:"bytes,4,rep,name=mats,proto3" json:"mats,omitempty"`
	FuncDatas     []*BuildingFuncData `protobuf:"bytes,5,rep,name=funcDatas,proto3" json:"funcDatas,omitempty"`
	CastalData    *BuildingCastal     `protobuf:"bytes,6,opt,name=castalData,proto3" json:"castalData,omitempty"`
	CloneStartUct int64               `protobuf:"varint,7,opt,name=cloneStartUct,proto3" json:"cloneStartUct,omitempty"`
	IsUnLock      int32               `protobuf:"varint,8,opt,name=isUnLock,proto3" json:"isUnLock,omitempty"`
	BuildType     int32               `protobuf:"varint,9,opt,name=buildType,proto3" json:"buildType,omitempty"`
	BasketData    *MapBasket          `protobuf:"bytes,10,opt,name=basketData,proto3" json:"basketData,omitempty"`
	UnLockLevel   int32               `protobuf:"varint,11,opt,name=unLockLevel,proto3" json:"unLockLevel,omitempty"`
	NewCastalData *NewBuildingCastal  `protobuf:"bytes,12,opt,name=newCastalData,proto3" json:"newCastalData,omitempty"`
	NewNpcData    *NewBuildingNpc     `protobuf:"bytes,13,opt,name=newNpcData,proto3" json:"newNpcData,omitempty"`
}

func (x *MapBuilding) Reset() {
	*x = MapBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBuilding) ProtoMessage() {}

func (x *MapBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBuilding.ProtoReflect.Descriptor instead.
func (*MapBuilding) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{44}
}

func (x *MapBuilding) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MapBuilding) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MapBuilding) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MapBuilding) GetMats() []*MaterialJson {
	if x != nil {
		return x.Mats
	}
	return nil
}

func (x *MapBuilding) GetFuncDatas() []*BuildingFuncData {
	if x != nil {
		return x.FuncDatas
	}
	return nil
}

func (x *MapBuilding) GetCastalData() *BuildingCastal {
	if x != nil {
		return x.CastalData
	}
	return nil
}

func (x *MapBuilding) GetCloneStartUct() int64 {
	if x != nil {
		return x.CloneStartUct
	}
	return 0
}

func (x *MapBuilding) GetIsUnLock() int32 {
	if x != nil {
		return x.IsUnLock
	}
	return 0
}

func (x *MapBuilding) GetBuildType() int32 {
	if x != nil {
		return x.BuildType
	}
	return 0
}

func (x *MapBuilding) GetBasketData() *MapBasket {
	if x != nil {
		return x.BasketData
	}
	return nil
}

func (x *MapBuilding) GetUnLockLevel() int32 {
	if x != nil {
		return x.UnLockLevel
	}
	return 0
}

func (x *MapBuilding) GetNewCastalData() *NewBuildingCastal {
	if x != nil {
		return x.NewCastalData
	}
	return nil
}

func (x *MapBuilding) GetNewNpcData() *NewBuildingNpc {
	if x != nil {
		return x.NewNpcData
	}
	return nil
}

type LandUnLockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//当前岛屿解锁的id
	LandUnLockID int32 `protobuf:"varint,1,opt,name=landUnLockID,proto3" json:"landUnLockID,omitempty"`
	//是否显示等级满足指示箭头
	IsShowArrow int32 `protobuf:"varint,2,opt,name=isShowArrow,proto3" json:"isShowArrow,omitempty"`
	//显示金币充足指示箭头结束时间
	ShowCoinArrowTime int64 `protobuf:"varint,3,opt,name=showCoinArrowTime,proto3" json:"showCoinArrowTime,omitempty"`
	//是否显示金币满足指示箭头
	IsShowCoinArrow int32 `protobuf:"varint,4,opt,name=isShowCoinArrow,proto3" json:"isShowCoinArrow,omitempty"`
}

func (x *LandUnLockData) Reset() {
	*x = LandUnLockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LandUnLockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LandUnLockData) ProtoMessage() {}

func (x *LandUnLockData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LandUnLockData.ProtoReflect.Descriptor instead.
func (*LandUnLockData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{45}
}

func (x *LandUnLockData) GetLandUnLockID() int32 {
	if x != nil {
		return x.LandUnLockID
	}
	return 0
}

func (x *LandUnLockData) GetIsShowArrow() int32 {
	if x != nil {
		return x.IsShowArrow
	}
	return 0
}

func (x *LandUnLockData) GetShowCoinArrowTime() int64 {
	if x != nil {
		return x.ShowCoinArrowTime
	}
	return 0
}

func (x *LandUnLockData) GetIsShowCoinArrow() int32 {
	if x != nil {
		return x.IsShowCoinArrow
	}
	return 0
}

type NewLandUnLockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NowUnLockLandIds []int32 `protobuf:"varint,1,rep,packed,name=nowUnLockLandIds,proto3" json:"nowUnLockLandIds,omitempty"`
	//是否显示等级满足指示箭头
	IsShowArrow int32 `protobuf:"varint,2,opt,name=isShowArrow,proto3" json:"isShowArrow,omitempty"`
	//显示金币充足指示箭头结束时间
	ShowCoinArrowTime int64 `protobuf:"varint,3,opt,name=showCoinArrowTime,proto3" json:"showCoinArrowTime,omitempty"`
	//是否显示金币满足指示箭头
	IsShowCoinArrow int32 `protobuf:"varint,4,opt,name=isShowCoinArrow,proto3" json:"isShowCoinArrow,omitempty"`
}

func (x *NewLandUnLockData) Reset() {
	*x = NewLandUnLockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewLandUnLockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewLandUnLockData) ProtoMessage() {}

func (x *NewLandUnLockData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewLandUnLockData.ProtoReflect.Descriptor instead.
func (*NewLandUnLockData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{46}
}

func (x *NewLandUnLockData) GetNowUnLockLandIds() []int32 {
	if x != nil {
		return x.NowUnLockLandIds
	}
	return nil
}

func (x *NewLandUnLockData) GetIsShowArrow() int32 {
	if x != nil {
		return x.IsShowArrow
	}
	return 0
}

func (x *NewLandUnLockData) GetShowCoinArrowTime() int64 {
	if x != nil {
		return x.ShowCoinArrowTime
	}
	return 0
}

func (x *NewLandUnLockData) GetIsShowCoinArrow() int32 {
	if x != nil {
		return x.IsShowCoinArrow
	}
	return 0
}

type ExpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//经验值
	ExpValue int32 `protobuf:"varint,1,opt,name=expValue,proto3" json:"expValue,omitempty"`
	//经验等级
	ExpLevel int32 `protobuf:"varint,2,opt,name=expLevel,proto3" json:"expLevel,omitempty"`
}

func (x *ExpData) Reset() {
	*x = ExpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpData) ProtoMessage() {}

func (x *ExpData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpData.ProtoReflect.Descriptor instead.
func (*ExpData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{47}
}

func (x *ExpData) GetExpValue() int32 {
	if x != nil {
		return x.ExpValue
	}
	return 0
}

func (x *ExpData) GetExpLevel() int32 {
	if x != nil {
		return x.ExpLevel
	}
	return 0
}

type LevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//关卡等级
	Level int32 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	//连续通关的次数
	Continuelevel int32 `protobuf:"varint,5,opt,name=continuelevel,proto3" json:"continuelevel,omitempty"`
	//连续通关失败的次数(一直统计)
	ContinuelevelFail int32 `protobuf:"varint,6,opt,name=continuelevelFail,proto3" json:"continuelevelFail,omitempty"`
	//连续通关成功的次数(一直统计)
	ContinuelevelSuccess int32 `protobuf:"varint,7,opt,name=continuelevelSuccess,proto3" json:"continuelevelSuccess,omitempty"`
	//没有使用道具且连续通关失败的次数(每日统计)
	ContinuelevelFailWithNoItem int32 `protobuf:"varint,8,opt,name=continuelevelFailWithNoItem,proto3" json:"continuelevelFailWithNoItem,omitempty"`
	//上次没有使用道具且连续通关失败的时间
	ContinuelevelFailWithNoItemLastTime int64 `protobuf:"varint,9,opt,name=continuelevelFailWithNoItemLastTime,proto3" json:"continuelevelFailWithNoItemLastTime,omitempty"`
	//累计进入游戏次数
	TotalEnterLevel int32 `protobuf:"varint,10,opt,name=totalEnterLevel,proto3" json:"totalEnterLevel,omitempty"`
	//免费首个奖励BuildingId
	RewardId int32 `protobuf:"varint,11,opt,name=rewardId,proto3" json:"rewardId,omitempty"`
	//关卡难度
	LevelDiff int32 `protobuf:"varint,12,opt,name=levelDiff,proto3" json:"levelDiff,omitempty"`
	//连续续步的次数
	ContinueAddStep int32 `protobuf:"varint,13,opt,name=continueAddStep,proto3" json:"continueAddStep,omitempty"`
	//关卡泡泡数据
	LevelBubbles []*MapBubble `protobuf:"bytes,14,rep,name=levelBubbles,proto3" json:"levelBubbles,omitempty"`
	//连续通关失败（步数用尽）
	ContinuelevelFailWithStepClear int32 `protobuf:"varint,15,opt,name=continuelevelFailWithStepClear,proto3" json:"continuelevelFailWithStepClear,omitempty"`
	//上次进入关卡的文件名
	LastLevelName string `protobuf:"bytes,16,opt,name=lastLevelName,proto3" json:"lastLevelName,omitempty"`
	//上次进入关卡的时间
	LastEnterLevelTime int64 `protobuf:"varint,17,opt,name=lastEnterLevelTime,proto3" json:"lastEnterLevelTime,omitempty"`
	//连续通关失败(不包括中途退出)
	ContinuelevelFailWithoutQuit int32 `protobuf:"varint,18,opt,name=continuelevelFailWithoutQuit,proto3" json:"continuelevelFailWithoutQuit,omitempty"`
	//当前关难度调节连续失败开启次数
	ContinueDiffControlFail int32 `protobuf:"varint,19,opt,name=continueDiffControlFail,proto3" json:"continueDiffControlFail,omitempty"`
}

func (x *LevelData) Reset() {
	*x = LevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelData) ProtoMessage() {}

func (x *LevelData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelData.ProtoReflect.Descriptor instead.
func (*LevelData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{48}
}

func (x *LevelData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LevelData) GetContinuelevel() int32 {
	if x != nil {
		return x.Continuelevel
	}
	return 0
}

func (x *LevelData) GetContinuelevelFail() int32 {
	if x != nil {
		return x.ContinuelevelFail
	}
	return 0
}

func (x *LevelData) GetContinuelevelSuccess() int32 {
	if x != nil {
		return x.ContinuelevelSuccess
	}
	return 0
}

func (x *LevelData) GetContinuelevelFailWithNoItem() int32 {
	if x != nil {
		return x.ContinuelevelFailWithNoItem
	}
	return 0
}

func (x *LevelData) GetContinuelevelFailWithNoItemLastTime() int64 {
	if x != nil {
		return x.ContinuelevelFailWithNoItemLastTime
	}
	return 0
}

func (x *LevelData) GetTotalEnterLevel() int32 {
	if x != nil {
		return x.TotalEnterLevel
	}
	return 0
}

func (x *LevelData) GetRewardId() int32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *LevelData) GetLevelDiff() int32 {
	if x != nil {
		return x.LevelDiff
	}
	return 0
}

func (x *LevelData) GetContinueAddStep() int32 {
	if x != nil {
		return x.ContinueAddStep
	}
	return 0
}

func (x *LevelData) GetLevelBubbles() []*MapBubble {
	if x != nil {
		return x.LevelBubbles
	}
	return nil
}

func (x *LevelData) GetContinuelevelFailWithStepClear() int32 {
	if x != nil {
		return x.ContinuelevelFailWithStepClear
	}
	return 0
}

func (x *LevelData) GetLastLevelName() string {
	if x != nil {
		return x.LastLevelName
	}
	return ""
}

func (x *LevelData) GetLastEnterLevelTime() int64 {
	if x != nil {
		return x.LastEnterLevelTime
	}
	return 0
}

func (x *LevelData) GetContinuelevelFailWithoutQuit() int32 {
	if x != nil {
		return x.ContinuelevelFailWithoutQuit
	}
	return 0
}

func (x *LevelData) GetContinueDiffControlFail() int32 {
	if x != nil {
		return x.ContinueDiffControlFail
	}
	return 0
}

//当天钻石使用记录匹配数据
type DiamondUseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinValue int32 `protobuf:"varint,1,opt,name=minValue,proto3" json:"minValue,omitempty"`
	MaxValue int32 `protobuf:"varint,2,opt,name=maxValue,proto3" json:"maxValue,omitempty"`
	UseTime  int64 `protobuf:"varint,3,opt,name=useTime,proto3" json:"useTime,omitempty"`
}

func (x *DiamondUseData) Reset() {
	*x = DiamondUseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiamondUseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiamondUseData) ProtoMessage() {}

func (x *DiamondUseData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiamondUseData.ProtoReflect.Descriptor instead.
func (*DiamondUseData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{49}
}

func (x *DiamondUseData) GetMinValue() int32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *DiamondUseData) GetMaxValue() int32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *DiamondUseData) GetUseTime() int64 {
	if x != nil {
		return x.UseTime
	}
	return 0
}

type MoneyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//金币
	Money int32 `protobuf:"varint,1,opt,name=money,proto3" json:"money,omitempty"`
	//钻石
	Diamond int32 `protobuf:"varint,2,opt,name=diamond,proto3" json:"diamond,omitempty"`
	//是否当日消耗x钻石时间
	DiamondUseDatas []*DiamondUseData `protobuf:"bytes,3,rep,name=diamondUseDatas,proto3" json:"diamondUseDatas,omitempty"`
	//消耗钻石数量
	DiamondUseNum int32 `protobuf:"varint,4,opt,name=diamondUseNum,proto3" json:"diamondUseNum,omitempty"`
	//钻石的历史数据
	DiamondHistoryData *HistoryData `protobuf:"bytes,5,opt,name=diamondHistoryData,proto3" json:"diamondHistoryData,omitempty"`
	//金币的历史数据
	MoneyHistoryData *HistoryData `protobuf:"bytes,6,opt,name=moneyHistoryData,proto3" json:"moneyHistoryData,omitempty"`
	//内购累计购买金额
	TotalIapCharged int64 `protobuf:"varint,7,opt,name=totalIapCharged,proto3" json:"totalIapCharged,omitempty"`
	//上次内购的时间
	LastIapTime int64 `protobuf:"varint,8,opt,name=lastIapTime,proto3" json:"lastIapTime,omitempty"`
	//上次内购的关卡
	LastIapLevel int32 `protobuf:"varint,9,opt,name=lastIapLevel,proto3" json:"lastIapLevel,omitempty"`
	//累计付费次数
	TotalIapCount int32 `protobuf:"varint,10,opt,name=totalIapCount,proto3" json:"totalIapCount,omitempty"`
	//maya活动货币
	MayaToken int32 `protobuf:"varint,11,opt,name=mayaToken,proto3" json:"mayaToken,omitempty"`
}

func (x *MoneyData) Reset() {
	*x = MoneyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyData) ProtoMessage() {}

func (x *MoneyData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyData.ProtoReflect.Descriptor instead.
func (*MoneyData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{50}
}

func (x *MoneyData) GetMoney() int32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *MoneyData) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *MoneyData) GetDiamondUseDatas() []*DiamondUseData {
	if x != nil {
		return x.DiamondUseDatas
	}
	return nil
}

func (x *MoneyData) GetDiamondUseNum() int32 {
	if x != nil {
		return x.DiamondUseNum
	}
	return 0
}

func (x *MoneyData) GetDiamondHistoryData() *HistoryData {
	if x != nil {
		return x.DiamondHistoryData
	}
	return nil
}

func (x *MoneyData) GetMoneyHistoryData() *HistoryData {
	if x != nil {
		return x.MoneyHistoryData
	}
	return nil
}

func (x *MoneyData) GetTotalIapCharged() int64 {
	if x != nil {
		return x.TotalIapCharged
	}
	return 0
}

func (x *MoneyData) GetLastIapTime() int64 {
	if x != nil {
		return x.LastIapTime
	}
	return 0
}

func (x *MoneyData) GetLastIapLevel() int32 {
	if x != nil {
		return x.LastIapLevel
	}
	return 0
}

func (x *MoneyData) GetTotalIapCount() int32 {
	if x != nil {
		return x.TotalIapCount
	}
	return 0
}

func (x *MoneyData) GetMayaToken() int32 {
	if x != nil {
		return x.MayaToken
	}
	return 0
}

//历史数据
type HistoryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//历史总值
	TotalCount int64 `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	//付费购买的历史总值
	BuyTotalCount int64 `protobuf:"varint,2,opt,name=buyTotalCount,proto3" json:"buyTotalCount,omitempty"`
	//每日消耗值
	DaysConsume []*DayHistoryData `protobuf:"bytes,3,rep,name=daysConsume,proto3" json:"daysConsume,omitempty"`
	//每日获得值
	DaysGet []*DayHistoryData `protobuf:"bytes,4,rep,name=daysGet,proto3" json:"daysGet,omitempty"`
	//每日充值获得值
	DaysPayGet []*DayHistoryData `protobuf:"bytes,5,rep,name=daysPayGet,proto3" json:"daysPayGet,omitempty"`
	//每次消耗值
	TimesConsume []*TimesHistoryData `protobuf:"bytes,6,rep,name=timesConsume,proto3" json:"timesConsume,omitempty"`
	//每次获得值
	TimesGet []*TimesHistoryData `protobuf:"bytes,7,rep,name=timesGet,proto3" json:"timesGet,omitempty"`
	//每次充值获得值
	TimesPayGet []*TimesHistoryData `protobuf:"bytes,8,rep,name=timesPayGet,proto3" json:"timesPayGet,omitempty"`
}

func (x *HistoryData) Reset() {
	*x = HistoryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryData) ProtoMessage() {}

func (x *HistoryData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryData.ProtoReflect.Descriptor instead.
func (*HistoryData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{51}
}

func (x *HistoryData) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *HistoryData) GetBuyTotalCount() int64 {
	if x != nil {
		return x.BuyTotalCount
	}
	return 0
}

func (x *HistoryData) GetDaysConsume() []*DayHistoryData {
	if x != nil {
		return x.DaysConsume
	}
	return nil
}

func (x *HistoryData) GetDaysGet() []*DayHistoryData {
	if x != nil {
		return x.DaysGet
	}
	return nil
}

func (x *HistoryData) GetDaysPayGet() []*DayHistoryData {
	if x != nil {
		return x.DaysPayGet
	}
	return nil
}

func (x *HistoryData) GetTimesConsume() []*TimesHistoryData {
	if x != nil {
		return x.TimesConsume
	}
	return nil
}

func (x *HistoryData) GetTimesGet() []*TimesHistoryData {
	if x != nil {
		return x.TimesGet
	}
	return nil
}

func (x *HistoryData) GetTimesPayGet() []*TimesHistoryData {
	if x != nil {
		return x.TimesPayGet
	}
	return nil
}

//每日历史数据
type DayHistoryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DayHistoryData) Reset() {
	*x = DayHistoryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayHistoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayHistoryData) ProtoMessage() {}

func (x *DayHistoryData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayHistoryData.ProtoReflect.Descriptor instead.
func (*DayHistoryData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{52}
}

func (x *DayHistoryData) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DayHistoryData) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

//每次记录历史数据
type TimesHistoryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	From  int32 `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *TimesHistoryData) Reset() {
	*x = TimesHistoryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimesHistoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimesHistoryData) ProtoMessage() {}

func (x *TimesHistoryData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimesHistoryData.ProtoReflect.Descriptor instead.
func (*TimesHistoryData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{53}
}

func (x *TimesHistoryData) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TimesHistoryData) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TimesHistoryData) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

//图鉴
type Illustration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`       //建筑id
	IsNew int32 `protobuf:"varint,2,opt,name=isNew,proto3" json:"isNew,omitempty"` // 是否是Tap
}

func (x *Illustration) Reset() {
	*x = Illustration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Illustration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Illustration) ProtoMessage() {}

func (x *Illustration) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Illustration.ProtoReflect.Descriptor instead.
func (*Illustration) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{54}
}

func (x *Illustration) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Illustration) GetIsNew() int32 {
	if x != nil {
		return x.IsNew
	}
	return 0
}

//关卡宝箱数据
type LevelBoxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NowCommonBoxNum int32   `protobuf:"varint,1,opt,name=nowCommonBoxNum,proto3" json:"nowCommonBoxNum,omitempty"`
	NowMaxBoxNum    int32   `protobuf:"varint,2,opt,name=nowMaxBoxNum,proto3" json:"nowMaxBoxNum,omitempty"`
	IsInit          bool    `protobuf:"varint,3,opt,name=isInit,proto3" json:"isInit,omitempty"`
	BoxQueue        []int32 `protobuf:"varint,4,rep,packed,name=boxQueue,proto3" json:"boxQueue,omitempty"`
}

func (x *LevelBoxData) Reset() {
	*x = LevelBoxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelBoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelBoxData) ProtoMessage() {}

func (x *LevelBoxData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelBoxData.ProtoReflect.Descriptor instead.
func (*LevelBoxData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{55}
}

func (x *LevelBoxData) GetNowCommonBoxNum() int32 {
	if x != nil {
		return x.NowCommonBoxNum
	}
	return 0
}

func (x *LevelBoxData) GetNowMaxBoxNum() int32 {
	if x != nil {
		return x.NowMaxBoxNum
	}
	return 0
}

func (x *LevelBoxData) GetIsInit() bool {
	if x != nil {
		return x.IsInit
	}
	return false
}

func (x *LevelBoxData) GetBoxQueue() []int32 {
	if x != nil {
		return x.BoxQueue
	}
	return nil
}

//图鉴信息
type IllustrationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Illustrations []*Illustration `protobuf:"bytes,1,rep,name=illustrations,proto3" json:"illustrations,omitempty"`
	//元素链解锁时间信息
	LineUnLockTimes []*MaterialJson `protobuf:"bytes,2,rep,name=lineUnLockTimes,proto3" json:"lineUnLockTimes,omitempty"`
	//最新的
	LastNewBuildId int32 `protobuf:"varint,3,opt,name=lastNewBuildId,proto3" json:"lastNewBuildId,omitempty"`
	// 是否已解锁
	IsUnlock int32 `protobuf:"varint,4,opt,name=isUnlock,proto3" json:"isUnlock,omitempty"`
}

func (x *IllustrationData) Reset() {
	*x = IllustrationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IllustrationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IllustrationData) ProtoMessage() {}

func (x *IllustrationData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IllustrationData.ProtoReflect.Descriptor instead.
func (*IllustrationData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{56}
}

func (x *IllustrationData) GetIllustrations() []*Illustration {
	if x != nil {
		return x.Illustrations
	}
	return nil
}

func (x *IllustrationData) GetLineUnLockTimes() []*MaterialJson {
	if x != nil {
		return x.LineUnLockTimes
	}
	return nil
}

func (x *IllustrationData) GetLastNewBuildId() int32 {
	if x != nil {
		return x.LastNewBuildId
	}
	return 0
}

func (x *IllustrationData) GetIsUnlock() int32 {
	if x != nil {
		return x.IsUnlock
	}
	return 0
}

//好友数据
type FriendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//好友类型
	FriendType FriendType `protobuf:"varint,1,opt,name=friendType,proto3,enum=FriendType" json:"friendType,omitempty"`
	//userID
	UserID int64 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	//名字
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	//头像
	HeadIcon string `protobuf:"bytes,4,opt,name=headIcon,proto3" json:"headIcon,omitempty"`
	//Level
	Level int32 `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	//被点赞的数量
	LikeCount int32 `protobuf:"varint,6,opt,name=likeCount,proto3" json:"likeCount,omitempty"`
	//解锁地格的ID
	UnlockID int32 `protobuf:"varint,7,opt,name=unlockID,proto3" json:"unlockID,omitempty"`
	//购买信息
	BuyData *BuyData `protobuf:"bytes,8,opt,name=buyData,proto3" json:"buyData,omitempty"`
	//新的地格解锁数据
	NewUnlockID []int32 `protobuf:"varint,9,rep,packed,name=newUnlockID,proto3" json:"newUnlockID,omitempty"`
	//玩家的测试类型
	TestModel int32 `protobuf:"varint,10,opt,name=testModel,proto3" json:"testModel,omitempty"`
	//是否是测试账号
	TestUser int32 `protobuf:"varint,11,opt,name=testUser,proto3" json:"testUser,omitempty"`
}

func (x *FriendData) Reset() {
	*x = FriendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendData) ProtoMessage() {}

func (x *FriendData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendData.ProtoReflect.Descriptor instead.
func (*FriendData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{57}
}

func (x *FriendData) GetFriendType() FriendType {
	if x != nil {
		return x.FriendType
	}
	return FriendType_Game
}

func (x *FriendData) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *FriendData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FriendData) GetHeadIcon() string {
	if x != nil {
		return x.HeadIcon
	}
	return ""
}

func (x *FriendData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FriendData) GetLikeCount() int32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *FriendData) GetUnlockID() int32 {
	if x != nil {
		return x.UnlockID
	}
	return 0
}

func (x *FriendData) GetBuyData() *BuyData {
	if x != nil {
		return x.BuyData
	}
	return nil
}

func (x *FriendData) GetNewUnlockID() []int32 {
	if x != nil {
		return x.NewUnlockID
	}
	return nil
}

func (x *FriendData) GetTestModel() int32 {
	if x != nil {
		return x.TestModel
	}
	return 0
}

func (x *FriendData) GetTestUser() int32 {
	if x != nil {
		return x.TestUser
	}
	return 0
}

type ClickBookId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineId   int32   `protobuf:"varint,1,opt,name=lineId,proto3" json:"lineId,omitempty"`
	ClickIds []int32 `protobuf:"varint,2,rep,packed,name=clickIds,proto3" json:"clickIds,omitempty"`
}

func (x *ClickBookId) Reset() {
	*x = ClickBookId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickBookId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickBookId) ProtoMessage() {}

func (x *ClickBookId) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickBookId.ProtoReflect.Descriptor instead.
func (*ClickBookId) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{58}
}

func (x *ClickBookId) GetLineId() int32 {
	if x != nil {
		return x.LineId
	}
	return 0
}

func (x *ClickBookId) GetClickIds() []int32 {
	if x != nil {
		return x.ClickIds
	}
	return nil
}

type CollectBookData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//已经点击的book
	ClickBookIds []*ClickBookId `protobuf:"bytes,1,rep,name=clickBookIds,proto3" json:"clickBookIds,omitempty"`
	//已领取奖励的链
	GetRewardLineIds []int32 `protobuf:"varint,2,rep,packed,name=getRewardLineIds,proto3" json:"getRewardLineIds,omitempty"`
	//当前显示的order
	CurrShowOrder int32 `protobuf:"varint,3,opt,name=currShowOrder,proto3" json:"currShowOrder,omitempty"`
}

func (x *CollectBookData) Reset() {
	*x = CollectBookData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectBookData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectBookData) ProtoMessage() {}

func (x *CollectBookData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectBookData.ProtoReflect.Descriptor instead.
func (*CollectBookData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{59}
}

func (x *CollectBookData) GetClickBookIds() []*ClickBookId {
	if x != nil {
		return x.ClickBookIds
	}
	return nil
}

func (x *CollectBookData) GetGetRewardLineIds() []int32 {
	if x != nil {
		return x.GetRewardLineIds
	}
	return nil
}

func (x *CollectBookData) GetCurrShowOrder() int32 {
	if x != nil {
		return x.CurrShowOrder
	}
	return 0
}

//城堡数据
type CastalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsShowTap int32 `protobuf:"varint,1,opt,name=isShowTap,proto3" json:"isShowTap,omitempty"` // 是否显示过Tap
}

func (x *CastalData) Reset() {
	*x = CastalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CastalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CastalData) ProtoMessage() {}

func (x *CastalData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CastalData.ProtoReflect.Descriptor instead.
func (*CastalData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{60}
}

func (x *CastalData) GetIsShowTap() int32 {
	if x != nil {
		return x.IsShowTap
	}
	return 0
}

//建筑合成次数
type BuildingMergeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildingMergeTimes []*MaterialJson `protobuf:"bytes,1,rep,name=buildingMergeTimes,proto3" json:"buildingMergeTimes,omitempty"`
	CloneBubbleTimes   int32           `protobuf:"varint,2,opt,name=cloneBubbleTimes,proto3" json:"cloneBubbleTimes,omitempty"`
}

func (x *BuildingMergeData) Reset() {
	*x = BuildingMergeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingMergeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingMergeData) ProtoMessage() {}

func (x *BuildingMergeData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingMergeData.ProtoReflect.Descriptor instead.
func (*BuildingMergeData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{61}
}

func (x *BuildingMergeData) GetBuildingMergeTimes() []*MaterialJson {
	if x != nil {
		return x.BuildingMergeTimes
	}
	return nil
}

func (x *BuildingMergeData) GetCloneBubbleTimes() int32 {
	if x != nil {
		return x.CloneBubbleTimes
	}
	return 0
}

//事件记录
type EventRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecType  int32  `protobuf:"varint,1,opt,name=recType,proto3" json:"recType,omitempty"`
	ItemId   int32  `protobuf:"varint,2,opt,name=itemId,proto3" json:"itemId,omitempty"`
	TimeUtc  int64  `protobuf:"varint,3,opt,name=timeUtc,proto3" json:"timeUtc,omitempty"`
	X        int32  `protobuf:"varint,4,opt,name=x,proto3" json:"x,omitempty"`
	Y        int32  `protobuf:"varint,5,opt,name=y,proto3" json:"y,omitempty"`
	Stable   int32  `protobuf:"varint,6,opt,name=stable,proto3" json:"stable,omitempty"`
	ItemData string `protobuf:"bytes,7,opt,name=itemData,proto3" json:"itemData,omitempty"`
	UserIcon string `protobuf:"bytes,8,opt,name=userIcon,proto3" json:"userIcon,omitempty"`
	UserId   int64  `protobuf:"varint,9,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *EventRecord) Reset() {
	*x = EventRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRecord) ProtoMessage() {}

func (x *EventRecord) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRecord.ProtoReflect.Descriptor instead.
func (*EventRecord) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{62}
}

func (x *EventRecord) GetRecType() int32 {
	if x != nil {
		return x.RecType
	}
	return 0
}

func (x *EventRecord) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *EventRecord) GetTimeUtc() int64 {
	if x != nil {
		return x.TimeUtc
	}
	return 0
}

func (x *EventRecord) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *EventRecord) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *EventRecord) GetStable() int32 {
	if x != nil {
		return x.Stable
	}
	return 0
}

func (x *EventRecord) GetItemData() string {
	if x != nil {
		return x.ItemData
	}
	return ""
}

func (x *EventRecord) GetUserIcon() string {
	if x != nil {
		return x.UserIcon
	}
	return ""
}

func (x *EventRecord) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

//事件记录数据
type EventRecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventRecords    []*EventRecord `protobuf:"bytes,1,rep,name=eventRecords,proto3" json:"eventRecords,omitempty"`
	NpcIds          []int32        `protobuf:"varint,2,rep,packed,name=npcIds,proto3" json:"npcIds,omitempty"`
	WonderLineCount int32          `protobuf:"varint,3,opt,name=wonderLineCount,proto3" json:"wonderLineCount,omitempty"`
}

func (x *EventRecordData) Reset() {
	*x = EventRecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRecordData) ProtoMessage() {}

func (x *EventRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRecordData.ProtoReflect.Descriptor instead.
func (*EventRecordData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{63}
}

func (x *EventRecordData) GetEventRecords() []*EventRecord {
	if x != nil {
		return x.EventRecords
	}
	return nil
}

func (x *EventRecordData) GetNpcIds() []int32 {
	if x != nil {
		return x.NpcIds
	}
	return nil
}

func (x *EventRecordData) GetWonderLineCount() int32 {
	if x != nil {
		return x.WonderLineCount
	}
	return 0
}

//活动产出,活动标记id对应产出次数
type EventOutPutData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventIdWithTimes []*MaterialJson `protobuf:"bytes,1,rep,name=eventIdWithTimes,proto3" json:"eventIdWithTimes,omitempty"`
}

func (x *EventOutPutData) Reset() {
	*x = EventOutPutData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventOutPutData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventOutPutData) ProtoMessage() {}

func (x *EventOutPutData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventOutPutData.ProtoReflect.Descriptor instead.
func (*EventOutPutData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{64}
}

func (x *EventOutPutData) GetEventIdWithTimes() []*MaterialJson {
	if x != nil {
		return x.EventIdWithTimes
	}
	return nil
}

//魔力值数据
type MagicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicValue      int32 `protobuf:"varint,1,opt,name=magicValue,proto3" json:"magicValue,omitempty"`
	MagicGetHistory int64 `protobuf:"varint,2,opt,name=magicGetHistory,proto3" json:"magicGetHistory,omitempty"`
	MagicUseHistory int64 `protobuf:"varint,3,opt,name=magicUseHistory,proto3" json:"magicUseHistory,omitempty"`
}

func (x *MagicData) Reset() {
	*x = MagicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicData) ProtoMessage() {}

func (x *MagicData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicData.ProtoReflect.Descriptor instead.
func (*MagicData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{65}
}

func (x *MagicData) GetMagicValue() int32 {
	if x != nil {
		return x.MagicValue
	}
	return 0
}

func (x *MagicData) GetMagicGetHistory() int64 {
	if x != nil {
		return x.MagicGetHistory
	}
	return 0
}

func (x *MagicData) GetMagicUseHistory() int64 {
	if x != nil {
		return x.MagicUseHistory
	}
	return 0
}

//Npc Wonder 数据记录
type NpcWonderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlreadyGuide int32 `protobuf:"varint,1,opt,name=alreadyGuide,proto3" json:"alreadyGuide,omitempty"`
	AlreadyTap   int32 `protobuf:"varint,2,opt,name=alreadyTap,proto3" json:"alreadyTap,omitempty"`
	AlreadyMerge int32 `protobuf:"varint,3,opt,name=alreadyMerge,proto3" json:"alreadyMerge,omitempty"`
}

func (x *NpcWonderData) Reset() {
	*x = NpcWonderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpcWonderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpcWonderData) ProtoMessage() {}

func (x *NpcWonderData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpcWonderData.ProtoReflect.Descriptor instead.
func (*NpcWonderData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{66}
}

func (x *NpcWonderData) GetAlreadyGuide() int32 {
	if x != nil {
		return x.AlreadyGuide
	}
	return 0
}

func (x *NpcWonderData) GetAlreadyTap() int32 {
	if x != nil {
		return x.AlreadyTap
	}
	return 0
}

func (x *NpcWonderData) GetAlreadyMerge() int32 {
	if x != nil {
		return x.AlreadyMerge
	}
	return 0
}

//Npc 额外奖励的产出次数
type NpcExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpcId int32   `protobuf:"varint,1,opt,name=npcId,proto3" json:"npcId,omitempty"`
	Times []int32 `protobuf:"varint,2,rep,packed,name=times,proto3" json:"times,omitempty"`
}

func (x *NpcExtra) Reset() {
	*x = NpcExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpcExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpcExtra) ProtoMessage() {}

func (x *NpcExtra) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpcExtra.ProtoReflect.Descriptor instead.
func (*NpcExtra) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{67}
}

func (x *NpcExtra) GetNpcId() int32 {
	if x != nil {
		return x.NpcId
	}
	return 0
}

func (x *NpcExtra) GetTimes() []int32 {
	if x != nil {
		return x.Times
	}
	return nil
}

//Npc 额外奖励的产出次数
type NpcPostion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpcId   int32 `protobuf:"varint,1,opt,name=npcId,proto3" json:"npcId,omitempty"`
	Postion int32 `protobuf:"varint,2,opt,name=postion,proto3" json:"postion,omitempty"`
}

func (x *NpcPostion) Reset() {
	*x = NpcPostion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpcPostion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpcPostion) ProtoMessage() {}

func (x *NpcPostion) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpcPostion.ProtoReflect.Descriptor instead.
func (*NpcPostion) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{68}
}

func (x *NpcPostion) GetNpcId() int32 {
	if x != nil {
		return x.NpcId
	}
	return 0
}

func (x *NpcPostion) GetPostion() int32 {
	if x != nil {
		return x.Postion
	}
	return 0
}

//Npc 额外奖励的数据
type NpcExtraData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpcExtra   []*NpcExtra   `protobuf:"bytes,1,rep,name=npcExtra,proto3" json:"npcExtra,omitempty"`
	NpcPostion []*NpcPostion `protobuf:"bytes,2,rep,name=npcPostion,proto3" json:"npcPostion,omitempty"`
}

func (x *NpcExtraData) Reset() {
	*x = NpcExtraData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpcExtraData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpcExtraData) ProtoMessage() {}

func (x *NpcExtraData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpcExtraData.ProtoReflect.Descriptor instead.
func (*NpcExtraData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{69}
}

func (x *NpcExtraData) GetNpcExtra() []*NpcExtra {
	if x != nil {
		return x.NpcExtra
	}
	return nil
}

func (x *NpcExtraData) GetNpcPostion() []*NpcPostion {
	if x != nil {
		return x.NpcPostion
	}
	return nil
}

//玩家的统计数据
type StatisticsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TodayMergeTime             int32           `protobuf:"varint,1,opt,name=todayMergeTime,proto3" json:"todayMergeTime,omitempty"`
	TodayPlayTime              int32           `protobuf:"varint,2,opt,name=todayPlayTime,proto3" json:"todayPlayTime,omitempty"`
	TodayOpenCount             int32           `protobuf:"varint,3,opt,name=todayOpenCount,proto3" json:"todayOpenCount,omitempty"`
	CloseTime                  int32           `protobuf:"varint,4,opt,name=closeTime,proto3" json:"closeTime,omitempty"`
	TotalOpenCount             int32           `protobuf:"varint,5,opt,name=totalOpenCount,proto3" json:"totalOpenCount,omitempty"`
	TotalPlayTime              int32           `protobuf:"varint,6,opt,name=totalPlayTime,proto3" json:"totalPlayTime,omitempty"`
	Active_Day                 int32           `protobuf:"varint,7,opt,name=active_Day,json=activeDay,proto3" json:"active_Day,omitempty"`
	TotalMergeTime             int32           `protobuf:"varint,8,opt,name=totalMergeTime,proto3" json:"totalMergeTime,omitempty"`
	EmptySpaceCount            int32           `protobuf:"varint,10,opt,name=emptySpaceCount,proto3" json:"emptySpaceCount,omitempty"`
	TodayFriendTreasureTimes   int32           `protobuf:"varint,11,opt,name=todayFriendTreasureTimes,proto3" json:"todayFriendTreasureTimes,omitempty"`
	TodayFriendVisitTimes      int32           `protobuf:"varint,12,opt,name=todayFriendVisitTimes,proto3" json:"todayFriendVisitTimes,omitempty"`
	TodayMaxLevelUseHeartTimes int32           `protobuf:"varint,13,opt,name=todayMaxLevelUseHeartTimes,proto3" json:"todayMaxLevelUseHeartTimes,omitempty"`
	TodayFriendTreasureTime    int32           `protobuf:"varint,14,opt,name=todayFriendTreasureTime,proto3" json:"todayFriendTreasureTime,omitempty"`
	TodayFriendVisitTime       int32           `protobuf:"varint,15,opt,name=todayFriendVisitTime,proto3" json:"todayFriendVisitTime,omitempty"`
	TodayMaxLevelUseHeartTime  int32           `protobuf:"varint,16,opt,name=todayMaxLevelUseHeartTime,proto3" json:"todayMaxLevelUseHeartTime,omitempty"`
	MergeOperator              []*MaterialJson `protobuf:"bytes,17,rep,name=mergeOperator,proto3" json:"mergeOperator,omitempty"`
	TodayUtcMergeTime          int32           `protobuf:"varint,18,opt,name=todayUtcMergeTime,proto3" json:"todayUtcMergeTime,omitempty"`
	TodayUtcPlayTime           int32           `protobuf:"varint,19,opt,name=todayUtcPlayTime,proto3" json:"todayUtcPlayTime,omitempty"`
	CloseUtcTime               int32           `protobuf:"varint,20,opt,name=closeUtcTime,proto3" json:"closeUtcTime,omitempty"`
	TotalMergeCount            int64           `protobuf:"varint,21,opt,name=totalMergeCount,proto3" json:"totalMergeCount,omitempty"`
}

func (x *StatisticsData) Reset() {
	*x = StatisticsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsData) ProtoMessage() {}

func (x *StatisticsData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsData.ProtoReflect.Descriptor instead.
func (*StatisticsData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{70}
}

func (x *StatisticsData) GetTodayMergeTime() int32 {
	if x != nil {
		return x.TodayMergeTime
	}
	return 0
}

func (x *StatisticsData) GetTodayPlayTime() int32 {
	if x != nil {
		return x.TodayPlayTime
	}
	return 0
}

func (x *StatisticsData) GetTodayOpenCount() int32 {
	if x != nil {
		return x.TodayOpenCount
	}
	return 0
}

func (x *StatisticsData) GetCloseTime() int32 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *StatisticsData) GetTotalOpenCount() int32 {
	if x != nil {
		return x.TotalOpenCount
	}
	return 0
}

func (x *StatisticsData) GetTotalPlayTime() int32 {
	if x != nil {
		return x.TotalPlayTime
	}
	return 0
}

func (x *StatisticsData) GetActive_Day() int32 {
	if x != nil {
		return x.Active_Day
	}
	return 0
}

func (x *StatisticsData) GetTotalMergeTime() int32 {
	if x != nil {
		return x.TotalMergeTime
	}
	return 0
}

func (x *StatisticsData) GetEmptySpaceCount() int32 {
	if x != nil {
		return x.EmptySpaceCount
	}
	return 0
}

func (x *StatisticsData) GetTodayFriendTreasureTimes() int32 {
	if x != nil {
		return x.TodayFriendTreasureTimes
	}
	return 0
}

func (x *StatisticsData) GetTodayFriendVisitTimes() int32 {
	if x != nil {
		return x.TodayFriendVisitTimes
	}
	return 0
}

func (x *StatisticsData) GetTodayMaxLevelUseHeartTimes() int32 {
	if x != nil {
		return x.TodayMaxLevelUseHeartTimes
	}
	return 0
}

func (x *StatisticsData) GetTodayFriendTreasureTime() int32 {
	if x != nil {
		return x.TodayFriendTreasureTime
	}
	return 0
}

func (x *StatisticsData) GetTodayFriendVisitTime() int32 {
	if x != nil {
		return x.TodayFriendVisitTime
	}
	return 0
}

func (x *StatisticsData) GetTodayMaxLevelUseHeartTime() int32 {
	if x != nil {
		return x.TodayMaxLevelUseHeartTime
	}
	return 0
}

func (x *StatisticsData) GetMergeOperator() []*MaterialJson {
	if x != nil {
		return x.MergeOperator
	}
	return nil
}

func (x *StatisticsData) GetTodayUtcMergeTime() int32 {
	if x != nil {
		return x.TodayUtcMergeTime
	}
	return 0
}

func (x *StatisticsData) GetTodayUtcPlayTime() int32 {
	if x != nil {
		return x.TodayUtcPlayTime
	}
	return 0
}

func (x *StatisticsData) GetCloseUtcTime() int32 {
	if x != nil {
		return x.CloseUtcTime
	}
	return 0
}

func (x *StatisticsData) GetTotalMergeCount() int64 {
	if x != nil {
		return x.TotalMergeCount
	}
	return 0
}

//钥匙数据
type KeyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyValue int32 `protobuf:"varint,1,opt,name=keyValue,proto3" json:"keyValue,omitempty"`
}

func (x *KeyData) Reset() {
	*x = KeyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userDataNative_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyData) ProtoMessage() {}

func (x *KeyData) ProtoReflect() protoreflect.Message {
	mi := &file_userDataNative_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyData.ProtoReflect.Descriptor instead.
func (*KeyData) Descriptor() ([]byte, []int) {
	return file_userDataNative_proto_rawDescGZIP(), []int{71}
}

func (x *KeyData) GetKeyValue() int32 {
	if x != nil {
		return x.KeyValue
	}
	return 0
}

var File_userDataNative_proto protoreflect.FileDescriptor

var file_userDataNative_proto_rawDesc = []byte{
	0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x03, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x42, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x04, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x62, 0x75, 0x62,
	0x62, 0x6c, 0x65, 0x42, 0x6f, 0x78, 0x4d, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0d, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x78, 0x4d, 0x61, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c,
	0x79, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x79, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x74, 0x73, 0x22, 0x56, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x70, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x75, 0x6e,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x66, 0x75, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0x45, 0x0a, 0x15, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x73, 0x22, 0x48, 0x0a, 0x0d, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x62, 0x6f, 0x78, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x04, 0x6d, 0x61, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x04, 0x6d, 0x61, 0x74, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x14,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x0a, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x52, 0x0a, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa6, 0x02, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x67, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x6d, 0x61, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x04, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x3c,
	0x0a, 0x19, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x65, 0x65, 0x64, 0x43, 0x44, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x44, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x73, 0x59, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x59, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70,
	0x22, 0xeb, 0x02, 0x0a, 0x0d, 0x55, 0x49, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x32, 0x0a, 0x0e, 0x75, 0x69, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x55, 0x49, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x52, 0x0e, 0x75, 0x69, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x3e, 0x0a, 0x14, 0x77, 0x61, 0x69, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x55, 0x49, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78,
	0x52, 0x14, 0x77, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f,
	0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x65, 0x42, 0x6f,
	0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x66, 0x72, 0x65, 0x65, 0x42, 0x6f, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x42, 0x6f, 0x78, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x70, 0x61, 0x79, 0x42, 0x6f, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x65, 0x65, 0x42, 0x6f, 0x78, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x72, 0x65, 0x65, 0x42, 0x6f, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x42, 0x6f, 0x78, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x42, 0x6f, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x22, 0xbb,
	0x01, 0x0a, 0x09, 0x55, 0x49, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x6f, 0x78, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x62, 0x6f, 0x78, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f,
	0x78, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x6f, 0x78, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x6f, 0x78, 0x43, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x62, 0x6f, 0x78, 0x43, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfb, 0x04, 0x0a,
	0x08, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x62, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x62, 0x48, 0x65, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x62, 0x48, 0x65,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x44, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x44, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x42, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x42, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x65, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x41, 0x42, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x41, 0x42, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x08, 0x41, 0x42, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f,
	0x6c, 0x64, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x09, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x68, 0x65, 0x61, 0x72, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x55, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6e, 0x6f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe5,
	0x01, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x42, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x74,
	0x65, 0x6d, 0x42, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x74, 0x65,
	0x6d, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x70, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x42, 0x75, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x79, 0x12, 0x2d, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x22, 0x32, 0x0a, 0x0a, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x07, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x52, 0x07, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x0a, 0x42, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x61, 0x70, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xef,
	0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d,
	0x61, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x4e, 0x65,
	0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x4e, 0x65, 0x77,
	0x22, 0x55, 0x0a, 0x14, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x12, 0x70, 0x69, 0x65, 0x63,
	0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x69, 0x65, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0x44, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x6e, 0x65, 0x77, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x73, 0x22, 0x41, 0x0a,
	0x0e, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x69, 0x64, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x0b, 0x67, 0x72, 0x69, 0x64, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x72, 0x69, 0x64, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x22, 0xbd, 0x03, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x67, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x62, 0x67, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69,
	0x73, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x43, 0x6f,
	0x6d, 0x62, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x6f, 0x6d,
	0x62, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x2e, 0x0a, 0x12, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x73, 0x65,
	0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x73, 0x65, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x12, 0x42, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x75, 0x73, 0x65,
	0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x46, 0x75, 0x73, 0x65, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x22, 0x5a, 0x0a, 0x0a, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72,
	0x74, 0x68, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x72, 0x74, 0x68,
	0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x22, 0xa7, 0x02, 0x0a,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x05, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x6e, 0x64, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x0b,
	0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x64, 0x52, 0x0b, 0x61, 0x6c, 0x6c,
	0x45, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x50,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e,
	0x64, 0x50, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73,
	0x6b, 0x69, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x1f,
	0x6e, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x6e, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xe3, 0x04, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x70, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6b, 0x69,
	0x70, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6b, 0x69,
	0x70, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65,
	0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6e, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61,
	0x73, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x0b, 0x74,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x0b, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x15,
	0x74, 0x61, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x61, 0x73,
	0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x33, 0x0a, 0x07,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x32, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x50, 0x6c, 0x6f, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x50,
	0x6c, 0x6f, 0x74, 0x49, 0x44, 0x22, 0xd3, 0x02, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x74, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x65,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x65, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x1b,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4e, 0x6f, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4e, 0x6f, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x46, 0x6c, 0x6f, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x74, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x6f,
	0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x0f,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x48, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x48, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x43,
	0x61, 0x6e, 0x42, 0x79, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x42, 0x79, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x22, 0xae, 0x07, 0x0a, 0x0f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x61,
	0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x6c,
	0x66, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x66, 0x46, 0x69,
	0x6e, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x4c,
	0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x4c, 0x69, 0x6b,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x10, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x16, 0x47, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x76, 0x65, 0x4c, 0x69,
	0x6b, 0x65, 0x41, 0x49, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x16,
	0x47, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6b, 0x65,
	0x41, 0x49, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x69, 0x73, 0x47, 0x6f, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x47, 0x6f,
	0x54, 0x6f, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x55,
	0x0a, 0x16, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x16, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x1c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46,
	0x69, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x1c, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x73, 0x46, 0x72,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x46, 0x72,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x8f, 0x05, 0x0a, 0x19, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x50, 0x69, 0x65, 0x63, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38,
	0x0a, 0x17, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x77, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x17, 0x6e, 0x6f, 0x77, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x17, 0x6e, 0x6f, 0x77,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x73, 0x43, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x73, 0x43, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x49, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x18,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x18,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x40,
	0x0a, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x73,
	0x12, 0x34, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x53, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x22, 0x35, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x50, 0x69, 0x65, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x7c, 0x0a,
	0x1c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61,
	0x79, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x50, 0x75,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f,
	0x75, 0x74, 0x50, 0x75, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x58, 0x0a, 0x10, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x15, 0x47, 0x6f, 0x46, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x47, 0x6f, 0x46, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0xa5, 0x03, 0x0a, 0x0f, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x6e, 0x4c, 0x69, 0x6e,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x55, 0x70, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x41, 0x64, 0x64, 0x55, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x6f, 0x77, 0x50, 0x6c, 0x6f, 0x74, 0x4c, 0x6f, 0x63, 0x6b,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x4e, 0x6f, 0x77, 0x50, 0x6c, 0x6f, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4f, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x4f, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3a, 0x0a,
	0x18, 0x41, 0x64, 0x64, 0x55, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x41, 0x64, 0x64, 0x55, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x50, 0x6c, 0x6f, 0x74, 0x41, 0x64, 0x64, 0x55, 0x70, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x50,
	0x6c, 0x6f, 0x74, 0x41, 0x64, 0x64, 0x55, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x22, 0x9b, 0x01,
	0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x38, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x11,
	0x42, 0x61, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x6f, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x62,
	0x6f, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x70,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xbf, 0x02, 0x0a, 0x11,
	0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x33, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x50, 0x69, 0x65, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x50, 0x69, 0x65, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4e, 0x70, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x70, 0x63, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0d,
	0x70, 0x61, 0x79, 0x50, 0x69, 0x65, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73,
	0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x50, 0x69, 0x65, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x12,
	0x3c, 0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f,
	0x78, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x78, 0x73, 0x22, 0xa0, 0x01,
	0x0a, 0x08, 0x4e, 0x50, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x77,
	0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x77, 0x64, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x61, 0x0a, 0x0f, 0x4e, 0x50, 0x43, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x74,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x74, 0x63, 0x22, 0xd5, 0x02, 0x0a, 0x07, 0x4e, 0x50, 0x43, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x25, 0x0a, 0x08, 0x6e, 0x70, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x4e, 0x50, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x6e, 0x70,
	0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x4c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x6f, 0x46, 0x61, 0x69, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0c, 0x64, 0x6f, 0x46, 0x61, 0x69, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27,
	0x0a, 0x07, 0x72, 0x77, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x07,
	0x72, 0x77, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4e,
	0x50, 0x43, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x03, 0x42,
	0x75, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7b, 0x0a, 0x07,
	0x42, 0x75, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x04, 0x62, 0x75, 0x79,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x75, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x75,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x65, 0x6e, 0x64, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x55, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x75, 0x6e,
	0x73, 0x65, 0x6e, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x22, 0x5d, 0x0a, 0x0f, 0x55, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xbc, 0x02, 0x0a, 0x0e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x73, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65,
	0x78, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x55,
	0x74, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x74,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x52,
	0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x52, 0x77,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x77, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x77, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x55, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x6c,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x7c, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x70, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x74,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x74, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x63, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x73, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x74, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x63, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x75, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x75, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x74,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x63, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x49, 0x64, 0x22, 0xd7, 0x03, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x04, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x04, 0x6d,
	0x61, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x74, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x73, 0x74, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x61, 0x73, 0x74, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x55, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69,
	0x73, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x61, 0x70, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x43, 0x61, 0x73, 0x74, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4e, 0x65, 0x77,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x73, 0x74, 0x61, 0x6c, 0x52, 0x0d,
	0x6e, 0x65, 0x77, 0x43, 0x61, 0x73, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a,
	0x0a, 0x6e, 0x65, 0x77, 0x4e, 0x70, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e,
	0x70, 0x63, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x4e, 0x70, 0x63, 0x44, 0x61, 0x74, 0x61, 0x22, 0xae,
	0x01, 0x0a, 0x0e, 0x4c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x4c,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x41,
	0x72, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x43,
	0x6f, 0x69, 0x6e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x72, 0x72, 0x6f,
	0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x43,
	0x6f, 0x69, 0x6e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x22,
	0xb9, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x4c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x4c, 0x6f, 0x63,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x77, 0x55, 0x6e, 0x4c, 0x6f,
	0x63, 0x6b, 0x4c, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x10, 0x6e, 0x6f, 0x77, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x61, 0x6e, 0x64, 0x49, 0x64,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x72, 0x72, 0x6f, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x72,
	0x72, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x41,
	0x72, 0x72, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x41,
	0x72, 0x72, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x22, 0x41, 0x0a, 0x07, 0x45,
	0x78, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x97,
	0x06, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x61,
	0x69, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x50, 0x0a, 0x23,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x61, 0x69,
	0x6c, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x23, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x69, 0x66,
	0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x69,
	0x66, 0x66, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x64,
	0x64, 0x53, 0x74, 0x65, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x64, 0x64, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2e, 0x0a, 0x0c,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x52, 0x0c,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x1e,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x61, 0x69,
	0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x65, 0x70, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x51, 0x75, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x46,
	0x61, 0x69, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x51, 0x75, 0x69, 0x74, 0x12, 0x38,
	0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x44, 0x69, 0x66, 0x66, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x44, 0x69, 0x66, 0x66, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x22, 0x62, 0x0a, 0x0e, 0x44, 0x69, 0x61, 0x6d,
	0x6f, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x03, 0x0a,
	0x09, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x0f, 0x64, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x3c, 0x0a, 0x12, 0x64,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x10, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x61, 0x70, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x61, 0x70, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x61, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x61, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x61, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x49, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x79,
	0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61,
	0x79, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xfd, 0x02, 0x0a, 0x0b, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x62, 0x75, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a,
	0x0b, 0x64, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x73, 0x47, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x64, 0x61, 0x79, 0x73, 0x47, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x64,
	0x61, 0x79, 0x73, 0x50, 0x61, 0x79, 0x47, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x44, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x64, 0x61, 0x79, 0x73, 0x50, 0x61, 0x79, 0x47, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x47, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x47,
	0x65, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x79, 0x47, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x50, 0x61, 0x79, 0x47, 0x65, 0x74, 0x22, 0x3a, 0x0a, 0x0e, 0x44, 0x61, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x50, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x34, 0x0a, 0x0c, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x22, 0x90, 0x01, 0x0a, 0x0c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f,
	0x6e, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x6f, 0x78, 0x4e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x42, 0x6f, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x77, 0x4d, 0x61, 0x78,
	0x42, 0x6f, 0x78, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x6f,
	0x77, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x49, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x49, 0x6e,
	0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6f, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0xc4,
	0x01, 0x0a, 0x10, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x49, 0x6c, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x65,
	0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x65, 0x77, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xd1, 0x02, 0x0a, 0x0a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x07, 0x62, 0x75, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x42, 0x75, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x62, 0x75, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x65, 0x77, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x0b, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x22, 0x95, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x30, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x6f,
	0x6f, 0x6b, 0x49, 0x64, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x6f, 0x6f, 0x6b, 0x49,
	0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x2a, 0x0a, 0x0a, 0x43, 0x61, 0x73, 0x74, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x61, 0x70,
	0x22, 0x7e, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x42, 0x75, 0x62,
	0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x22, 0xdd, 0x01, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x85, 0x01, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x70, 0x63, 0x49, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x70, 0x63, 0x49, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x77, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x77, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x10, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x09, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x73, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x77, 0x0a, 0x0d, 0x4e, 0x70, 0x63, 0x57, 0x6f,
	0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x47, 0x75, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x61, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x22, 0x36, 0x0a, 0x08, 0x4e, 0x70, 0x63, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x70, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x70, 0x63,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x0a, 0x4e, 0x70, 0x63, 0x50,
	0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70,
	0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x0c, 0x4e, 0x70, 0x63, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x08, 0x6e, 0x70, 0x63, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4e, 0x70, 0x63, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x52, 0x08, 0x6e, 0x70, 0x63, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x2b, 0x0a,
	0x0a, 0x6e, 0x70, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x4e, 0x70, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x6e, 0x70, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x07, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x6c,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x44, 0x61, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x18, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x6f, 0x64,
	0x61, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x4d, 0x61, 0x78,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x19, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x55, 0x74, 0x63, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x55, 0x74, 0x63, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x55, 0x74, 0x63, 0x50, 0x6c, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x64,
	0x61, 0x79, 0x55, 0x74, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x25, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2a, 0x2f, 0x0a, 0x0a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x61,
	0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x10, 0x02, 0x42, 0x17, 0x48, 0x01, 0x5a, 0x06, 0x2e, 0x2f, 0x3b, 0x61, 0x70, 0x69, 0xaa,
	0x02, 0x0a, 0x4d, 0x4d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_userDataNative_proto_rawDescOnce sync.Once
	file_userDataNative_proto_rawDescData = file_userDataNative_proto_rawDesc
)

func file_userDataNative_proto_rawDescGZIP() []byte {
	file_userDataNative_proto_rawDescOnce.Do(func() {
		file_userDataNative_proto_rawDescData = protoimpl.X.CompressGZIP(file_userDataNative_proto_rawDescData)
	})
	return file_userDataNative_proto_rawDescData
}

var file_userDataNative_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_userDataNative_proto_msgTypes = make([]protoimpl.MessageInfo, 72)
var file_userDataNative_proto_goTypes = []interface{}{
	(FriendType)(0),                      // 0: FriendType
	(*MapBubble)(nil),                    // 1: MapBubble
	(*FunctionMapBubble)(nil),            // 2: FunctionMapBubble
	(*FunctionMapBubbleData)(nil),        // 3: FunctionMapBubbleData
	(*BubbleBoxData)(nil),                // 4: BubbleBoxData
	(*SuperLevelBubbleData)(nil),         // 5: SuperLevelBubbleData
	(*MapBasket)(nil),                    // 6: MapBasket
	(*UITimeBoxData)(nil),                // 7: UITimeBoxData
	(*UITimeBox)(nil),                    // 8: UITimeBox
	(*BaseData)(nil),                     // 9: BaseData
	(*HeartData)(nil),                    // 10: HeartData
	(*ItemData)(nil),                     // 11: ItemData
	(*BubbleData)(nil),                   // 12: BubbleData
	(*BasketData)(nil),                   // 13: BasketData
	(*MapBuildingData)(nil),              // 14: MapBuildingData
	(*BuildingMergeCounter)(nil),         // 15: BuildingMergeCounter
	(*NewBuildingNotices)(nil),           // 16: NewBuildingNotices
	(*MapGridSprites)(nil),               // 17: MapGridSprites
	(*SystemSetting)(nil),                // 18: SystemSetting
	(*CameraData)(nil),                   // 19: CameraData
	(*TaskData)(nil),                     // 20: TaskData
	(*Task)(nil),                         // 21: Task
	(*TaskEnd)(nil),                      // 22: TaskEnd
	(*GamePlotData)(nil),                 // 23: GamePlotData
	(*FlotageData)(nil),                  // 24: FlotageData
	(*LocalFriendData)(nil),              // 25: LocalFriendData
	(*FriendLocalData)(nil),              // 26: FriendLocalData
	(*CollectPiecesActivityData)(nil),    // 27: CollectPiecesActivityData
	(*CollectPiecesData)(nil),            // 28: CollectPiecesData
	(*FriendFindTreasureOutputData)(nil), // 29: FriendFindTreasureOutputData
	(*RemoveFriendData)(nil),             // 30: RemoveFriendData
	(*AchievementData)(nil),              // 31: AchievementData
	(*LoginDaysData)(nil),                // 32: LoginDaysData
	(*BalaceTimeBoxData)(nil),            // 33: BalaceTimeBoxData
	(*GameEndBalaceData)(nil),            // 34: GameEndBalaceData
	(*NPCEvent)(nil),                     // 35: NPCEvent
	(*NPCSpecialState)(nil),              // 36: NPCSpecialState
	(*NPCData)(nil),                      // 37: NPCData
	(*Buy)(nil),                          // 38: Buy
	(*BuyData)(nil),                      // 39: BuyData
	(*UnfinishedOrder)(nil),              // 40: UnfinishedOrder
	(*BuildingCastal)(nil),               // 41: BuildingCastal
	(*NewBuildingNpc)(nil),               // 42: NewBuildingNpc
	(*NewBuildingCastal)(nil),            // 43: NewBuildingCastal
	(*BuildingFuncData)(nil),             // 44: BuildingFuncData
	(*MapBuilding)(nil),                  // 45: MapBuilding
	(*LandUnLockData)(nil),               // 46: LandUnLockData
	(*NewLandUnLockData)(nil),            // 47: NewLandUnLockData
	(*ExpData)(nil),                      // 48: ExpData
	(*LevelData)(nil),                    // 49: LevelData
	(*DiamondUseData)(nil),               // 50: DiamondUseData
	(*MoneyData)(nil),                    // 51: MoneyData
	(*HistoryData)(nil),                  // 52: HistoryData
	(*DayHistoryData)(nil),               // 53: DayHistoryData
	(*TimesHistoryData)(nil),             // 54: TimesHistoryData
	(*Illustration)(nil),                 // 55: Illustration
	(*LevelBoxData)(nil),                 // 56: LevelBoxData
	(*IllustrationData)(nil),             // 57: IllustrationData
	(*FriendData)(nil),                   // 58: FriendData
	(*ClickBookId)(nil),                  // 59: ClickBookId
	(*CollectBookData)(nil),              // 60: CollectBookData
	(*CastalData)(nil),                   // 61: CastalData
	(*BuildingMergeData)(nil),            // 62: BuildingMergeData
	(*EventRecord)(nil),                  // 63: EventRecord
	(*EventRecordData)(nil),              // 64: EventRecordData
	(*EventOutPutData)(nil),              // 65: EventOutPutData
	(*MagicData)(nil),                    // 66: MagicData
	(*NpcWonderData)(nil),                // 67: NpcWonderData
	(*NpcExtra)(nil),                     // 68: NpcExtra
	(*NpcPostion)(nil),                   // 69: NpcPostion
	(*NpcExtraData)(nil),                 // 70: NpcExtraData
	(*StatisticsData)(nil),               // 71: StatisticsData
	(*KeyData)(nil),                      // 72: KeyData
	(*MaterialJson)(nil),                 // 73: MaterialJson
	(*ABConfig)(nil),                     // 74: ABConfig
}
var file_userDataNative_proto_depIdxs = []int32{
	73, // 0: MapBubble.mats:type_name -> MaterialJson
	4,  // 1: MapBubble.bubbleBoxMats:type_name -> BubbleBoxData
	5,  // 2: MapBubble.superBubbleMats:type_name -> SuperLevelBubbleData
	44, // 3: FunctionMapBubble.funcDatas:type_name -> BuildingFuncData
	2,  // 4: FunctionMapBubbleData.bubbles:type_name -> FunctionMapBubble
	73, // 5: BubbleBoxData.mats:type_name -> MaterialJson
	1,  // 6: SuperLevelBubbleData.bubbleData:type_name -> MapBubble
	73, // 7: SuperLevelBubbleData.itemData:type_name -> MaterialJson
	73, // 8: MapBasket.mats:type_name -> MaterialJson
	8,  // 9: UITimeBoxData.uiTimeBoxDatas:type_name -> UITimeBox
	8,  // 10: UITimeBoxData.waitOpenTimeBoxQueue:type_name -> UITimeBox
	74, // 11: BaseData.ABConfig:type_name -> ABConfig
	73, // 12: ItemData.itemBags:type_name -> MaterialJson
	73, // 13: ItemData.historyBuy:type_name -> MaterialJson
	73, // 14: ItemData.historyUse:type_name -> MaterialJson
	1,  // 15: BubbleData.bubbles:type_name -> MapBubble
	6,  // 16: BasketData.baskets:type_name -> MapBasket
	45, // 17: MapBuildingData.mapBuildings:type_name -> MapBuilding
	73, // 18: BuildingMergeCounter.pieceMergeCounters:type_name -> MaterialJson
	73, // 19: MapGridSprites.gridSprites:type_name -> MaterialJson
	21, // 20: TaskData.tasks:type_name -> Task
	22, // 21: TaskData.endTasks:type_name -> TaskEnd
	22, // 22: TaskData.allEndTasks:type_name -> TaskEnd
	73, // 23: Task.taskRewards:type_name -> MaterialJson
	25, // 24: FriendLocalData.friendDatas:type_name -> LocalFriendData
	30, // 25: FriendLocalData.RemoveFriendList:type_name -> RemoveFriendData
	29, // 26: FriendLocalData.friendFindTreasureData:type_name -> FriendFindTreasureOutputData
	73, // 27: FriendLocalData.FriendFindTreasureRewardData:type_name -> MaterialJson
	28, // 28: CollectPiecesActivityData.nowActivityCollectDatas:type_name -> CollectPiecesData
	73, // 29: GameEndBalaceData.newPieceTimes:type_name -> MaterialJson
	73, // 30: GameEndBalaceData.payPieceTimes:type_name -> MaterialJson
	33, // 31: GameEndBalaceData.timeBox:type_name -> BalaceTimeBoxData
	33, // 32: GameEndBalaceData.historyTimeBoxs:type_name -> BalaceTimeBoxData
	35, // 33: NPCData.npcEvent:type_name -> NPCEvent
	73, // 34: NPCData.rwdData:type_name -> MaterialJson
	36, // 35: NPCData.specialData:type_name -> NPCSpecialState
	38, // 36: BuyData.buys:type_name -> Buy
	40, // 37: BuyData.unsendGoods:type_name -> UnfinishedOrder
	73, // 38: MapBuilding.mats:type_name -> MaterialJson
	44, // 39: MapBuilding.funcDatas:type_name -> BuildingFuncData
	41, // 40: MapBuilding.castalData:type_name -> BuildingCastal
	6,  // 41: MapBuilding.basketData:type_name -> MapBasket
	43, // 42: MapBuilding.newCastalData:type_name -> NewBuildingCastal
	42, // 43: MapBuilding.newNpcData:type_name -> NewBuildingNpc
	1,  // 44: LevelData.levelBubbles:type_name -> MapBubble
	50, // 45: MoneyData.diamondUseDatas:type_name -> DiamondUseData
	52, // 46: MoneyData.diamondHistoryData:type_name -> HistoryData
	52, // 47: MoneyData.moneyHistoryData:type_name -> HistoryData
	53, // 48: HistoryData.daysConsume:type_name -> DayHistoryData
	53, // 49: HistoryData.daysGet:type_name -> DayHistoryData
	53, // 50: HistoryData.daysPayGet:type_name -> DayHistoryData
	54, // 51: HistoryData.timesConsume:type_name -> TimesHistoryData
	54, // 52: HistoryData.timesGet:type_name -> TimesHistoryData
	54, // 53: HistoryData.timesPayGet:type_name -> TimesHistoryData
	55, // 54: IllustrationData.illustrations:type_name -> Illustration
	73, // 55: IllustrationData.lineUnLockTimes:type_name -> MaterialJson
	0,  // 56: FriendData.friendType:type_name -> FriendType
	39, // 57: FriendData.buyData:type_name -> BuyData
	59, // 58: CollectBookData.clickBookIds:type_name -> ClickBookId
	73, // 59: BuildingMergeData.buildingMergeTimes:type_name -> MaterialJson
	63, // 60: EventRecordData.eventRecords:type_name -> EventRecord
	73, // 61: EventOutPutData.eventIdWithTimes:type_name -> MaterialJson
	68, // 62: NpcExtraData.npcExtra:type_name -> NpcExtra
	69, // 63: NpcExtraData.npcPostion:type_name -> NpcPostion
	73, // 64: StatisticsData.mergeOperator:type_name -> MaterialJson
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_userDataNative_proto_init() }
func file_userDataNative_proto_init() {
	if File_userDataNative_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_userDataNative_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBubble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionMapBubble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionMapBubbleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BubbleBoxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperLevelBubbleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBasket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UITimeBoxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UITimeBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BubbleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBuildingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingMergeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBuildingNotices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapGridSprites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlotageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalFriendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendLocalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectPiecesActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectPiecesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendFindTreasureOutputData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFriendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginDaysData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalaceTimeBoxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEndBalaceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NPCEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NPCSpecialState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NPCData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnfinishedOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingCastal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBuildingNpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBuildingCastal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFuncData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LandUnLockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewLandUnLockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiamondUseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DayHistoryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimesHistoryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Illustration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelBoxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IllustrationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickBookId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectBookData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CastalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingMergeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventOutPutData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpcWonderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpcExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpcPostion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpcExtraData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userDataNative_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userDataNative_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   72,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_userDataNative_proto_goTypes,
		DependencyIndexes: file_userDataNative_proto_depIdxs,
		EnumInfos:         file_userDataNative_proto_enumTypes,
		MessageInfos:      file_userDataNative_proto_msgTypes,
	}.Build()
	File_userDataNative_proto = out.File
	file_userDataNative_proto_rawDesc = nil
	file_userDataNative_proto_goTypes = nil
	file_userDataNative_proto_depIdxs = nil
}
