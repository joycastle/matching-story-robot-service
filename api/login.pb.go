// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: login.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type E_USER_TYPE int32

const (
	E_USER_TYPE_NORMAL E_USER_TYPE = 0
	E_USER_TYPE_GUEST  E_USER_TYPE = 1
	E_USER_TYPE_GM     E_USER_TYPE = 2
)

// Enum value maps for E_USER_TYPE.
var (
	E_USER_TYPE_name = map[int32]string{
		0: "NORMAL",
		1: "GUEST",
		2: "GM",
	}
	E_USER_TYPE_value = map[string]int32{
		"NORMAL": 0,
		"GUEST":  1,
		"GM":     2,
	}
)

func (x E_USER_TYPE) Enum() *E_USER_TYPE {
	p := new(E_USER_TYPE)
	*p = x
	return p
}

func (x E_USER_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_USER_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_login_proto_enumTypes[0].Descriptor()
}

func (E_USER_TYPE) Type() protoreflect.EnumType {
	return &file_login_proto_enumTypes[0]
}

func (x E_USER_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_USER_TYPE.Descriptor instead.
func (E_USER_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{0}
}

type E_LOGIN_RESPONSE int32

const (
	E_LOGIN_RESPONSE_FAILED          E_LOGIN_RESPONSE = 0
	E_LOGIN_RESPONSE_SUCCESSED_NEW   E_LOGIN_RESPONSE = 1
	E_LOGIN_RESPONSE_SUCCESSED_EXIST E_LOGIN_RESPONSE = 2
)

// Enum value maps for E_LOGIN_RESPONSE.
var (
	E_LOGIN_RESPONSE_name = map[int32]string{
		0: "FAILED",
		1: "SUCCESSED_NEW",
		2: "SUCCESSED_EXIST",
	}
	E_LOGIN_RESPONSE_value = map[string]int32{
		"FAILED":          0,
		"SUCCESSED_NEW":   1,
		"SUCCESSED_EXIST": 2,
	}
)

func (x E_LOGIN_RESPONSE) Enum() *E_LOGIN_RESPONSE {
	p := new(E_LOGIN_RESPONSE)
	*p = x
	return p
}

func (x E_LOGIN_RESPONSE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_LOGIN_RESPONSE) Descriptor() protoreflect.EnumDescriptor {
	return file_login_proto_enumTypes[1].Descriptor()
}

func (E_LOGIN_RESPONSE) Type() protoreflect.EnumType {
	return &file_login_proto_enumTypes[1]
}

func (x E_LOGIN_RESPONSE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_LOGIN_RESPONSE.Descriptor instead.
func (E_LOGIN_RESPONSE) EnumDescriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{1}
}

type E_SC_OPERATOR_TYPE int32

const (
	//需要同步数据(弹出数据选择)
	E_SC_OPERATOR_TYPE_SYNCDATA E_SC_OPERATOR_TYPE = 0
	//使用服务端的数据(本地没有数据时)
	E_SC_OPERATOR_TYPE_USESERVER E_SC_OPERATOR_TYPE = 1
	//使用客户端的数据(设备一致)
	E_SC_OPERATOR_TYPE_USELOCAL E_SC_OPERATOR_TYPE = 2
	//弹出游客数据将被覆盖提示
	E_SC_OPERATOR_TYPE_FORCESERVER E_SC_OPERATOR_TYPE = 3
	//客户端上传本地数据，创建FB账号，删除游客数据
	E_SC_OPERATOR_TYPE_FORCELOCAL E_SC_OPERATOR_TYPE = 4
)

// Enum value maps for E_SC_OPERATOR_TYPE.
var (
	E_SC_OPERATOR_TYPE_name = map[int32]string{
		0: "SYNCDATA",
		1: "USESERVER",
		2: "USELOCAL",
		3: "FORCESERVER",
		4: "FORCELOCAL",
	}
	E_SC_OPERATOR_TYPE_value = map[string]int32{
		"SYNCDATA":    0,
		"USESERVER":   1,
		"USELOCAL":    2,
		"FORCESERVER": 3,
		"FORCELOCAL":  4,
	}
)

func (x E_SC_OPERATOR_TYPE) Enum() *E_SC_OPERATOR_TYPE {
	p := new(E_SC_OPERATOR_TYPE)
	*p = x
	return p
}

func (x E_SC_OPERATOR_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_SC_OPERATOR_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_login_proto_enumTypes[2].Descriptor()
}

func (E_SC_OPERATOR_TYPE) Type() protoreflect.EnumType {
	return &file_login_proto_enumTypes[2]
}

func (x E_SC_OPERATOR_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_SC_OPERATOR_TYPE.Descriptor instead.
func (E_SC_OPERATOR_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{2}
}

type E_SC_SAVE_OPERATOR_TYPE int32

const (
	//存盘成功
	E_SC_SAVE_OPERATOR_TYPE_SAVE_SUCCESSED E_SC_SAVE_OPERATOR_TYPE = 0
	//存盘失败(校验失败)
	E_SC_SAVE_OPERATOR_TYPE_SAVE_FAILED E_SC_SAVE_OPERATOR_TYPE = 1
	//用户存盘时，此次发送的设备ID和上次不同,踢掉，重新登录
	E_SC_SAVE_OPERATOR_TYPE_KICKOUT E_SC_SAVE_OPERATOR_TYPE = 2
	//用户数据异常，强制使用服务器数据覆盖本地数据
	E_SC_SAVE_OPERATOR_TYPE_FORCE_USE_SERVER E_SC_SAVE_OPERATOR_TYPE = 3
	//弹出数据选择面板
	E_SC_SAVE_OPERATOR_TYPE_SYNC_DATA E_SC_SAVE_OPERATOR_TYPE = 4
)

// Enum value maps for E_SC_SAVE_OPERATOR_TYPE.
var (
	E_SC_SAVE_OPERATOR_TYPE_name = map[int32]string{
		0: "SAVE_SUCCESSED",
		1: "SAVE_FAILED",
		2: "KICKOUT",
		3: "FORCE_USE_SERVER",
		4: "SYNC_DATA",
	}
	E_SC_SAVE_OPERATOR_TYPE_value = map[string]int32{
		"SAVE_SUCCESSED":   0,
		"SAVE_FAILED":      1,
		"KICKOUT":          2,
		"FORCE_USE_SERVER": 3,
		"SYNC_DATA":        4,
	}
)

func (x E_SC_SAVE_OPERATOR_TYPE) Enum() *E_SC_SAVE_OPERATOR_TYPE {
	p := new(E_SC_SAVE_OPERATOR_TYPE)
	*p = x
	return p
}

func (x E_SC_SAVE_OPERATOR_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_SC_SAVE_OPERATOR_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_login_proto_enumTypes[3].Descriptor()
}

func (E_SC_SAVE_OPERATOR_TYPE) Type() protoreflect.EnumType {
	return &file_login_proto_enumTypes[3]
}

func (x E_SC_SAVE_OPERATOR_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_SC_SAVE_OPERATOR_TYPE.Descriptor instead.
func (E_SC_SAVE_OPERATOR_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{3}
}

type E_SC_SYNC_OPERATOR_TYPE int32

const (
	E_SC_SYNC_OPERATOR_TYPE_USE_LOCAL_DATA   E_SC_SYNC_OPERATOR_TYPE = 0
	E_SC_SYNC_OPERATOR_TYPE_USE_SERVER_DATA  E_SC_SYNC_OPERATOR_TYPE = 1
	E_SC_SYNC_OPERATOR_TYPE_CHECK_DATA_ERROR E_SC_SYNC_OPERATOR_TYPE = 2
)

// Enum value maps for E_SC_SYNC_OPERATOR_TYPE.
var (
	E_SC_SYNC_OPERATOR_TYPE_name = map[int32]string{
		0: "USE_LOCAL_DATA",
		1: "USE_SERVER_DATA",
		2: "CHECK_DATA_ERROR",
	}
	E_SC_SYNC_OPERATOR_TYPE_value = map[string]int32{
		"USE_LOCAL_DATA":   0,
		"USE_SERVER_DATA":  1,
		"CHECK_DATA_ERROR": 2,
	}
)

func (x E_SC_SYNC_OPERATOR_TYPE) Enum() *E_SC_SYNC_OPERATOR_TYPE {
	p := new(E_SC_SYNC_OPERATOR_TYPE)
	*p = x
	return p
}

func (x E_SC_SYNC_OPERATOR_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_SC_SYNC_OPERATOR_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_login_proto_enumTypes[4].Descriptor()
}

func (E_SC_SYNC_OPERATOR_TYPE) Type() protoreflect.EnumType {
	return &file_login_proto_enumTypes[4]
}

func (x E_SC_SYNC_OPERATOR_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_SC_SYNC_OPERATOR_TYPE.Descriptor instead.
func (E_SC_SYNC_OPERATOR_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{4}
}

type E_BIND_ACCOUNT_TYPE int32

const (
	//请求绑定数据
	E_BIND_ACCOUNT_TYPE_ASK_BIND E_BIND_ACCOUNT_TYPE = 0
	//帐号下有档，回复用户是否确认删除数据
	E_BIND_ACCOUNT_TYPE_RES_DEL_COMFIRE E_BIND_ACCOUNT_TYPE = 1
	//确认删除
	E_BIND_ACCOUNT_TYPE_COMFIRE_DEL E_BIND_ACCOUNT_TYPE = 2
	//成功
	E_BIND_ACCOUNT_TYPE_SUCESSED E_BIND_ACCOUNT_TYPE = 3
)

// Enum value maps for E_BIND_ACCOUNT_TYPE.
var (
	E_BIND_ACCOUNT_TYPE_name = map[int32]string{
		0: "ASK_BIND",
		1: "RES_DEL_COMFIRE",
		2: "COMFIRE_DEL",
		3: "SUCESSED",
	}
	E_BIND_ACCOUNT_TYPE_value = map[string]int32{
		"ASK_BIND":        0,
		"RES_DEL_COMFIRE": 1,
		"COMFIRE_DEL":     2,
		"SUCESSED":        3,
	}
)

func (x E_BIND_ACCOUNT_TYPE) Enum() *E_BIND_ACCOUNT_TYPE {
	p := new(E_BIND_ACCOUNT_TYPE)
	*p = x
	return p
}

func (x E_BIND_ACCOUNT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_BIND_ACCOUNT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_login_proto_enumTypes[5].Descriptor()
}

func (E_BIND_ACCOUNT_TYPE) Type() protoreflect.EnumType {
	return &file_login_proto_enumTypes[5]
}

func (x E_BIND_ACCOUNT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_BIND_ACCOUNT_TYPE.Descriptor instead.
func (E_BIND_ACCOUNT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{5}
}

type E_USER_DENIAL_TYPE int32

const (
	E_USER_DENIAL_TYPE_COMMON  E_USER_DENIAL_TYPE = 0
	E_USER_DENIAL_TYPE_LOCKED  E_USER_DENIAL_TYPE = 1
	E_USER_DENIAL_TYPE_DELETED E_USER_DENIAL_TYPE = 2
)

// Enum value maps for E_USER_DENIAL_TYPE.
var (
	E_USER_DENIAL_TYPE_name = map[int32]string{
		0: "COMMON",
		1: "LOCKED",
		2: "DELETED",
	}
	E_USER_DENIAL_TYPE_value = map[string]int32{
		"COMMON":  0,
		"LOCKED":  1,
		"DELETED": 2,
	}
)

func (x E_USER_DENIAL_TYPE) Enum() *E_USER_DENIAL_TYPE {
	p := new(E_USER_DENIAL_TYPE)
	*p = x
	return p
}

func (x E_USER_DENIAL_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_USER_DENIAL_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_login_proto_enumTypes[6].Descriptor()
}

func (E_USER_DENIAL_TYPE) Type() protoreflect.EnumType {
	return &file_login_proto_enumTypes[6]
}

func (x E_USER_DENIAL_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_USER_DENIAL_TYPE.Descriptor instead.
func (E_USER_DENIAL_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{6}
}

type CSLoginCheckAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel       E_CHANNEL_TYPE    `protobuf:"varint,1,opt,name=channel,proto3,enum=E_CHANNEL_TYPE" json:"channel,omitempty"`
	AccountId     string            `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	DeviceInfo    *DeviceInfo       `protobuf:"bytes,3,opt,name=deviceInfo,proto3" json:"deviceInfo,omitempty"`
	LocalDateType E_LOCAL_DATA_TYPE `protobuf:"varint,4,opt,name=localDateType,proto3,enum=E_LOCAL_DATA_TYPE" json:"localDateType,omitempty"`
	LanguageType  int32             `protobuf:"varint,5,opt,name=languageType,proto3" json:"languageType,omitempty"`
	Country       string            `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	Level         int32             `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`
	TestUser      int32             `protobuf:"varint,8,opt,name=testUser,proto3" json:"testUser,omitempty"`
}

func (x *CSLoginCheckAccount) Reset() {
	*x = CSLoginCheckAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSLoginCheckAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSLoginCheckAccount) ProtoMessage() {}

func (x *CSLoginCheckAccount) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSLoginCheckAccount.ProtoReflect.Descriptor instead.
func (*CSLoginCheckAccount) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{0}
}

func (x *CSLoginCheckAccount) GetChannel() E_CHANNEL_TYPE {
	if x != nil {
		return x.Channel
	}
	return E_CHANNEL_TYPE_GUEST_CHANNEL
}

func (x *CSLoginCheckAccount) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CSLoginCheckAccount) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *CSLoginCheckAccount) GetLocalDateType() E_LOCAL_DATA_TYPE {
	if x != nil {
		return x.LocalDateType
	}
	return E_LOCAL_DATA_TYPE_NONE
}

func (x *CSLoginCheckAccount) GetLanguageType() int32 {
	if x != nil {
		return x.LanguageType
	}
	return 0
}

func (x *CSLoginCheckAccount) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CSLoginCheckAccount) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CSLoginCheckAccount) GetTestUser() int32 {
	if x != nil {
		return x.TestUser
	}
	return 0
}

type CSSavePlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceInfo   *DeviceInfo    `protobuf:"bytes,1,opt,name=deviceInfo,proto3" json:"deviceInfo,omitempty"`
	PlayerData   *PlayerData    `protobuf:"bytes,2,opt,name=playerData,proto3" json:"playerData,omitempty"`
	LocalTime    int64          `protobuf:"varint,3,opt,name=localTime,proto3" json:"localTime,omitempty"`
	Channel      E_CHANNEL_TYPE `protobuf:"varint,4,opt,name=channel,proto3,enum=E_CHANNEL_TYPE" json:"channel,omitempty"`
	LanguageType int32          `protobuf:"varint,5,opt,name=languageType,proto3" json:"languageType,omitempty"`
	TestUser     int32          `protobuf:"varint,6,opt,name=testUser,proto3" json:"testUser,omitempty"`
	ForceSave    int32          `protobuf:"varint,7,opt,name=forceSave,proto3" json:"forceSave,omitempty"`
}

func (x *CSSavePlayerData) Reset() {
	*x = CSSavePlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSSavePlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSSavePlayerData) ProtoMessage() {}

func (x *CSSavePlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSSavePlayerData.ProtoReflect.Descriptor instead.
func (*CSSavePlayerData) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{1}
}

func (x *CSSavePlayerData) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *CSSavePlayerData) GetPlayerData() *PlayerData {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *CSSavePlayerData) GetLocalTime() int64 {
	if x != nil {
		return x.LocalTime
	}
	return 0
}

func (x *CSSavePlayerData) GetChannel() E_CHANNEL_TYPE {
	if x != nil {
		return x.Channel
	}
	return E_CHANNEL_TYPE_GUEST_CHANNEL
}

func (x *CSSavePlayerData) GetLanguageType() int32 {
	if x != nil {
		return x.LanguageType
	}
	return 0
}

func (x *CSSavePlayerData) GetTestUser() int32 {
	if x != nil {
		return x.TestUser
	}
	return 0
}

func (x *CSSavePlayerData) GetForceSave() int32 {
	if x != nil {
		return x.ForceSave
	}
	return 0
}

type SCSavePlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerData *PlayerData             `protobuf:"bytes,1,opt,name=playerData,proto3" json:"playerData,omitempty"`
	OpType     E_SC_SAVE_OPERATOR_TYPE `protobuf:"varint,2,opt,name=opType,proto3,enum=E_SC_SAVE_OPERATOR_TYPE" json:"opType,omitempty"`
	LikedCount int32                   `protobuf:"varint,3,opt,name=likedCount,proto3" json:"likedCount,omitempty"`
}

func (x *SCSavePlayerData) Reset() {
	*x = SCSavePlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCSavePlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCSavePlayerData) ProtoMessage() {}

func (x *SCSavePlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCSavePlayerData.ProtoReflect.Descriptor instead.
func (*SCSavePlayerData) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{2}
}

func (x *SCSavePlayerData) GetPlayerData() *PlayerData {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *SCSavePlayerData) GetOpType() E_SC_SAVE_OPERATOR_TYPE {
	if x != nil {
		return x.OpType
	}
	return E_SC_SAVE_OPERATOR_TYPE_SAVE_SUCCESSED
}

func (x *SCSavePlayerData) GetLikedCount() int32 {
	if x != nil {
		return x.LikedCount
	}
	return 0
}

//同步数据,玩家自己选择使用本地or远端
type CSSyncPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerData *PlayerData             `protobuf:"bytes,1,opt,name=playerData,proto3" json:"playerData,omitempty"`
	DataType   E_SC_SYNC_OPERATOR_TYPE `protobuf:"varint,2,opt,name=dataType,proto3,enum=E_SC_SYNC_OPERATOR_TYPE" json:"dataType,omitempty"`
	DeviceInfo *DeviceInfo             `protobuf:"bytes,3,opt,name=deviceInfo,proto3" json:"deviceInfo,omitempty"`
}

func (x *CSSyncPlayerData) Reset() {
	*x = CSSyncPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSSyncPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSSyncPlayerData) ProtoMessage() {}

func (x *CSSyncPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSSyncPlayerData.ProtoReflect.Descriptor instead.
func (*CSSyncPlayerData) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{3}
}

func (x *CSSyncPlayerData) GetPlayerData() *PlayerData {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *CSSyncPlayerData) GetDataType() E_SC_SYNC_OPERATOR_TYPE {
	if x != nil {
		return x.DataType
	}
	return E_SC_SYNC_OPERATOR_TYPE_USE_LOCAL_DATA
}

func (x *CSSyncPlayerData) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

type SCSyncPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType E_SC_SYNC_OPERATOR_TYPE `protobuf:"varint,1,opt,name=dataType,proto3,enum=E_SC_SYNC_OPERATOR_TYPE" json:"dataType,omitempty"`
}

func (x *SCSyncPlayerData) Reset() {
	*x = SCSyncPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCSyncPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCSyncPlayerData) ProtoMessage() {}

func (x *SCSyncPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCSyncPlayerData.ProtoReflect.Descriptor instead.
func (*SCSyncPlayerData) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{4}
}

func (x *SCSyncPlayerData) GetDataType() E_SC_SYNC_OPERATOR_TYPE {
	if x != nil {
		return x.DataType
	}
	return E_SC_SYNC_OPERATOR_TYPE_USE_LOCAL_DATA
}

type SCPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerData *PlayerData        `protobuf:"bytes,1,opt,name=playerData,proto3" json:"playerData,omitempty"`
	OpType     E_SC_OPERATOR_TYPE `protobuf:"varint,2,opt,name=opType,proto3,enum=E_SC_OPERATOR_TYPE" json:"opType,omitempty"`
}

func (x *SCPlayerData) Reset() {
	*x = SCPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCPlayerData) ProtoMessage() {}

func (x *SCPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCPlayerData.ProtoReflect.Descriptor instead.
func (*SCPlayerData) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{5}
}

func (x *SCPlayerData) GetPlayerData() *PlayerData {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *SCPlayerData) GetOpType() E_SC_OPERATOR_TYPE {
	if x != nil {
		return x.OpType
	}
	return E_SC_OPERATOR_TYPE_SYNCDATA
}

type CSBindAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldAccount   string              `protobuf:"bytes,1,opt,name=oldAccount,proto3" json:"oldAccount,omitempty"`
	AccountName  string              `protobuf:"bytes,2,opt,name=accountName,proto3" json:"accountName,omitempty"`
	Type         E_BIND_ACCOUNT_TYPE `protobuf:"varint,3,opt,name=type,proto3,enum=E_BIND_ACCOUNT_TYPE" json:"type,omitempty"`
	PlayerData   *PlayerData         `protobuf:"bytes,4,opt,name=playerData,proto3" json:"playerData,omitempty"`
	DeviceInfo   *DeviceInfo         `protobuf:"bytes,5,opt,name=deviceInfo,proto3" json:"deviceInfo,omitempty"`
	LanguageType int32               `protobuf:"varint,6,opt,name=languageType,proto3" json:"languageType,omitempty"`
}

func (x *CSBindAccount) Reset() {
	*x = CSBindAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSBindAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSBindAccount) ProtoMessage() {}

func (x *CSBindAccount) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSBindAccount.ProtoReflect.Descriptor instead.
func (*CSBindAccount) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{6}
}

func (x *CSBindAccount) GetOldAccount() string {
	if x != nil {
		return x.OldAccount
	}
	return ""
}

func (x *CSBindAccount) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *CSBindAccount) GetType() E_BIND_ACCOUNT_TYPE {
	if x != nil {
		return x.Type
	}
	return E_BIND_ACCOUNT_TYPE_ASK_BIND
}

func (x *CSBindAccount) GetPlayerData() *PlayerData {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *CSBindAccount) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *CSBindAccount) GetLanguageType() int32 {
	if x != nil {
		return x.LanguageType
	}
	return 0
}

type SCBindAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlyaerData *PlayerData         `protobuf:"bytes,1,opt,name=plyaerData,proto3" json:"plyaerData,omitempty"`
	Type       E_BIND_ACCOUNT_TYPE `protobuf:"varint,2,opt,name=type,proto3,enum=E_BIND_ACCOUNT_TYPE" json:"type,omitempty"`
}

func (x *SCBindAccount) Reset() {
	*x = SCBindAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBindAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBindAccount) ProtoMessage() {}

func (x *SCBindAccount) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBindAccount.ProtoReflect.Descriptor instead.
func (*SCBindAccount) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{7}
}

func (x *SCBindAccount) GetPlyaerData() *PlayerData {
	if x != nil {
		return x.PlyaerData
	}
	return nil
}

func (x *SCBindAccount) GetType() E_BIND_ACCOUNT_TYPE {
	if x != nil {
		return x.Type
	}
	return E_BIND_ACCOUNT_TYPE_ASK_BIND
}

type SCUserDenial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type E_USER_DENIAL_TYPE `protobuf:"varint,1,opt,name=type,proto3,enum=E_USER_DENIAL_TYPE" json:"type,omitempty"`
}

func (x *SCUserDenial) Reset() {
	*x = SCUserDenial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCUserDenial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCUserDenial) ProtoMessage() {}

func (x *SCUserDenial) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCUserDenial.ProtoReflect.Descriptor instead.
func (*SCUserDenial) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{8}
}

func (x *SCUserDenial) GetType() E_USER_DENIAL_TYPE {
	if x != nil {
		return x.Type
	}
	return E_USER_DENIAL_TYPE_COMMON
}

type CSSyncServerTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSSyncServerTime) Reset() {
	*x = CSSyncServerTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSSyncServerTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSSyncServerTime) ProtoMessage() {}

func (x *CSSyncServerTime) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSSyncServerTime.ProtoReflect.Descriptor instead.
func (*CSSyncServerTime) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{9}
}

type SCSyncServerTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SCSyncServerTime) Reset() {
	*x = SCSyncServerTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCSyncServerTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCSyncServerTime) ProtoMessage() {}

func (x *SCSyncServerTime) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCSyncServerTime.ProtoReflect.Descriptor instead.
func (*SCSyncServerTime) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{10}
}

type CSCheckUserStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel    E_CHANNEL_TYPE `protobuf:"varint,1,opt,name=channel,proto3,enum=E_CHANNEL_TYPE" json:"channel,omitempty"`
	AccountId  string         `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	DeviceInfo *DeviceInfo    `protobuf:"bytes,3,opt,name=deviceInfo,proto3" json:"deviceInfo,omitempty"`
}

func (x *CSCheckUserStatus) Reset() {
	*x = CSCheckUserStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSCheckUserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSCheckUserStatus) ProtoMessage() {}

func (x *CSCheckUserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSCheckUserStatus.ProtoReflect.Descriptor instead.
func (*CSCheckUserStatus) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{11}
}

func (x *CSCheckUserStatus) GetChannel() E_CHANNEL_TYPE {
	if x != nil {
		return x.Channel
	}
	return E_CHANNEL_TYPE_GUEST_CHANNEL
}

func (x *CSCheckUserStatus) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CSCheckUserStatus) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

type SCCheckUserStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type E_SC_SAVE_OPERATOR_TYPE `protobuf:"varint,1,opt,name=type,proto3,enum=E_SC_SAVE_OPERATOR_TYPE" json:"type,omitempty"`
}

func (x *SCCheckUserStatus) Reset() {
	*x = SCCheckUserStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_login_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCheckUserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCheckUserStatus) ProtoMessage() {}

func (x *SCCheckUserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_login_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCheckUserStatus.ProtoReflect.Descriptor instead.
func (*SCCheckUserStatus) Descriptor() ([]byte, []int) {
	return file_login_proto_rawDescGZIP(), []int{12}
}

func (x *SCCheckUserStatus) GetType() E_SC_SAVE_OPERATOR_TYPE {
	if x != nil {
		return x.Type
	}
	return E_SC_SAVE_OPERATOR_TYPE_SAVE_SUCCESSED
}

var File_login_proto protoreflect.FileDescriptor

var file_login_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x02, 0x0a, 0x13,
	0x43, 0x53, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x93, 0x02, 0x0a, 0x10, 0x43, 0x53, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x53, 0x61, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x61, 0x76, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x53, 0x43,
	0x53, 0x61, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x6f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x45, 0x5f,
	0x53, 0x43, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa2, 0x01,
	0x0a, 0x10, 0x43, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x34, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x45, 0x5f, 0x53, 0x43, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x48, 0x0a, 0x10, 0x53, 0x43, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x45, 0x5f, 0x53, 0x43, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x0c,
	0x53, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x5f, 0x53, 0x43,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x06,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x43, 0x53, 0x42, 0x69, 0x6e,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6c,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x5f, 0x42, 0x49, 0x4e,
	0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x66, 0x0a, 0x0d, 0x53, 0x43, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x70, 0x6c, 0x79, 0x61, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x6c, 0x79, 0x61, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x37, 0x0a, 0x0c, 0x53, 0x43,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x53, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x43, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x11,
	0x43, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x41, 0x0a, 0x11, 0x53, 0x43, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x45, 0x5f, 0x53,
	0x43, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x2c, 0x0a, 0x0b, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x4d, 0x10, 0x02, 0x2a, 0x46, 0x0a, 0x10, 0x45, 0x5f, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x02,
	0x2a, 0x60, 0x0a, 0x12, 0x45, 0x5f, 0x53, 0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x59, 0x4e, 0x43, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x53, 0x45, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x10, 0x04, 0x2a, 0x70, 0x0a, 0x17, 0x45, 0x5f, 0x53, 0x43, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x04, 0x2a, 0x58, 0x0a, 0x17, 0x45, 0x5f, 0x53, 0x43, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0x57,
	0x0a, 0x13, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x4b, 0x5f, 0x42, 0x49, 0x4e,
	0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x5f, 0x43,
	0x4f, 0x4d, 0x46, 0x49, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x46,
	0x49, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x43,
	0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x39, 0x0a, 0x12, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x42, 0x17, 0x48, 0x01, 0x5a, 0x06, 0x2e, 0x2f, 0x3b, 0x61, 0x70, 0x69, 0xaa, 0x02,
	0x0a, 0x4d, 0x4d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_login_proto_rawDescOnce sync.Once
	file_login_proto_rawDescData = file_login_proto_rawDesc
)

func file_login_proto_rawDescGZIP() []byte {
	file_login_proto_rawDescOnce.Do(func() {
		file_login_proto_rawDescData = protoimpl.X.CompressGZIP(file_login_proto_rawDescData)
	})
	return file_login_proto_rawDescData
}

var file_login_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_login_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_login_proto_goTypes = []interface{}{
	(E_USER_TYPE)(0),             // 0: E_USER_TYPE
	(E_LOGIN_RESPONSE)(0),        // 1: E_LOGIN_RESPONSE
	(E_SC_OPERATOR_TYPE)(0),      // 2: E_SC_OPERATOR_TYPE
	(E_SC_SAVE_OPERATOR_TYPE)(0), // 3: E_SC_SAVE_OPERATOR_TYPE
	(E_SC_SYNC_OPERATOR_TYPE)(0), // 4: E_SC_SYNC_OPERATOR_TYPE
	(E_BIND_ACCOUNT_TYPE)(0),     // 5: E_BIND_ACCOUNT_TYPE
	(E_USER_DENIAL_TYPE)(0),      // 6: E_USER_DENIAL_TYPE
	(*CSLoginCheckAccount)(nil),  // 7: CSLoginCheckAccount
	(*CSSavePlayerData)(nil),     // 8: CSSavePlayerData
	(*SCSavePlayerData)(nil),     // 9: SCSavePlayerData
	(*CSSyncPlayerData)(nil),     // 10: CSSyncPlayerData
	(*SCSyncPlayerData)(nil),     // 11: SCSyncPlayerData
	(*SCPlayerData)(nil),         // 12: SCPlayerData
	(*CSBindAccount)(nil),        // 13: CSBindAccount
	(*SCBindAccount)(nil),        // 14: SCBindAccount
	(*SCUserDenial)(nil),         // 15: SCUserDenial
	(*CSSyncServerTime)(nil),     // 16: CSSyncServerTime
	(*SCSyncServerTime)(nil),     // 17: SCSyncServerTime
	(*CSCheckUserStatus)(nil),    // 18: CSCheckUserStatus
	(*SCCheckUserStatus)(nil),    // 19: SCCheckUserStatus
	(E_CHANNEL_TYPE)(0),          // 20: E_CHANNEL_TYPE
	(*DeviceInfo)(nil),           // 21: DeviceInfo
	(E_LOCAL_DATA_TYPE)(0),       // 22: E_LOCAL_DATA_TYPE
	(*PlayerData)(nil),           // 23: PlayerData
}
var file_login_proto_depIdxs = []int32{
	20, // 0: CSLoginCheckAccount.channel:type_name -> E_CHANNEL_TYPE
	21, // 1: CSLoginCheckAccount.deviceInfo:type_name -> DeviceInfo
	22, // 2: CSLoginCheckAccount.localDateType:type_name -> E_LOCAL_DATA_TYPE
	21, // 3: CSSavePlayerData.deviceInfo:type_name -> DeviceInfo
	23, // 4: CSSavePlayerData.playerData:type_name -> PlayerData
	20, // 5: CSSavePlayerData.channel:type_name -> E_CHANNEL_TYPE
	23, // 6: SCSavePlayerData.playerData:type_name -> PlayerData
	3,  // 7: SCSavePlayerData.opType:type_name -> E_SC_SAVE_OPERATOR_TYPE
	23, // 8: CSSyncPlayerData.playerData:type_name -> PlayerData
	4,  // 9: CSSyncPlayerData.dataType:type_name -> E_SC_SYNC_OPERATOR_TYPE
	21, // 10: CSSyncPlayerData.deviceInfo:type_name -> DeviceInfo
	4,  // 11: SCSyncPlayerData.dataType:type_name -> E_SC_SYNC_OPERATOR_TYPE
	23, // 12: SCPlayerData.playerData:type_name -> PlayerData
	2,  // 13: SCPlayerData.opType:type_name -> E_SC_OPERATOR_TYPE
	5,  // 14: CSBindAccount.type:type_name -> E_BIND_ACCOUNT_TYPE
	23, // 15: CSBindAccount.playerData:type_name -> PlayerData
	21, // 16: CSBindAccount.deviceInfo:type_name -> DeviceInfo
	23, // 17: SCBindAccount.plyaerData:type_name -> PlayerData
	5,  // 18: SCBindAccount.type:type_name -> E_BIND_ACCOUNT_TYPE
	6,  // 19: SCUserDenial.type:type_name -> E_USER_DENIAL_TYPE
	20, // 20: CSCheckUserStatus.channel:type_name -> E_CHANNEL_TYPE
	21, // 21: CSCheckUserStatus.deviceInfo:type_name -> DeviceInfo
	3,  // 22: SCCheckUserStatus.type:type_name -> E_SC_SAVE_OPERATOR_TYPE
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_login_proto_init() }
func file_login_proto_init() {
	if File_login_proto != nil {
		return
	}
	file_common_proto_init()
	file_userdata_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_login_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSLoginCheckAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSSavePlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCSavePlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSSyncPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCSyncPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSBindAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBindAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCUserDenial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSSyncServerTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCSyncServerTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSCheckUserStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_login_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCheckUserStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_login_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_login_proto_goTypes,
		DependencyIndexes: file_login_proto_depIdxs,
		EnumInfos:         file_login_proto_enumTypes,
		MessageInfos:      file_login_proto_msgTypes,
	}.Build()
	File_login_proto = out.File
	file_login_proto_rawDesc = nil
	file_login_proto_goTypes = nil
	file_login_proto_depIdxs = nil
}
